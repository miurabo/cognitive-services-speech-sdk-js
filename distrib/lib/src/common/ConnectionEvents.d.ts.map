{"version":3,"sources":["src/common/ConnectionEvents.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAE3D,qBAAa,YAAa,SAAQ,aAAa;IAC3C,OAAO,CAAC,cAAc,CAAS;gBAEZ,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,GAAE,SAA0B;IAK/F,IAAW,UAAU,IAAI,MAAM,CAE9B;CACJ;AAED,qBAAa,eAAgB,SAAQ,aAAa;IAC9C,OAAO,CAAC,gBAAgB,CAAS;gBAEd,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,GAAE,SAA0B;IAKjG,IAAW,YAAY,IAAI,MAAM,CAEhC;CACJ;AAED,qBAAa,oBAAqB,SAAQ,eAAe;IACrD,OAAO,CAAC,OAAO,CAAS;IACxB,OAAO,CAAC,WAAW,CAA4B;gBAE5B,YAAY,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,iBAAiB,CAAC,MAAM,CAAC;IAMzF,IAAW,GAAG,IAAI,MAAM,CAEvB;IAED,IAAW,OAAO,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAE9C;CACJ;AAED,qBAAa,0BAA2B,SAAQ,eAAe;gBACxC,YAAY,EAAE,MAAM;CAG1C;AAED,qBAAa,qBAAsB,SAAQ,eAAe;IACtD,OAAO,CAAC,UAAU,CAAS;IAC3B,OAAO,CAAC,cAAc,CAAS;gBAEZ,YAAY,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAM3E,IAAW,MAAM,IAAI,MAAM,CAE1B;IAED,IAAW,UAAU,IAAI,MAAM,CAE9B;CACJ;AAED,qBAAa,oBAAqB,SAAQ,eAAe;IACrD,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAS;IACrC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAS;gBAEf,YAAY,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;IAMtE,IAAW,OAAO,IAAI,MAAM,CAE3B;IAED,IAAW,IAAI,IAAI,MAAM,CAExB;CACJ;AAED,qBAAa,6BAA8B,SAAQ,eAAe;IAC9D,OAAO,CAAC,cAAc,CAAS;IAC/B,OAAO,CAAC,UAAU,CAAS;gBAER,YAAY,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;IAM3E,IAAW,MAAM,IAAI,MAAM,CAE1B;IAED,IAAW,UAAU,IAAI,MAAM,CAE9B;CACJ;AAED,qBAAa,8BAA+B,SAAQ,eAAe;IAC/D,OAAO,CAAC,uBAAuB,CAAS;IACxC,OAAO,CAAC,WAAW,CAAoB;gBAEpB,YAAY,EAAE,MAAM,EAAE,sBAAsB,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB;IAMnG,IAAW,mBAAmB,IAAI,MAAM,CAEvC;IAED,IAAW,OAAO,IAAI,iBAAiB,CAEtC;CACJ;AAED,qBAAa,0BAA2B,SAAQ,eAAe;IAC3D,OAAO,CAAC,mBAAmB,CAAS;IACpC,OAAO,CAAC,WAAW,CAAoB;gBAEpB,YAAY,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB;IAM/F,IAAW,eAAe,IAAI,MAAM,CAEnC;IAED,IAAW,OAAO,IAAI,iBAAiB,CAEtC;CACJ","file":"ConnectionEvents.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\n\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class ServiceEvent extends PlatformEvent {\n    private privJsonResult: string;\n\n    public constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\n      super(eventName, eventType);\n      this.privJsonResult = jsonstring;\n    }\n\n    public get jsonString(): string {\n        return this.privJsonResult;\n    }\n}\n\nexport class ConnectionEvent extends PlatformEvent {\n    private privConnectionId: string;\n\n    public constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.privConnectionId = connectionId;\n    }\n\n    public get connectionId(): string {\n        return this.privConnectionId;\n    }\n}\n\nexport class ConnectionStartEvent extends ConnectionEvent {\n    private privUri: string;\n    private privHeaders: IStringDictionary<string>;\n\n    public constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\n        super(\"ConnectionStartEvent\", connectionId);\n        this.privUri = uri;\n        this.privHeaders = headers;\n    }\n\n    public get uri(): string {\n        return this.privUri;\n    }\n\n    public get headers(): IStringDictionary<string> {\n        return this.privHeaders;\n    }\n}\n\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\n    public constructor(connectionId: string) {\n        super(\"ConnectionEstablishedEvent\", connectionId);\n    }\n}\n\nexport class ConnectionClosedEvent extends ConnectionEvent {\n    private privReason: string;\n    private privStatusCode: number;\n\n    public constructor(connectionId: string, statusCode: number, reason: string) {\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\n        this.privReason = reason;\n        this.privStatusCode = statusCode;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n}\n\nexport class ConnectionErrorEvent extends ConnectionEvent {\n    private readonly privMessage: string;\n    private readonly privType: string;\n\n    public constructor(connectionId: string, message: string, type: string) {\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\n        this.privMessage = message;\n        this.privType = type;\n    }\n\n    public get message(): string {\n        return this.privMessage;\n    }\n\n    public get type(): string {\n        return this.privType;\n    }\n}\n\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\n    private privStatusCode: number;\n    private privReason: string;\n\n    public constructor(connectionId: string, statuscode: number, reason: string) {\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\n        this.privStatusCode = statuscode;\n        this.privReason = reason;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n}\n\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\n    private privNetworkReceivedTime: string;\n    private privMessage: ConnectionMessage;\n\n    public constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\n        this.privMessage = message;\n    }\n\n    public get networkReceivedTime(): string {\n        return this.privNetworkReceivedTime;\n    }\n\n    public get message(): ConnectionMessage {\n        return this.privMessage;\n    }\n}\n\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\n    private privNetworkSentTime: string;\n    private privMessage: ConnectionMessage;\n\n    public constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageSentEvent\", connectionId);\n        this.privNetworkSentTime = networkSentTimeISO;\n        this.privMessage = message;\n    }\n\n    public get networkSentTime(): string {\n        return this.privNetworkSentTime;\n    }\n\n    public get message(): ConnectionMessage {\n        return this.privMessage;\n    }\n}\n"]}