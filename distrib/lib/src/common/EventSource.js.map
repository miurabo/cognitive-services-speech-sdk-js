{"version":3,"sources":["src/common/EventSource.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,iCAA8C;AAC9C,+BAA0C;AAM1C;IAMI,qBAAmB,QAAoC;QAL/C,uBAAkB,GAA+C,EAAE,CAAC;QAEpE,mBAAc,GAAY,KAAK,CAAC;QAChC,wBAAmB,GAAgB,SAAS,CAAC;QAGjD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;IACjC,CAAC;IAEM,6BAAO,GAAd,UAAe,KAAa;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACnB,MAAM,CAAC,IAAI,2BAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;SAClD;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,KAAK,IAAM,SAAS,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACnC,IAAI,SAAS,EAAE;oBACX,IAAI,KAAK,CAAC,QAAQ,EAAE;wBAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;4BAC5B,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;yBACxD;qBACJ;iBACJ;aACJ;SACJ;QAED,KAAK,IAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3C,IAAI,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;gBAC7C,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC;aAC3C;SACJ;IACL,CAAC;IAEM,4BAAM,GAAb,UAAc,eAAwC;QAAtD,iBASC;QARG,IAAM,EAAE,GAAG,uBAAgB,EAAE,CAAC;QAC9B,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC;QAC9C,OAAO;YACH,MAAM,EAAE;gBACJ,OAAO,KAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;gBACnC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC7B,CAAC;SACJ,CAAC;IACN,CAAC;IAEM,oCAAc,GAArB,UAAsB,QAAgC;QAClD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,CAAS,IAAW,OAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;IACjE,CAAC;IAEM,2CAAqB,GAA5B,UAA6B,QAAgC;QACzD,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC5B,KAAK,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,CAAC,0DAA0D;SACrG;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAC,CAAS,IAAW,OAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;QACjF,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAEM,gCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEM,6BAAO,GAAd;QACI,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,sBAAW,iCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;;;OAAA;IACL,kBAAC;AAAD,CArEA,AAqEC,IAAA;AArEY,kCAAW","file":"EventSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IEventListener, IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\n    private privMetadata: IStringDictionary<string>;\n    private privIsDisposed: boolean = false;\n    private privConsoleListener: IDetachable = undefined;\n\n    public constructor(metadata?: IStringDictionary<string>) {\n        this.privMetadata = metadata;\n    }\n\n    public onEvent(event: TEvent): void {\n        if (this.isDisposed()) {\n            throw (new ObjectDisposedError(\"EventSource\"));\n        }\n\n        if (this.metadata) {\n            for (const paramName in this.metadata) {\n                if (paramName) {\n                    if (event.metadata) {\n                        if (!event.metadata[paramName]) {\n                            event.metadata[paramName] = this.metadata[paramName];\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const eventId in this.privEventListeners) {\n            if (eventId && this.privEventListeners[eventId]) {\n                this.privEventListeners[eventId](event);\n            }\n        }\n    }\n\n    public attach(onEventCallback: (event: TEvent) => void): IDetachable {\n        const id = createNoDashGuid();\n        this.privEventListeners[id] = onEventCallback;\n        return {\n            detach: (): Promise<void> => {\n                delete this.privEventListeners[id];\n                return Promise.resolve();\n            },\n        };\n    }\n\n    public attachListener(listener: IEventListener<TEvent>): IDetachable {\n        return this.attach((e: TEvent): void => listener.onEvent(e));\n    }\n\n    public attachConsoleListener(listener: IEventListener<TEvent>): IDetachable {\n        if (!!this.privConsoleListener) {\n            void this.privConsoleListener.detach(); // Detach implementation for eventListeners is synchronous\n        }\n        this.privConsoleListener = this.attach((e: TEvent): void => listener.onEvent(e));\n        return this.privConsoleListener;\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public dispose(): void {\n        this.privEventListeners = null;\n        this.privIsDisposed = true;\n    }\n\n    public get metadata(): IStringDictionary<string> {\n        return this.privMetadata;\n    }\n}\n"]}