{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":"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","file":"ConsoleLoggingListener.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport * as fs from \"fs\";\nimport { LogLevel } from \"../sdk/LogLevel\";\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\nimport { Contracts } from \"../sdk/Contracts\";\n\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\n    private privLogLevelFilter: LogLevel;\n    private privLogPath: fs.PathLike = undefined;\n    private privEnableConsoleOutput: boolean = true;\n\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\n        this.privLogLevelFilter = logLevelFilter;\n    }\n\n    public set logPath(path: fs.PathLike) {\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\n        this.privLogPath = path;\n    }\n\n    public set enableConsoleOutput(enableOutput: boolean) {\n        this.privEnableConsoleOutput = enableOutput;\n    }\n\n    public onEvent(event: PlatformEvent): void {\n        if (event.eventType >= this.privLogLevelFilter) {\n            const log = this.toString(event);\n            if (!!this.privLogPath) {\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\n            }\n\n            if (this.privEnableConsoleOutput) {\n                switch (event.eventType) {\n                    case LogLevel.Debug:\n                        // eslint-disable-next-line no-console\n                        console.debug(log);\n                        break;\n                    case LogLevel.Info:\n                        // eslint-disable-next-line no-console\n                        console.info(log);\n                        break;\n                    case LogLevel.Warning:\n                        // eslint-disable-next-line no-console\n                        console.warn(log);\n                        break;\n                    case LogLevel.Error:\n                        // eslint-disable-next-line no-console\n                        console.error(log);\n                        break;\n                    default:\n                        // eslint-disable-next-line no-console\n                        console.log(log);\n                        break;\n                }\n            }\n        }\n    }\n\n    private toString(event: PlatformEvent): string {\n        const logFragments = [\n            `${event.eventTime}`,\n            `${event.name}`,\n        ];\n\n        const e: any = event as any;\n        for (const prop in e) {\n            if (prop && event.hasOwnProperty(prop) &&\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\n                prop !== \"eventId\" && prop !== \"name\" &&\n                prop !== \"constructor\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const value = e[prop];\n                let valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    } else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n\n                logFragments.push(`${prop}: ${valueToLog}`);\n            }\n\n        }\n\n        return logFragments.join(\" | \");\n    }\n}\n"]}