{"version":3,"sources":["src/sdk/Transcription/IParticipant.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD;;;AAElD,yCAAyC;AACzC,sCAAgD;AAWhD;IAGI,cAAmB,MAAc;QAC7B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;IAC7B,CAAC;IAED,sBAAW,wBAAM;aAAjB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IACL,WAAC;AAAD,CAVA,AAUC,IAAA;AAVY,oBAAI;AAiDjB;IAWI,qBAAmB,EAAU,EAAE,MAAc,EAAE,WAAmB,EAAE,MAAe,EAAE,OAAgB,EAAE,UAAmB,EAAE,iBAAyB,EAAE,KAAc;QACjK,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI,4BAAkB,EAAE,CAAC;IACnD,CAAC;IAED,sBAAW,+BAAM;aAAjB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAW,oCAAW;aAAtB;YACI,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,CAAC;;;OAAA;IAED,sBAAW,2BAAE;aAAb;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAED,sBAAW,0CAAiB;aAA5B;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC;QACtC,CAAC;;;OAAA;IAED,sBAAW,+BAAM;aAAjB;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAED,sBAAW,gCAAO;aAAlB;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAW,mCAAU;aAArB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;;;OAAA;IAED,sBAAW,8BAAK;aAAhB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED,sBAAW,mCAAU;aAArB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;;;OAAA;IAEa,gBAAI,GAAlB,UAAmB,EAAU,EAAE,QAAgB,EAAE,KAAa;QAC1D,OAAO,IAAI,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAC;IACL,kBAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DY,kCAAW","file":"IParticipant.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\n/* eslint-disable max-classes-per-file */\nimport { PropertyCollection } from \"../Exports\";\n\n/**\n * Represents a user in a conversation.\n * Added in version 1.4.0\n */\nexport interface IUser {\n    /** Gets the user's ID */\n    readonly userId: string;\n}\n\nexport class User implements IUser {\n    private privUserId: string;\n\n    public constructor(userId: string) {\n        this.privUserId = userId;\n    }\n\n    public get userId(): string {\n        return this.privUserId;\n    }\n}\n\nexport interface VoiceSignature {\n    Version: number;\n    Tag: string;\n    Data: string;\n}\n\nexport interface TranscriptionParticipant {\n    /** The unique identifier for the participant. */\n    readonly id: string;\n    /** The participant's preferred spoken language. */\n    readonly preferredLanguage: string;\n    /** The participant's voice signature */\n    readonly voice: string;\n}\n\n/**\n * Represents a participant in a conversation.\n * Added in version 1.4.0\n */\nexport interface IParticipant extends TranscriptionParticipant {\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\n    readonly avatar: string;\n    /**\n     * The participant's display name. Please note that there may be more than one participant\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\n     */\n    readonly displayName: string;\n    /** Gets whether or not this participant is the host. */\n    readonly isHost: boolean;\n    /** Gets whether or not this participant is muted. */\n    readonly isMuted: boolean;\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\n    readonly isUsingTts: boolean;\n    /** Contains properties of the participant. */\n    readonly properties: PropertyCollection;\n}\n\nexport class Participant implements IParticipant {\n    private privAvatar: string;\n    private privDisplayName: string;\n    private privId: string;\n    private privIsHost: boolean;\n    private privIsMuted: boolean;\n    private privIsUsingTts: boolean;\n    private privPreferredLanguage: string;\n    private privVoice: string;\n    private privProperties: PropertyCollection;\n\n    public constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\n        this.privId = id;\n        this.privAvatar = avatar;\n        this.privDisplayName = displayName;\n        this.privIsHost = isHost;\n        this.privIsMuted = isMuted;\n        this.privIsUsingTts = isUsingTts;\n        this.privPreferredLanguage = preferredLanguage;\n        this.privVoice = voice;\n        this.privProperties = new PropertyCollection();\n    }\n\n    public get avatar(): string {\n        return this.privAvatar;\n    }\n\n    public get displayName(): string {\n        return this.privDisplayName;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public get preferredLanguage(): string {\n        return this.privPreferredLanguage;\n    }\n\n    public get isHost(): boolean {\n        return this.privIsHost;\n    }\n\n    public get isMuted(): boolean {\n        return this.privIsMuted;\n    }\n\n    public get isUsingTts(): boolean {\n        return this.privIsUsingTts;\n    }\n\n    public get voice(): string {\n        return this.privVoice;\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public static From(id: string, language: string, voice: string): IParticipant {\n        return new Participant(id, \"\", id, false, false, false, language, voice);\n    }\n}\n"]}