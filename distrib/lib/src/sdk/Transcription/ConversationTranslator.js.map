{"version":3,"sources":["src/sdk/Transcription/ConversationTranslator.ts"],"names":[],"mappings":"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","file":"ConversationTranslator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n    ConversationConnectionConfig,\n    ServicePropertiesPropertyName,\n} from \"../../common.speech/Exports\";\nimport { ConversationTranslatorConnectionFactory } from \"../../common.speech/Transcription/ConversationTranslatorConnectionFactory\";\nimport {\n    IDisposable,\n    IErrorMessages,\n    IStringDictionary,\n    marshalPromiseToCallbacks\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioConfig,\n    CancellationErrorCode,\n    CancellationReason,\n    ProfanityOption,\n    PropertyCollection,\n    PropertyId,\n    ServicePropertyChannel,\n    SessionEventArgs,\n    SpeechTranslationConfig,\n    TranslationRecognitionEventArgs,\n    TranslationRecognizer\n} from \"../Exports\";\nimport { ConversationImpl } from \"./Conversation\";\nimport {\n    ConversationCommon,\n    ConversationExpirationEventArgs,\n    ConversationHandler,\n    ConversationParticipantsChangedEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationEventArgs,\n    IConversationTranslator,\n    Participant\n} from \"./Exports\";\nimport { Callback, IConversation } from \"./IConversation\";\n\nexport enum SpeechState {\n    Inactive, Connecting, Connected\n}\n\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\n    private privTranslator: ConversationTranslator;\n    private privSpeechState: SpeechState;\n\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig: AudioConfig, translator: ConversationTranslator, convGetter: () => ConversationImpl) {\n\n        super(speechConfig, audioConfig, new ConversationTranslatorConnectionFactory(convGetter));\n\n        this.privSpeechState = SpeechState.Inactive;\n        if (!!translator) {\n            this.privTranslator = translator;\n            this.sessionStarted = (): void => {\n                this.privSpeechState = SpeechState.Connected;\n            };\n\n            this.sessionStopped = (): void => {\n                this.privSpeechState = SpeechState.Inactive;\n            };\n\n            this.recognizing = (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): void => {\n                if (!!this.privTranslator.recognizing) {\n                    this.privTranslator.recognizing(this.privTranslator, e);\n                }\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs): Promise<void> => {\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\n                if (e.result?.errorDetails) {\n                    await this.cancelSpeech();\n                    // TODO: format the error message contained in 'errorDetails'\n                    this.fireCancelEvent(e.result.errorDetails);\n                } else {\n                    if (!!this.privTranslator.recognized) {\n                        this.privTranslator.recognized(this.privTranslator, e);\n                    }\n                }\n                return;\n            };\n\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            this.canceled = async (): Promise<void> => {\n                if (this.privSpeechState !== SpeechState.Inactive) {\n                    try {\n                        await this.cancelSpeech();\n                    } catch (error) {\n                        this.privSpeechState = SpeechState.Inactive;\n                    }\n                }\n            };\n        }\n    }\n\n    public get state(): SpeechState {\n        return this.privSpeechState;\n    }\n\n    public set state(newState: SpeechState) {\n        this.privSpeechState = newState;\n    }\n\n    public onConnection(): void {\n        this.privSpeechState = SpeechState.Connected;\n    }\n\n    public async onDisconnection(): Promise<void> {\n        this.privSpeechState = SpeechState.Inactive;\n        await this.cancelSpeech();\n    }\n\n    /**\n     * Fire a cancel event\n     * @param error\n     */\n    private fireCancelEvent(error: string): void {\n        try {\n            if (!!this.privTranslator.canceled) {\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\n                    CancellationReason.Error,\n                    error,\n                    CancellationErrorCode.RuntimeError\n                    );\n\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private async cancelSpeech(): Promise<void> {\n        try {\n            this.stopContinuousRecognitionAsync();\n            await this.privReco?.disconnect();\n            this.privSpeechState = SpeechState.Inactive;\n        } catch (e) {\n            // ignore the error\n        }\n    }\n}\n\n/**\n * Join, leave or connect to a conversation.\n */\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\n\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n\n    // Callbacks for whole conversation results\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n\n    // Callbacks for detecting speech/translation results from self\n    public recognized: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\n    public recognizing: (sender: IConversationTranslator, event: TranslationRecognitionEventArgs) => void;\n\n    private privSpeechRecognitionLanguage: string;\n    private privProperties: PropertyCollection;\n    private privIsDisposed: boolean;\n    private privCTRecognizer: ConversationTranslationRecognizer;\n    private privIsSpeaking: boolean;\n    private privConversation: ConversationImpl;\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\n    private privPlaceholderKey: string;\n    private privPlaceholderRegion: string;\n\n    public constructor(audioConfig?: AudioConfig) {\n        super(audioConfig);\n        this.privIsDisposed = false;\n        this.privIsSpeaking = false;\n        this.privPlaceholderKey = \"abcdefghijklmnopqrstuvwxyz012345\";\n        this.privPlaceholderRegion = \"westus\";\n        this.privProperties = new PropertyCollection();\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get speechRecognitionLanguage(): string {\n        return this.privSpeechRecognitionLanguage;\n    }\n\n    public get participants(): Participant[] {\n        return this.privConversation?.participants;\n    }\n\n    private get canSpeak(): boolean {\n\n        // is there a Conversation websocket available and has the Recognizer been set up\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\n            return false;\n        }\n\n        // is the user already speaking\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\n            return false;\n        }\n\n        // is the user muted\n        if (this.privConversation.isMutedByHost) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public setServiceProperty(name: string, value: string): void {\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\n\n        currentProperties[name] = value;\n\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n    }\n\n    /**\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\n     * @param conversation\n     * @param nickname\n     * @param lang\n     * @param cb\n     * @param err\n     */\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\n    public joinConversationAsync(conversation: string | IConversation, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\n\n        try {\n\n            if (typeof conversation === \"string\") {\n\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n                if (!!this.privConversation) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n                }\n\n                let lang: string = param1 as string;\n                if (lang === undefined || lang === null || lang === \"\") {\n                    lang = ConversationConnectionConfig.defaultLanguageCode;\n                }\n\n                // create a placeholder config\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\n                    this.privPlaceholderKey,\n                    this.privPlaceholderRegion);\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\n\n                const propertyIdsToCopy: (string | PropertyId)[] = [\n                    PropertyId.SpeechServiceConnection_Host,\n                    PropertyId.ConversationTranslator_Host,\n                    PropertyId.SpeechServiceConnection_Endpoint,\n                    PropertyId.SpeechServiceConnection_ProxyHostName,\n                    PropertyId.SpeechServiceConnection_ProxyPassword,\n                    PropertyId.SpeechServiceConnection_ProxyPort,\n                    PropertyId.SpeechServiceConnection_ProxyUserName,\n                    \"ConversationTranslator_MultiChannelAudio\",\n                    \"ConversationTranslator_Region\"\n                ];\n\n                for (const prop of propertyIdsToCopy) {\n                    const value = this.privProperties.getProperty(prop);\n                    if (value) {\n                        const key = typeof prop === \"string\" ? prop : PropertyId[prop];\n                        this.privSpeechTranslationConfig.setProperty(key, value);\n                    }\n                }\n\n                const currentProperties  = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\n                for (const prop of Object.keys(currentProperties)) {\n                    this.privSpeechTranslationConfig.setServiceProperty(prop, currentProperties[prop], ServicePropertyChannel.UriQueryParameter);\n                }\n\n                // join the conversation\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\n                this.privConversation.conversationTranslator = this;\n\n                this.privConversation.joinConversationAsync(\n                    conversation,\n                    nickname,\n                    lang,\n                    ((result: string): void => {\n\n                        if (!result) {\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\n                        }\n\n                        this.privSpeechTranslationConfig.authorizationToken = result;\n                        this.privConversation.room.isHost = false;\n\n                        // connect to the ws\n                        this.privConversation.startConversationAsync(\n                            ((): void => {\n                                this.handleCallback(param2, param3);\n                            }),\n                            ((error: any): void => {\n                                this.handleError(error, param3);\n                            }));\n\n                    }),\n                    ((error: any): void => {\n                        this.handleError(error, param3);\n                    }));\n\n            } else if (typeof conversation === \"object\") {\n\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n                // save the nickname\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\n                // ref the conversation object\n                this.privConversation = conversation as ConversationImpl;\n                // ref the conversation translator object\n                this.privConversation.conversationTranslator = this;\n                this.privConversation.room.isHost = true;\n\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n                this.privSpeechTranslationConfig = conversation.config;\n\n                this.handleCallback(param1 as Callback, param2);\n            } else {\n                this.handleError(\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\n                    param2);\n            }\n\n        } catch (error) {\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n        }\n    }\n\n    /**\n     * Leave the conversation\n     * @param cb\n     * @param err\n     */\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\n\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n\n            // stop the speech websocket\n            await this.cancelSpeech();\n            // stop the websocket\n            await this.privConversation.endConversationImplAsync();\n            // https delete request\n            await this.privConversation.deleteConversationImplAsync();\n            this.dispose();\n\n        })(), cb, err);\n    }\n\n    /**\n     * Send a text message\n     * @param message\n     * @param cb\n     * @param err\n     */\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\n\n        try {\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n\n            this.privConversation.sendTextMessageAsync(message, cb, err);\n        } catch (error) {\n\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Start speaking\n     * @param cb\n     * @param err\n     */\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n            try {\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n                if (this.privCTRecognizer === undefined) {\n                    await this.connectTranslatorRecognizer();\n                }\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\n\n                if (!this.canSpeak) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n                }\n\n                await this.startContinuousRecognition();\n\n                this.privIsSpeaking = true;\n            } catch (error) {\n                this.privIsSpeaking = false;\n                await this.cancelSpeech();\n                throw error;\n            }\n        })(), cb, err);\n    }\n\n    /**\n     * Stop speaking\n     * @param cb\n     * @param err\n     */\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n            try {\n                if (!this.privIsSpeaking) {\n                    // stop speech\n                    await this.cancelSpeech();\n                    return;\n                }\n\n                // stop the recognition but leave the websocket open\n                this.privIsSpeaking = false;\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\n                    this.privCTRecognizer.stopContinuousRecognitionAsync(resolve, reject);\n                });\n\n            } catch (error) {\n                await this.cancelSpeech();\n            }\n        })(), cb, err);\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n            if (this.isDisposed && !this.privIsSpeaking) {\n                return;\n            }\n            await this.cancelSpeech();\n            this.privIsDisposed = true;\n            this.privSpeechTranslationConfig.close();\n            this.privSpeechRecognitionLanguage = undefined;\n            this.privProperties = undefined;\n            this.privAudioConfig = undefined;\n            this.privSpeechTranslationConfig = undefined;\n            this.privConversation.dispose();\n            this.privConversation = undefined;\n        })(), success, err);\n    }\n\n    /**\n     * Cancel the speech websocket\n     */\n    private async cancelSpeech(): Promise<void> {\n        try {\n            this.privIsSpeaking = false;\n            await this.privCTRecognizer?.onDisconnection();\n            this.privCTRecognizer = undefined;\n        } catch (e) {\n            // ignore the error\n        }\n    }\n\n    /**\n     * Connect to the speech translation recognizer.\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n     */\n    private async connectTranslatorRecognizer(): Promise<void> {\n        try {\n\n            if (this.privAudioConfig === undefined) {\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\n            }\n\n            // clear the temp subscription key if it's a participant joining\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\n                === this.privPlaceholderKey) {\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\n            }\n\n            const convGetter = (): ConversationImpl => this.privConversation;\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this, convGetter);\n        } catch (error) {\n            await this.cancelSpeech();\n            throw error;\n        }\n    }\n\n    /**\n     * Handle the start speaking request\n     */\n    private startContinuousRecognition(): Promise<void> {\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\n        });\n    }\n}\n"]}