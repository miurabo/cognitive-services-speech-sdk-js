{"version":3,"sources":["src/sdk/BotFrameworkConfig.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,yCAAwC;AACxC,6DAAqF;AACrF,qCAAuC;AAEvC;;;GAGG;AACH;IAAwC,sCAAuB;IAE3D;;OAEG;IACH;eACI,iBAAO;IACX,CAAC;IAED;;;;;;;;;;OAUG;IACW,mCAAgB,GAA9B,UAA+B,YAAoB,EAAE,MAAc,EAAE,KAAc;QAC/E,qBAAS,CAAC,uBAAuB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAChE,qBAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpD,IAAM,kBAAkB,GAAuB,IAAI,6CAAuB,EAAE,CAAC;QAC7E,kBAAkB,CAAC,WAAW,CAC1B,oBAAU,CAAC,uBAAuB,EAClC,yCAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAClD,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,YAAY,CAAC,CAAC;QACrF,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAC;QAElF,IAAI,KAAK,EAAE;YACP,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;SAChF;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACW,yCAAsB,GAApC,UACI,kBAA0B,EAAE,MAAc,EAAE,KAAc;QAE1D,qBAAS,CAAC,uBAAuB,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;QAC5E,qBAAS,CAAC,uBAAuB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEpD,IAAM,kBAAkB,GAAuB,IAAI,6CAAuB,EAAE,CAAC;QAC7E,kBAAkB,CAAC,WAAW,CAC1B,oBAAU,CAAC,uBAAuB,EAClC,yCAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAClD,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,gCAAgC,EAAE,kBAAkB,CAAC,CAAC;QAChG,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAC;QAElF,IAAI,KAAK,EAAE;YACP,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;SAChF;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACW,2BAAQ,GAAtB,UACI,IAAkB,EAClB,eAAwB,EACxB,KAAc;QAEd,KAAK,KAAK,CAAC;QACX,qBAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,IAAM,YAAY,GAAQ,IAAI,YAAY,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,WAAS,IAAI,4BAAyB,CAAC,CAAC;QACvG,qBAAS,CAAC,sBAAsB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAE/D,IAAM,kBAAkB,GAAuB,IAAI,6CAAuB,EAAE,CAAC;QAC7E,kBAAkB,CAAC,WAAW,CAC1B,oBAAU,CAAC,uBAAuB,EAClC,yCAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAClD,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,4BAA4B,EAAE,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEjG,IAAI,SAAS,KAAK,eAAe,EAAE;YAC/B,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,eAAe,CAAC,CAAC;SAC3F;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACW,+BAAY,GAA1B,UAA2B,QAAa,EAAE,eAAwB;QAC9D,qBAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAE5C,IAAM,kBAAkB,GAAuB,IAAI,6CAAuB,EAAE,CAAC;QAC7E,kBAAkB,CAAC,WAAW,CAC1B,oBAAU,CAAC,uBAAuB,EAClC,yCAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAClD,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,gCAAgC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEjG,IAAI,SAAS,KAAK,eAAe,EAAE;YAC/B,kBAAkB,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,eAAe,CAAC,CAAC;SAC3F;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;IACL,yBAAC;AAAD,CAtJA,AAsJC,CAtJuC,6CAAuB,GAsJ9D;AAtJY,gDAAkB","file":"BotFrameworkConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n\n/**\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\n * @class BotFrameworkConfig\n */\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\n\n    /**\n     * Creates an instance of BotFrameworkConfig.\n     */\n    public constructor() {\n        super();\n    }\n\n    /**\n     * Creates a bot framework configuration instance with the provided subscription information.\n     * @member BotFrameworkConfig.fromSubscription\n     * @function\n     * @public\n     * @param subscription Subscription key associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n     * resource name.\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n     */\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n\n        if (botId) {\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n        }\n\n        return botFrameworkConfig;\n    }\n\n    /**\n     * Creates a bot framework configuration instance for the specified authorization token and region.\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\n     * caller must refresh it by setting the authorizationToken property on the corresponding\n     * DialogServiceConnector instance created with this config. The contents of configuration objects are copied\n     * when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\n     * original configuration's authorization token. Create a new configuration instance or set the\n     * SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\n     * further DialogServiceConnectors.\n     * @member BotFrameworkConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param authorizationToken The authorization token associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n     * resource name.\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n     */\n    public static fromAuthorizationToken(\n        authorizationToken: string, region: string, botId?: string\n    ): BotFrameworkConfig {\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n\n        if (botId) {\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n        }\n\n        return botFrameworkConfig;\n    }\n\n    /**\n     * Creates an instance of a BotFrameworkConfig.\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\n     * property on the created BotFrameworkConfig instance.\n     * Note: Added in version 1.15.0.\n     * @member BotFrameworkConfig.fromHost\n     * @function\n     * @public\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\n     * wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\n     * wss://{host}.convai.speech.azure.us.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n     * token must be set.\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n     * resource name.\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n     */\n    public static fromHost(\n        host: URL | string,\n        subscriptionKey?: string,\n        botId?: string): BotFrameworkConfig {\n\n        void botId;\n        Contracts.throwIfNullOrUndefined(host, \"host\");\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\n\n        if (undefined !== subscriptionKey) {\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n\n        return botFrameworkConfig;\n    }\n\n    /**\n     * Creates an instance of a BotFrameworkConfig.\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n     * fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\n     * use the authorization token.\n     * Note: Added in version 1.15.0.\n     * @member BotFrameworkConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n     * token must be set.\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\n\n        if (undefined !== subscriptionKey) {\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n\n        return botFrameworkConfig;\n    }\n}\n"]}