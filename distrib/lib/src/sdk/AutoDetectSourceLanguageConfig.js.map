{"version":3,"sources":["src/sdk/AutoDetectSourceLanguageConfig.ts"],"names":[],"mappings":"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","file":"AutoDetectSourceLanguageConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\nimport {Contracts} from \"./Contracts\";\nimport {\n    PropertyCollection,\n    PropertyId,\n    SourceLanguageConfig,\n} from \"./Exports\";\nimport { LanguageIdMode } from \"./LanguageIdMode\";\n\n/**\n * Language auto detect configuration.\n * @class AutoDetectSourceLanguageConfig\n * Added in version 1.13.0.\n */\nexport class AutoDetectSourceLanguageConfig {\n    private privProperties: PropertyCollection;\n    private privLanguageIdMode: LanguageIdMode;\n\n    private constructor() {\n        this.privProperties = new PropertyCollection();\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\n        this.privLanguageIdMode = LanguageIdMode.AtStart;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\n     * @function\n     * @public\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\n     */\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\n        const config = new AutoDetectSourceLanguageConfig();\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\n        return config;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\n     * @function\n     * @public\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\n     */\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n        const config = new AutoDetectSourceLanguageConfig();\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n        return config;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\n     * @function\n     * @public\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\n     */\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\n        if (configs.length < 1) {\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n        }\n        const autoConfig = new AutoDetectSourceLanguageConfig();\n        const langs: string[] = [];\n        configs.forEach((config: SourceLanguageConfig): void => {\n            langs.push(config.language);\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\n            }\n        });\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n\n        return autoConfig;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\n     * @function\n     * @public\n     * @return {PropertyCollection} Properties of the config.\n     * @summary Gets an auto detected language config properties\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.prototype.mode\n     * @function\n     * @public\n     * @param {LanguageIdMode} mode LID mode desired.\n     * @summary Sets LID operation to desired mode\n     */\n    public set mode(mode: LanguageIdMode) {\n        if (mode === LanguageIdMode.Continuous) {\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"2\");\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"Continuous\");\n        } else { // LanguageIdMode.AtStart\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecognitionEndpointVersion, \"1\");\n            this.privProperties.setProperty(PropertyId.SpeechServiceConnection_LanguageIdMode, \"AtStart\");\n        }\n        this.privLanguageIdMode = mode;\n    }\n}\n"]}