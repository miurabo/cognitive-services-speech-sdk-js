{"version":3,"sources":["src/sdk/ConnectionMessage.ts"],"names":[],"mappings":";AAAA,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;;;AAEF,gDAAgD;AAChD,4DAA2D;AAC3D,6CAG2B;AAC3B,2DAE8B;AAC9B,2CAA0C;AAE1C;;;;;;;GAOG;AACH;IAAA;IAwCA,CAAC;IAAD,wBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCqB,8CAAiB;AA0CvC;IAKI,+BAAmB,OAA6B;QAAhD,iBAUC;QATG,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,IAAI,uCAAkB,EAAE,CAAC;QAC/C,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,yBAAW,CAAC,YAAY,CAAC,EAAE;YAChE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,uBAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,yBAAW,CAAC,YAAY,CAAC,CAAC,CAAC;SAC9H;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,MAAc;YACnE,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,KAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;IAKD,sBAAW,uCAAI;QAHf;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,GAAW,IAAc,OAAA,GAAG,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,WAAW,EAAE,EAA1C,CAA0C,CAAC,CAAC,CAAC;QAC1K,CAAC;;;OAAA;IAMD,sBAAW,gDAAa;QAJxB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,qBAAW,CAAC,IAAI,CAAC;QACvE,CAAC;;;OAAA;IAMD,sBAAW,kDAAe;QAJ1B;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,qBAAW,CAAC,MAAM,CAAC;QACzE,CAAC;;;OAAA;IAOD,sBAAW,8CAAW;QALtB;;;;WAIG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;QAC/C,CAAC;;;OAAA;IAKD,sBAAW,gDAAa;QAHxB;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;QACjD,CAAC;;;OAAA;IAMD,sBAAW,6CAAU;QAJrB;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;;;OAAA;IAED;;OAEG;IACI,wCAAQ,GAAf;QACI,OAAO,EAAE,CAAC;IACd,CAAC;IACL,4BAAC;AAAD,CAtEA,AAsEC,IAAA;AAtEY,sDAAqB","file":"ConnectionMessage.js","sourcesContent":["//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\n// eslint-disable-next-line max-classes-per-file\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\nimport {\n    ConnectionMessage as IntConnectionMessage,\n    MessageType\n} from \"../common/Exports\";\nimport {\n    PropertyCollection\n} from \"./PropertyCollection\";\nimport { PropertyId } from \"./PropertyId\";\n\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\nexport abstract class ConnectionMessage {\n    /**\n     * The message path.\n     */\n    public abstract get path(): string;\n\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n    public abstract get isTextMessage(): boolean;\n\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n    public abstract get isBinaryMessage(): boolean;\n\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n    public abstract get TextMessage(): string;\n\n    /**\n     * Gets the binary message payload.\n     */\n    public abstract get binaryMessage(): ArrayBuffer;\n\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n    public abstract get properties(): PropertyCollection;\n\n    /**\n     * Returns a string that represents the connection message.\n     */\n    public abstract toString(): string;\n}\n\nexport class ConnectionMessageImpl {\n\n    private privConnectionMessage: IntConnectionMessage;\n    private privProperties: PropertyCollection;\n\n    public constructor(message: IntConnectionMessage) {\n        this.privConnectionMessage = message;\n        this.privProperties = new PropertyCollection();\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\n        }\n\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\n        });\n    }\n\n    /**\n     * The message path.\n     */\n    public get path(): string {\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\n    }\n\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n    public get isTextMessage(): boolean {\n        return this.privConnectionMessage.messageType === MessageType.Text;\n    }\n\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n    public get isBinaryMessage(): boolean {\n        return this.privConnectionMessage.messageType === MessageType.Binary;\n    }\n\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n    public get TextMessage(): string {\n        return this.privConnectionMessage.textBody;\n    }\n\n    /**\n     * Gets the binary message payload.\n     */\n    public get binaryMessage(): ArrayBuffer {\n        return this.privConnectionMessage.binaryBody;\n    }\n\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Returns a string that represents the connection message.\n     */\n    public toString(): string {\n        return \"\";\n    }\n}\n"]}