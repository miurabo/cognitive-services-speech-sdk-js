{"version":3,"sources":["src/sdk/PhraseListGrammar.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAYlC;;;;;GAKG;AACH;IAGI,2BAAoB,SAAgC;QAChD,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC,cAAc,CAAC;IACvD,CAAC;IAED;;;OAGG;IACW,gCAAc,GAA5B,UAA6B,UAAqE;QAC9F,IAAM,QAAQ,GAAG,UAAU,CAAC,YAAqC,CAAC;QAClE,OAAO,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACI,qCAAS,GAAhB,UAAiB,MAAc;QAC3B,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,sCAAU,GAAjB,UAAkB,OAAiB;QAC/B,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,iCAAK,GAAZ;QACI,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAC3C,CAAC;IACL,wBAAC;AAAD,CAtCA,AAsCC,IAAA;AAtCY,8CAAiB","file":"PhraseListGrammar.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    DynamicGrammarBuilder,\n    ServiceRecognizerBase,\n} from \"../common.speech/Exports\";\nimport {\n    ConversationTranscriber,\n    MeetingTranscriber,\n    Recognizer\n} from \"./Exports\";\n\n/**\n * Allows additions of new phrases to improve speech recognition.\n *\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\n * to the speech service.\n */\nexport class PhraseListGrammar {\n    private privGrammerBuilder: DynamicGrammarBuilder;\n\n    private constructor(recogBase: ServiceRecognizerBase) {\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\n    }\n\n    /**\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\n     * @param recognizer The recognizer to add phrase lists to.\n     */\n    public static fromRecognizer(recognizer: Recognizer | ConversationTranscriber | MeetingTranscriber): PhraseListGrammar {\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\n        return new PhraseListGrammar(recoBase);\n    }\n\n    /**\n     * Adds a single phrase to the current recognizer.\n     * @param phrase Phrase to add.\n     */\n    public addPhrase(phrase: string): void {\n        this.privGrammerBuilder.addPhrase(phrase);\n    }\n\n    /**\n     * Adds multiple phrases to the current recognizer.\n     * @param phrases Array of phrases to add.\n     */\n    public addPhrases(phrases: string[]): void {\n        this.privGrammerBuilder.addPhrase(phrases);\n    }\n\n    /**\n     * Clears all phrases added to the current recognizer.\n     */\n    public clear(): void {\n        this.privGrammerBuilder.clearPhrases();\n    }\n}\n"]}