{"version":3,"sources":["src/sdk/SpeakerIdentificationModel.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,yCAAwC;AAExC,qCAGmB;AAEnB;;;;GAIG;AACH;IAII,oCAAoB,QAAwB;QAHpC,sBAAiB,GAAmB,EAAE,CAAC;QACvC,mBAAc,GAAa,EAAE,CAAC;QAGlC,qBAAS,CAAC,sBAAsB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAC5D,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SACjD;QACD,KAAsB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAE;YAA3B,IAAM,OAAO,iBAAA;YACd,IAAI,OAAO,CAAC,WAAW,KAAK,0BAAgB,CAAC,6BAA6B,EAAE;gBACxE,MAAM,IAAI,KAAK,CAAC,wEAAwE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;aACjH;YACD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACrC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAC/C;IACL,CAAC;IACa,uCAAY,GAA1B,UAA2B,QAAwB;QAC/C,OAAO,IAAI,0BAA0B,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED,sBAAW,uDAAe;aAA1B;YACI,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAED,sBAAW,kDAAU;aAArB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;;;OAAA;IAED,sBAAW,gDAAQ;aAAnB;YACI,OAAO,+BAA+B,CAAC;QAC3C,CAAC;;;OAAA;IACL,iCAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,gEAA0B","file":"SpeakerIdentificationModel.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\nimport {\n    VoiceProfile,\n    VoiceProfileType,\n} from \"./Exports\";\n\n/**\n * Defines SpeakerIdentificationModel class for Speaker Recognition\n * Model contains a set of profiles against which to identify speaker(s)\n * @class SpeakerIdentificationModel\n */\nexport class SpeakerIdentificationModel implements SpeakerRecognitionModel {\n    private privVoiceProfiles: VoiceProfile[] = [];\n    private privProfileIds: string[] = [];\n\n    private constructor(profiles: VoiceProfile[]) {\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\n        if (profiles.length === 0) {\n            throw new Error(\"Empty Voice Profiles array\");\n        }\n        for (const profile of profiles) {\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\n            }\n            this.privVoiceProfiles.push(profile);\n            this.privProfileIds.push(profile.profileId);\n        }\n    }\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\n        return new SpeakerIdentificationModel(profiles);\n    }\n\n    public get voiceProfileIds(): string {\n        return this.privProfileIds.join(\",\");\n    }\n\n    public get profileIds(): string[] {\n        return this.privProfileIds;\n    }\n\n    public get scenario(): string {\n        return \"TextIndependentIdentification\";\n    }\n}\n"]}