{"version":3,"sources":["src/sdk/DialogServiceConfig.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,yCAAyC;AACzC,yCAAwC;AACxC,qCAAqG;AAGrG;;;GAGG;AACH;IAEI;;;OAGG;IACH;QACI,OAAO;IACX,CAAC;IA+ED,sBAAW,8CAAa;QARxB;;;;;;WAMG;QACH,gEAAgE;aAChE,UAAyB,KAAa,IAAI,CAAC;;;OAAA;IAE3C,sBAAkB,kCAAW;aAA7B;YACI,OAAO;gBACH,YAAY,EAAE,eAAe;gBAC7B,cAAc,EAAE,iBAAiB;aACpC,CAAC;QACN,CAAC;;;OAAA;IACL,0BAAC;AAAD,CA/FA,AA+FC,IAAA;AA/FqB,kDAAmB;AAiGzC;;;GAGG;AACH;IAA6C,2CAAmB;IAI5D;;OAEG;IACH;QAAA,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,gBAAgB,GAAG,IAAI,0BAAgB,EAAE,CAAC;;IACnD,CAAC;IASD,sBAAW,+CAAU;QAPrB;;;;;;WAMG;aACH;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC;QAC5C,CAAC;;;OAAA;IAQD,sBAAW,8DAAyB;QANpC;;;;;WAKG;aACH;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;QAC3D,CAAC;QAED;;;;;;WAMG;aACH,UAAqC,KAAa;YAC9C,qBAAS,CAAC,uBAAuB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAClD,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,GAAG,KAAK,CAAC;QAC5D,CAAC;;;OAZA;IAcD,sBAAW,iDAAY;aAAvB;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;QAC9C,CAAC;aAED,UAAwB,KAAmB;YACvC,IAAI,CAAC,gBAAgB,CAAC,YAAY,GAAG,KAAK,CAAC;QAC/C,CAAC;;;OAJA;IAMD;;;;;;;OAOG;IACI,6CAAW,GAAlB,UAAmB,IAAyB,EAAE,KAAa;QACvD,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;;OAQG;IACI,6CAAW,GAAlB,UAAmB,IAAyB,EAAE,GAAY;QACtD,KAAK,GAAG,CAAC;QACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;;OAQG;IACI,0CAAQ,GAAf,UAAgB,aAAqB,EAAE,SAAiB,EAAE,aAAsB,EAAE,aAAsB;QACpG,IAAI,CAAC,WAAW,CAAC,oBAAU,CAAC,qCAAqC,EAAE,aAAa,CAAC,CAAC;QAClF,IAAI,CAAC,WAAW,CAAC,oBAAU,CAAC,iCAAiC,EAAE,KAAG,SAAW,CAAC,CAAC;QAC/E,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,WAAW,CAAC,oBAAU,CAAC,qCAAqC,EAAE,aAAa,CAAC,CAAC;SACrF;QACD,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,WAAW,CAAC,oBAAU,CAAC,qCAAqC,EAAE,aAAa,CAAC,CAAC;SACrF;IACL,CAAC;IAEM,oDAAkB,GAAzB,UAA0B,IAAY,EAAE,KAAa,EAAE,OAA+B;QAClF,KAAK,OAAO,CAAC;QACb,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACI,uCAAK,GAAZ;QACI,OAAO;IACX,CAAC;IACL,8BAAC;AAAD,CAjHA,AAiHC,CAjH4C,mBAAmB,GAiH/D;AAjHY,0DAAuB","file":"DialogServiceConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\nimport { Contracts } from \"./Contracts\";\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\nimport { OutputFormat } from \"./OutputFormat\";\n\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\nexport abstract class DialogServiceConfig {\n\n    /**\n     * Creates an instance of DialogService config.\n     * @constructor\n     */\n    protected constructor() {\n        return;\n    }\n\n    /**\n     * Sets an arbitrary property.\n     * @member DialogServiceConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to set.\n     * @param {string} value - The new value of the property.\n     */\n    public abstract setProperty(name: string | PropertyId, value: string): void;\n\n    /**\n     * Returns the current value of an arbitrary property.\n     * @member DialogServiceConfig.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to query.\n     * @param {string} def - The value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\n\n    /**\n     * @member DialogServiceConfig.prototype.setServiceProperty\n     * @function\n     * @public\n     * @param {name} The name of the property.\n     * @param {value} Value to set.\n     * @param {channel} The channel used to pass the specified property to service.\n     * @summary Sets a property value that will be passed to service using the specified channel.\n     */\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server.\n     * @param proxyPort The port number of the proxy server.\n     */\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n     * @param porxyPort The port number of the proxy server.\n     * @param proxyUserName The user name of the proxy server.\n     * @param proxyPassword The password of the proxy server.\n     */\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\n\n    /**\n     * Returns the configured language.\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    public abstract get speechRecognitionLanguage(): string;\n\n    /**\n     * Gets/Sets the input language.\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The language to use for recognition.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    public set applicationId(value: string) { }\n\n    public static get DialogTypes(): { BotFramework: string; CustomCommands: string } {\n        return {\n            BotFramework: \"bot_framework\",\n            CustomCommands: \"custom_commands\"\n        };\n    }\n}\n\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\n\n    private privSpeechConfig: SpeechConfigImpl;\n\n    /**\n     * Creates an instance of dialogService config.\n     */\n    public constructor() {\n        super();\n        this.privSpeechConfig = new SpeechConfigImpl();\n    }\n\n    /**\n     * Provides access to custom properties.\n     * @member DialogServiceConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    public get properties(): PropertyCollection {\n        return this.privSpeechConfig.properties;\n    }\n\n    /**\n     * Gets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    public get speechRecognitionLanguage(): string {\n        return this.privSpeechConfig.speechRecognitionLanguage;\n    }\n\n    /**\n     * Sets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The language to set.\n     */\n    public set speechRecognitionLanguage(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.privSpeechConfig.speechRecognitionLanguage = value;\n    }\n\n    public get outputFormat(): OutputFormat {\n        return this.privSpeechConfig.outputFormat;\n    }\n\n    public set outputFormat(value: OutputFormat) {\n        this.privSpeechConfig.outputFormat = value;\n    }\n\n    /**\n     * Sets a named property as value\n     * @member DialogServiceConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {PropertyId | string} name - The property to set.\n     * @param {string} value - The value.\n     */\n    public setProperty(name: string | PropertyId, value: string): void {\n        this.privSpeechConfig.setProperty(name, value);\n    }\n\n    /**\n     * Sets a named property as value\n     * @member DialogServiceConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {PropertyId | string} name - The property to get.\n     * @param {string} def - The default value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public getProperty(name: string | PropertyId, def?: string): string {\n        void def;\n        return this.privSpeechConfig.getProperty(name);\n    }\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n     * @param proxyPort The port number of the proxy server.\n     * @param proxyUserName The user name of the proxy server.\n     * @param proxyPassword The password of the proxy server.\n     */\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\n        if (proxyUserName) {\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n        }\n        if (proxyPassword) {\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n        }\n    }\n\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\n        void channel;\n        this.privSpeechConfig.setServiceProperty(name, value);\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member DialogServiceConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n}\n"]}