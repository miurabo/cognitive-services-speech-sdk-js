{"version":3,"sources":["src/sdk/CustomCommandsConfig.ts"],"names":[],"mappings":"AAIA,OAAO,EAAuB,uBAAuB,EAAE,MAAM,uBAAuB,CAAC;AAGrF;;;GAGG;AACH,qBAAa,oBAAqB,SAAQ,uBAAuB;IAE7D;;OAEG;;IAKH;;;;;;;;;OASG;WACW,gBAAgB,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,oBAAoB;IAajH;;;;;;;;;;;;;;OAcG;WACW,sBAAsB,CAAC,aAAa,EAAE,MAAM,EAAE,kBAAkB,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,oBAAoB;IAa7H;;;;;;OAMG;IACH,IAAW,aAAa,CAAC,KAAK,EAAE,MAAM,EAGrC;IAED;;;;;;OAMG;IACH,IAAW,aAAa,IAAI,MAAM,CAEjC;CACJ","file":"CustomCommandsConfig.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\n\n    /**\n     * Creates an instance of CustomCommandsConfig.\n     */\n    public constructor() {\n        super();\n    }\n\n    /**\n     * Creates an instance of the bot framework config with the specified subscription and region.\n     * @member CustomCommandsConfig.fromSubscription\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param subscription Subscription key associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new bot framework config.\n     */\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return customCommandsConfig;\n    }\n\n    /**\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member CustomCommandsConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param authorizationToken The authorization token associated with the application.\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new speech commands config.\n     */\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return customCommandsConfig;\n    }\n\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    public set applicationId(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\n    }\n\n    /**\n     * Gets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to get.\n     */\n    public get applicationId(): string {\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\n    }\n}\n"]}