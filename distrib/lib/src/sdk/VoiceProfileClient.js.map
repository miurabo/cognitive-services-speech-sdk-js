{"version":3,"sources":["src/sdk/VoiceProfileClient.ts"],"names":[],"mappings":"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","file":"VoiceProfileClient.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IRestResponse\n} from \"../common.browser/Exports\";\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n    VoiceProfileConnectionFactory,\n    VoiceServiceRecognizer\n} from \"../common.speech/Exports\";\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioInputStream,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    ResultReason,\n    VoiceProfile,\n    VoiceProfileEnrollmentResult,\n    VoiceProfilePhraseResult,\n    VoiceProfileResult,\n    VoiceProfileType\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\nexport class VoiceProfileClient extends Recognizer {\n    protected privProperties: PropertyCollection;\n    private privVoiceAdapter: VoiceServiceRecognizer;\n    private privDisposedVoiceAdapter: boolean;\n\n    /**\n     * VoiceProfileClient constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n     */\n    public constructor(speechConfig: SpeechConfig) {\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n        super(AudioConfig.fromStreamInput(AudioInputStream.createPushStream()), speechConfigImpl.properties, new VoiceProfileConnectionFactory());\n\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.privVoiceAdapter = this.privReco as VoiceServiceRecognizer;\n        this.privDisposedVoiceAdapter = false;\n    }\n\n    /**\n     * The collection of properties and their values defined for this VoiceProfileClient.\n     * @member VoiceProfileClient.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.createProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n     * @param {string} lang Language string (locale) for Voice Profile\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\n     */\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\n        const profileIds: string[] = await this.privVoiceAdapter.createProfile(profileType, lang);\n        return new VoiceProfile(profileIds[0], profileType);\n    }\n\n    /**\n     * Get current information of a voice profile\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n     */\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\n        return this.privVoiceAdapter.retrieveEnrollmentResult(profile);\n    }\n\n    /**\n     * Get all voice profiles on account with given voice profile type\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\n     */\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\n        return this.privVoiceAdapter.getAllProfiles(profileType);\n        /*\n        const result: { json: { value: EnrollmentResultJSON[] } } = await this.privAdapter.getProfiles(profileType);\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\n        }\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\n        */\n    }\n\n    /**\n     * Get valid authorization phrases for voice profile enrollment\n     * @member VoiceProfileClient.prototype.getActivationPhrasesAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\n     * @param {string} lang Language string (locale) for Voice Profile\n     */\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\n        return this.privVoiceAdapter.getActivationPhrases(profileType, lang);\n    }\n\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\n     */\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n        this.audioConfig = audioConfig;\n        this.privVoiceAdapter.SpeakerAudioSource = configImpl;\n\n        return this.privVoiceAdapter.enrollProfile(profile);\n    }\n\n    /**\n     * Delete a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to be deleted\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n     */\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\n        return this.privVoiceAdapter.deleteProfile(profile);\n    }\n\n    /**\n     * Remove all enrollments for a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.resetProfileAsync\n     * @function\n     * @public\n     * @async\n     * @param {VoiceProfile} profile Voice Profile to be reset\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\n     */\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\n        return this.privVoiceAdapter.resetProfile(profile);\n    }\n\n    /**\n     * Clean up object and close underlying connection\n     * @member VoiceProfileClient.prototype.close\n     * @function\n     * @async\n     * @public\n     */\n    public async close(): Promise<void> {\n        await this.dispose(true);\n    }\n\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new VoiceServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n    }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedVoiceAdapter) {\n            return;\n        }\n\n        this.privDisposedVoiceAdapter = true;\n\n        if (disposing) {\n            await super.dispose(disposing);\n        }\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.properties);\n    }\n\n    private getResult(result: IRestResponse, successReason: ResultReason): VoiceProfileResult {\n        const response: VoiceProfileResult =\n            new VoiceProfileResult(\n                result.ok ? successReason : ResultReason.Canceled,\n                result.statusText\n            );\n        return (response);\n    }\n}\n"]}