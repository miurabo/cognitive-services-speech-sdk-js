{"version":3,"sources":["src/sdk/Audio/AudioInputStream.ts"],"names":[],"mappings":"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","file":"AudioInputStream.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n    connectivity,\n    ISpeechConfigAudioDevice,\n    type,\n} from \"../../common.speech/Exports\";\nimport {\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    ChunkedArrayBufferStream,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStreamChunk,\n    Stream,\n} from \"../../common/Exports\";\nimport { createNoDashGuid } from \"../../common/Guid\";\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\nexport abstract class AudioInputStream {\n\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() {\n        return;\n    }\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member AudioInputStream.createPushStream\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     * written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The audio input stream being created.\n     */\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\n        return PushAudioInputStream.create(format);\n    }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n     * and close() methods.\n     * @member AudioInputStream.createPullStream\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n     * PullAudioInputStreamCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n     * the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The audio input stream being created.\n     */\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return PullAudioInputStream.create(callback, format);\n        // throw new Error(\"Oops\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\nexport abstract class PushAudioInputStream extends AudioInputStream {\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member PushAudioInputStream.create\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n     * push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The push audio input stream being created.\n     */\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\n        return new PushAudioInputStreamImpl(format);\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStream.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public abstract write(dataBuffer: ArrayBuffer): void;\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\n\n    private privFormat: AudioStreamFormatImpl;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privStream: Stream<ArrayBuffer>;\n\n    /**\n     * Creates and initalizes an instance with the given values.\n     * @constructor\n     * @param {AudioStreamFormat} format - The audio stream format.\n     */\n    public constructor(format?: AudioStreamFormat) {\n        super();\n        if (format === undefined) {\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n        } else {\n            this.privFormat = format as AudioStreamFormatImpl;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return Promise.resolve(this.privFormat);\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public write(dataBuffer: ArrayBuffer): void {\n        this.privStream.writeStreamChunk({\n            buffer: dataBuffer,\n            isEnd: false,\n            timeReceived: Date.now()\n        });\n    }\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privStream.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public turnOn(): Promise<void> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return;\n    }\n\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        await this.turnOn();\n        const stream = this.privStream;\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n        return {\n            detach: async (): Promise<void> => {\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                return this.turnOff();\n            },\n            id: (): string => audioNodeId,\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\n        };\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<void> {\n        return;\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return Promise.resolve({\n            bitspersample: this.privFormat.bitsPerSample,\n            channelcount: this.privFormat.channels,\n            connectivity: connectivity.Unknown,\n            manufacturer: \"Speech SDK\",\n            model: \"PushStream\",\n            samplerate: this.privFormat.samplesPerSec,\n            type: type.Stream,\n        });\n    }\n\n    private onEvent(event: AudioSourceEvent): void {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\n        for (let i = 0; i < buf.length; ++i) {\n            buf[i] = view[i];\n        }\n        return buf;\n    }\n}\n\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\nexport abstract class PullAudioInputStream extends AudioInputStream {\n    /**\n     * Creates and initializes and instance.\n     * @constructor\n     */\n    protected constructor() {\n super();\n}\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @member PullAudioInputStream.create\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     * derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The push audio input stream being created.\n     */\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member PullAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\n\n    private privCallback: PullAudioInputStreamCallback;\n    private privFormat: AudioStreamFormatImpl;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privIsClosed: boolean;\n    private privBufferSize: number;\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @constructor\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     * derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     * returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     */\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\n        super();\n        if (undefined === format) {\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\n        } else {\n            this.privFormat = format;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n        this.privCallback = callback;\n        this.privIsClosed = false;\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return Promise.resolve(this.privFormat);\n    }\n\n    /**\n     * Closes the stream.\n     * @member PullAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privIsClosed = true;\n        this.privCallback.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public turnOn(): Promise<void> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return;\n    }\n\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        await this.turnOn();\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n        return {\n            detach: (): Promise<void> => {\n                this.privCallback.close();\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                return this.turnOff();\n            },\n            id: (): string => audioNodeId,\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\n                let totalBytes: number = 0;\n                let transmitBuff: ArrayBuffer;\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n                while (totalBytes < this.privBufferSize) {\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n                    // data back.\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\n                    const pulledBytes: number = this.privCallback.read(readBuff);\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n                    // preferred size allocated.\n                    if (undefined === transmitBuff) {\n                        transmitBuff = readBuff;\n                    } else {\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\n                        const intView: Int8Array = new Int8Array(transmitBuff);\n                        intView.set(new Int8Array(readBuff), totalBytes);\n                    }\n                    // If there are no bytes to read, just break out and be done.\n                    if (0 === pulledBytes) {\n                        break;\n                    }\n                    totalBytes += pulledBytes;\n                }\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\n                    buffer: transmitBuff.slice(0, totalBytes),\n                    isEnd: this.privIsClosed || totalBytes === 0,\n                    timeReceived: Date.now(),\n                });\n            },\n        };\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<void> {\n        return;\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return Promise.resolve({\n            bitspersample: this.privFormat.bitsPerSample,\n            channelcount: this.privFormat.channels,\n            connectivity: connectivity.Unknown,\n            manufacturer: \"Speech SDK\",\n            model: \"PullStream\",\n            samplerate: this.privFormat.samplesPerSec,\n            type: type.Stream,\n        });\n    }\n\n    private onEvent(event: AudioSourceEvent): void {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n"]}