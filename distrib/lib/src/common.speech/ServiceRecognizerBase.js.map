{"version":3,"sources":["src/common.speech/ServiceRecognizerBase.ts"],"names":[],"mappings":"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","file":"ServiceRecognizerBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\nimport {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEvent,\n    ConnectionState,\n    createNoDashGuid,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    IDisposable,\n    IStreamChunk,\n    MessageType,\n    ServiceEvent,\n    Timeout\n} from \"../common/Exports\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyId,\n    RecognitionEventArgs,\n    Recognizer,\n    SessionEventArgs,\n    SpeakerRecognitionResult,\n    SpeechRecognitionResult,\n    OutputFormat\n} from \"../sdk/Exports\";\nimport { Callback } from \"../sdk/Transcription/IConversation\";\nimport {\n    AgentConfig,\n    DynamicGrammarBuilder,\n    ISpeechConfigAudioDevice,\n    RecognitionMode,\n    RequestSession,\n    SpeechContext,\n    SpeechDetected,\n    type,\n    OutputFormatPropertyName\n} from \"./Exports\";\nimport {\n    AuthInfo,\n    IAuthentication,\n} from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\ninterface CustomModel {\n    language: string;\n    endpoint: string;\n}\n\nexport interface PhraseDetection {\n    customModels?: CustomModel[];\n    onInterim?: { action: string };\n    onSuccess?: { action: string };\n    mode?: string;\n    INTERACTIVE?: Segmentation;\n    CONVERSATION?: Segmentation;\n    DICTATION?: Segmentation;\n    speakerDiarization?: SpeakerDiarization;\n}\n\nexport interface SpeakerDiarization {\n    mode?: string;\n    audioSessionId?: string;\n    audioOffsetMs?: number;\n    identityProvider?: string;\n}\n\nexport interface Segmentation {\n    segmentation: {\n        mode: \"Custom\";\n        segmentationSilenceTimeoutMs: number;\n    };\n}\n\nexport abstract class ServiceRecognizerBase implements IDisposable {\n    private privAuthentication: IAuthentication;\n    private privConnectionFactory: IConnectionFactory;\n\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    private privConnectionConfigurationPromise: Promise<IConnection> = undefined;\n\n    // A promise for a connection, but one that has not had the speech context sent yet.\n    // Do not consume directly, call fetchConnection instead.\n    private privConnectionPromise: Promise<IConnection> = undefined;\n    private privAuthFetchEventId: string;\n    private privIsDisposed: boolean;\n    private privMustReportEndOfStream: boolean;\n    private privConnectionEvents: EventSource<ConnectionEvent>;\n    private privServiceEvents: EventSource<ServiceEvent>;\n    private privDynamicGrammar: DynamicGrammarBuilder;\n    private privAgentConfig: AgentConfig;\n    private privServiceHasSentMessage: boolean;\n    private privActivityTemplate: string;\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\n    private privAudioSource: IAudioSource;\n    private privIsLiveAudio: boolean = false;\n    private privAverageBytesPerMs: number = 0;\n    protected privSpeechContext: SpeechContext;\n    protected privRequestSession: RequestSession;\n    protected privConnectionId: string;\n    protected privDiarizationSessionId: string;\n    protected privRecognizerConfig: RecognizerConfig;\n    protected privRecognizer: Recognizer;\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\n    protected privErrorCallback: (e: string) => void;\n    protected privEnableSpeakerId: boolean = false;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: Recognizer) {\n\n        if (!authentication) {\n            throw new ArgumentNullError(\"authentication\");\n        }\n\n        if (!connectionFactory) {\n            throw new ArgumentNullError(\"connectionFactory\");\n        }\n\n        if (!audioSource) {\n            throw new ArgumentNullError(\"audioSource\");\n        }\n\n        if (!recognizerConfig) {\n            throw new ArgumentNullError(\"recognizerConfig\");\n        }\n\n        this.privEnableSpeakerId = recognizerConfig.isSpeakerDiarizationEnabled;\n        this.privMustReportEndOfStream = false;\n        this.privAuthentication = authentication;\n        this.privConnectionFactory = connectionFactory;\n        this.privAudioSource = audioSource;\n        this.privRecognizerConfig = recognizerConfig;\n        this.privIsDisposed = false;\n        this.privRecognizer = recognizer;\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\n        this.privServiceEvents = new EventSource<ServiceEvent>();\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n        this.privAgentConfig = new AgentConfig();\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\n            this.privSetTimeout = Timeout.setTimeout;\n        }\n\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\n                if (connectionClosedEvent.statusCode === 1003 ||\n                    connectionClosedEvent.statusCode === 1007 ||\n                    connectionClosedEvent.statusCode === 1002 ||\n                    connectionClosedEvent.statusCode === 4000 ||\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\n                ) {\n                    void this.cancelRecognitionLocal(CancellationReason.Error,\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\n                        `${connectionClosedEvent.reason} websocket error code: ${connectionClosedEvent.statusCode}`);\n                }\n            }\n        });\n\n        if (this.privEnableSpeakerId) {\n            this.privDiarizationSessionId = createNoDashGuid();\n        }\n\n        this.setLanguageIdJson();\n        this.setOutputDetailLevelJson();\n    }\n\n    protected setSpeechSegmentationTimeoutJson(): void{\n        const speechSegmentationTimeout: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.Speech_SegmentationSilenceTimeoutMs, undefined);\n        if (speechSegmentationTimeout !== undefined) {\n            const mode = this.recognitionMode === RecognitionMode.Conversation ? \"CONVERSATION\" :\n                this.recognitionMode === RecognitionMode.Dictation ? \"DICTATION\" : \"INTERACTIVE\";\n            const segmentationSilenceTimeoutMs: number = parseInt(speechSegmentationTimeout, 10);\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\n            phraseDetection.mode = mode;\n            phraseDetection[mode] = {\n                segmentation: {\n                    mode: \"Custom\",\n                    segmentationSilenceTimeoutMs\n                }\n            };\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\n        }\n    }\n\n    protected setLanguageIdJson(): void {\n        if (this.privRecognizerConfig.autoDetectSourceLanguages !== undefined) {\n            const phraseDetection = this.privSpeechContext.getSection(\"phraseDetection\") as PhraseDetection;\n            const sourceLanguages: string[] = this.privRecognizerConfig.autoDetectSourceLanguages.split(\",\");\n\n            let speechContextLidMode;\n            if (this.privRecognizerConfig.languageIdMode === \"Continuous\") {\n                speechContextLidMode = \"DetectContinuous\";\n            } else {// recognizerConfig.languageIdMode === \"AtStart\"\n                speechContextLidMode = \"DetectAtAudioStart\";\n            }\n\n            this.privSpeechContext.setSection(\"languageId\", {\n                Priority: \"PrioritizeLatency\",\n                languages: sourceLanguages,\n                mode: speechContextLidMode,\n                onSuccess: { action: \"Recognize\" },\n                onUnknown: { action: \"None\" }\n            });\n            this.privSpeechContext.setSection(\"phraseOutput\", {\n                interimResults: {\n                    resultType: \"Auto\"\n                },\n                phraseResults: {\n                    resultType: \"Always\"\n                }\n            });\n            const customModels: CustomModel[] = this.privRecognizerConfig.sourceLanguageModels;\n            if (customModels !== undefined) {\n                phraseDetection.customModels = customModels;\n                phraseDetection.onInterim = { action: \"None\" };\n                phraseDetection.onSuccess = { action: \"None\" };\n            }\n            this.privSpeechContext.setSection(\"phraseDetection\", phraseDetection);\n        }\n    }\n\n    protected setOutputDetailLevelJson(): void {\n        if (this.privEnableSpeakerId) {\n            const requestWordLevelTimestamps: string = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase();\n            if (requestWordLevelTimestamps === \"true\") {\n                this.privSpeechContext.setWordLevelTimings();\n            } else {\n                const outputFormat: string = this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n                if (outputFormat === OutputFormat[OutputFormat.Detailed].toLocaleLowerCase()) {\n                    this.privSpeechContext.setDetailedOutputFormat();\n                }\n            }\n        }\n    }\n\n    public get isSpeakerDiarizationEnabled(): boolean {\n        return this.privEnableSpeakerId;\n    }\n\n    public get audioSource(): IAudioSource {\n        return this.privAudioSource;\n    }\n\n    public get speechContext(): SpeechContext {\n        return this.privSpeechContext;\n    }\n\n    public get dynamicGrammar(): DynamicGrammarBuilder {\n        return this.privDynamicGrammar;\n    }\n\n    public get agentConfig(): AgentConfig {\n        return this.privAgentConfig;\n    }\n\n    public set conversationTranslatorToken(token: string) {\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\n    }\n\n    public set voiceProfileType(type: string) {\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, type);\n    }\n\n    public set authentication(auth: IAuthentication) {\n        this.privAuthentication = this.authentication;\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        this.privIsDisposed = true;\n        if (this.privConnectionConfigurationPromise !== undefined) {\n            try {\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\n                await connection.dispose(reason);\n            } catch (error) {\n                // The connection is in a bad state. But we're trying to kill it, so...\n                return;\n            }\n        }\n    }\n\n    public get connectionEvents(): EventSource<ConnectionEvent> {\n        return this.privConnectionEvents;\n    }\n\n    public get serviceEvents(): EventSource<ServiceEvent> {\n        return this.privServiceEvents;\n    }\n\n    public get recognitionMode(): RecognitionMode {\n        return this.privRecognizerConfig.recognitionMode;\n    }\n\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => Promise<void> = undefined;\n\n    public recognizeSpeaker: (model: SpeakerRecognitionModel) => Promise<SpeakerRecognitionResult> = undefined;\n\n    public async recognize(\n        recoMode: RecognitionMode,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallBack: (e: string) => void,\n    ): Promise<void> {\n\n        if (this.recognizeOverride !== undefined) {\n            await this.recognizeOverride(recoMode, successCallback, errorCallBack);\n            return;\n        }\n        // Clear the existing configuration promise to force a re-transmission of config and context.\n        this.privConnectionConfigurationPromise = undefined;\n        this.privRecognizerConfig.recognitionMode = recoMode;\n        this.setSpeechSegmentationTimeoutJson();\n\n        this.privSuccessCallback = successCallback;\n        this.privErrorCallback = errorCallBack;\n\n        this.privRequestSession.startNewRecognition();\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\n\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n        const conPromise: Promise<IConnection> = this.connectImpl();\n        let audioNode: ReplayableAudioNode;\n\n        try {\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\n\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\n\n        } catch (error) {\n            await this.privRequestSession.onStopRecognizing();\n            throw error;\n        }\n\n        try {\n            await conPromise;\n        } catch (error) {\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\n            return;\n        }\n\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n        if (!!this.privRecognizer.sessionStarted) {\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n        }\n\n        void this.receiveMessage();\n        const audioSendPromise = this.sendAudio(audioNode);\n\n        audioSendPromise.catch(async (error: string): Promise<void> => {\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n        });\n\n        return;\n    }\n\n    public async stopRecognizing(): Promise<void> {\n        if (this.privRequestSession.isRecognizing) {\n            try {\n                await this.audioSource.turnOff();\n                await this.sendFinalAudio();\n                await this.privRequestSession.onStopRecognizing();\n                await this.privRequestSession.turnCompletionPromise;\n            } finally {\n                await this.privRequestSession.dispose();\n            }\n        }\n        return;\n    }\n\n    public async connect(): Promise<void> {\n        await this.connectImpl();\n        return Promise.resolve();\n    }\n\n    public connectAsync(cb?: Callback, err?: Callback): void {\n        this.connectImpl().then((): void => {\n            try {\n                if (!!cb) {\n                    cb();\n                }\n            } catch (e) {\n                if (!!err) {\n                    err(e);\n                }\n            }\n        }, (reason: any): void => {\n            try {\n                if (!!err) {\n                    err(reason);\n                }\n                /* eslint-disable no-empty */\n            } catch (error) {\n            }\n        });\n    }\n\n    protected disconnectOverride: () => Promise<void> = undefined;\n\n    public async disconnect(): Promise<void> {\n        await this.cancelRecognitionLocal(CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        if (this.disconnectOverride !== undefined) {\n            await this.disconnectOverride();\n        }\n\n        if (this.privConnectionPromise !== undefined) {\n            try {\n                await (await this.privConnectionPromise).dispose();\n            } catch (error) {\n\n            }\n        }\n        this.privConnectionPromise = undefined;\n    }\n\n    // Called when telemetry data is sent to the service.\n    // Used for testing Telemetry capture.\n    public static telemetryData: (json: string) => void;\n    public static telemetryDataEnabled: boolean = true;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public sendMessage(message: string): Promise<void> {\n        return;\n    }\n\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\n\n        const connection: IConnection = await this.fetchConnection();\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\n    }\n\n    public set activityTemplate(messagePayload: string) {\n        this.privActivityTemplate = messagePayload;\n    }\n\n    public get activityTemplate(): string {\n        return this.privActivityTemplate;\n    }\n\n    protected abstract processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        successCallback?: (e: SpeechRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): Promise<boolean>;\n\n    protected async sendTelemetryData(): Promise<void> {\n        const telemetryData = this.privRequestSession.getTelemetry();\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\n            this.privIsDisposed ||\n            null === telemetryData) {\n            return;\n        }\n\n        if (!!ServiceRecognizerBase.telemetryData) {\n            try {\n                ServiceRecognizerBase.telemetryData(telemetryData);\n                /* eslint-disable no-empty */\n            } catch { }\n        }\n\n        const connection: IConnection = await this.fetchConnection();\n        await connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"telemetry\",\n            this.privRequestSession.requestId,\n            \"application/json\",\n            telemetryData));\n    }\n\n    // Cancels recognition.\n    protected abstract cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void;\n\n    // Cancels recognition.\n    protected async cancelRecognitionLocal(\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): Promise<void> {\n\n        if (!!this.privRequestSession.isRecognizing) {\n            await this.privRequestSession.onStopRecognizing();\n\n            this.cancelRecognition(\n                this.privRequestSession.sessionId,\n                this.privRequestSession.requestId,\n                cancellationReason,\n                errorCode,\n                error);\n        }\n    }\n\n    protected receiveMessageOverride: () => Promise<void> = undefined;\n\n    protected async receiveMessage(): Promise<void> {\n        try {\n            if (this.privIsDisposed) {\n                // We're done.\n                return;\n            }\n\n            let connection = await this.fetchConnection();\n            const message = await connection.read();\n\n            if (this.receiveMessageOverride !== undefined) {\n                return this.receiveMessageOverride();\n            }\n\n            // indicates we are draining the queue and it came with no message;\n            if (!message) {\n                if (!this.privRequestSession.isRecognizing) {\n                    return;\n                } else {\n                    return this.receiveMessage();\n                }\n            }\n\n            this.privServiceHasSentMessage = true;\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\n                switch (connectionMessage.path.toLowerCase()) {\n                    case \"turn.start\":\n                        this.privMustReportEndOfStream = true;\n                        this.privRequestSession.onServiceTurnStartResponse();\n                        break;\n\n                    case \"speech.startdetected\":\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.speechStartDetected) {\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n                        }\n                        break;\n\n                    case \"speech.enddetected\":\n                        let json: string;\n                        if (connectionMessage.textBody.length > 0) {\n                            json = connectionMessage.textBody;\n                        } else {\n                            // If the request was empty, the JSON returned is empty.\n                            json = \"{ Offset: 0 }\";\n                        }\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.speechEndDetected) {\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n                        }\n                        break;\n\n                    case \"turn.end\":\n                        await this.sendTelemetryData();\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\n                            this.privMustReportEndOfStream = false;\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\n                        }\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                            if (!!this.privRecognizer.sessionStopped) {\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                            }\n                            return;\n                        } else {\n                            connection = await this.fetchConnection();\n                            await this.sendPrePayloadJSON(connection);\n                        }\n                        break;\n\n                    default:\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\n                            if (!!this.privServiceEvents) {\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                            }\n                        }\n                }\n            }\n            return this.receiveMessage();\n        } catch (error) {\n            return null;\n        }\n    }\n\n    private updateSpeakerDiarizationAudioOffset(): void {\n        const bytesSent: number = this.privRequestSession.recognitionBytesSent;\n        const audioOffsetMs: number = bytesSent / this.privAverageBytesPerMs;\n        this.privSpeechContext.setSpeakerDiarizationAudioOffsetMs(audioOffsetMs);\n    }\n\n    protected sendSpeechContext(connection: IConnection, generateNewRequestId: boolean): Promise<void> {\n        if (this.privEnableSpeakerId) {\n            this.updateSpeakerDiarizationAudioOffset();\n        }\n        const speechContextJson = this.speechContext.toJSON();\n        if (generateNewRequestId) {\n            this.privRequestSession.onSpeechContext();\n        }\n\n        if (speechContextJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.context\",\n                this.privRequestSession.requestId,\n                \"application/json\",\n                speechContextJson));\n        }\n        return;\n    }\n\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\n\n    protected noOp(): Promise<void> {\n        // operation not supported\n        return;\n    }\n\n    // Encapsulated for derived service recognizers that need to send additional JSON\n    protected async sendPrePayloadJSON(connection: IConnection, generateNewRequestId: boolean = true): Promise<void> {\n        if (this.sendPrePayloadJSONOverride !== undefined) {\n            return this.sendPrePayloadJSONOverride(connection);\n        }\n\n        await this.sendSpeechContext(connection, generateNewRequestId);\n        await this.sendWaveHeader(connection);\n        return;\n    }\n\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\n        // this.writeBufferToConsole(format.header);\n        return connection.send(new SpeechConnectionMessage(\n            MessageType.Binary,\n            \"audio\",\n            this.privRequestSession.requestId,\n            \"audio/x-wav\",\n            format.header\n        ));\n    }\n\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\n\n    // Establishes a websocket connection to the end point.\n    protected connectImpl(): Promise<IConnection> {\n        if (this.privConnectionPromise !== undefined) {\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionPromise = undefined;\n                    this.privServiceHasSentMessage = false;\n                    return this.connectImpl();\n                }\n                return this.privConnectionPromise;\n            }, (): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionPromise = undefined;\n                this.privServiceHasSentMessage = false;\n                return this.connectImpl();\n            });\n        }\n\n        this.privConnectionPromise = this.retryableConnect();\n\n        // Attach an empty handler to allow the promise to run in the background while\n        // other startup events happen. It'll eventually be awaited on.\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.privConnectionPromise.catch((): void => { });\n\n        if (this.postConnectImplOverride !== undefined) {\n            return this.postConnectImplOverride(this.privConnectionPromise);\n        }\n\n        return this.privConnectionPromise;\n    }\n\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\n    protected handleSpeechPhraseMessage: (textBody: string) => Promise<void> = undefined;\n    protected handleSpeechHypothesisMessage: (textBody: string) => void = undefined;\n\n    protected sendSpeechServiceConfig(connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> {\n        requestSession.onSpeechContext();\n        // filter out anything that is not required for the service to work.\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n            const withTelemetry: { context: { system: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { system: string } };\n\n            const replacement: any = {\n                context: {\n                    system: withTelemetry.context.system,\n                },\n            };\n\n            SpeechServiceConfigJson = JSON.stringify(replacement);\n        }\n\n        if (this.privRecognizerConfig.parameters.getProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"false\").toLowerCase() === \"true\") {\n            const json: { context: { DisableReferenceChannel: string; MicSpec: string } } = JSON.parse(SpeechServiceConfigJson) as { context: { DisableReferenceChannel: string; MicSpec: string } };\n            json.context.DisableReferenceChannel = \"True\";\n            json.context.MicSpec = \"1_0_0\";\n            SpeechServiceConfigJson = JSON.stringify(json);\n        }\n\n        if (SpeechServiceConfigJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.config\",\n                requestSession.requestId,\n                \"application/json\",\n                SpeechServiceConfigJson));\n        }\n\n        return;\n    }\n\n    protected async fetchConnection(): Promise<IConnection> {\n        if (this.privConnectionConfigurationPromise !== undefined) {\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionConfigurationPromise = undefined;\n                    this.privServiceHasSentMessage = false;\n                    return this.fetchConnection();\n                }\n                return this.privConnectionConfigurationPromise;\n            }, (): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionConfigurationPromise = undefined;\n                this.privServiceHasSentMessage = false;\n                return this.fetchConnection();\n            });\n        }\n\n        this.privConnectionConfigurationPromise = this.configureConnection();\n        return await this.privConnectionConfigurationPromise;\n    }\n\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\n        this.privAverageBytesPerMs = audioFormat.avgBytesPerSec / 1000;\n        // The time we last sent data to the service.\n        let nextSendTime: number = Date.now();\n\n        // Max amount to send before we start to throttle\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\n\n        const readAndUploadCycle = async (): Promise<void> => {\n            // If speech is done, stop sending audio.\n            if (!this.privIsDisposed &&\n                !this.privRequestSession.isSpeechEnded &&\n                this.privRequestSession.isRecognizing &&\n                this.privRequestSession.recogNumber === startRecogNumber) {\n\n                const connection: IConnection = await this.fetchConnection();\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\n                // we have a new audio chunk to upload.\n                if (this.privRequestSession.isSpeechEnded) {\n                    // If service already recognized audio end then don't send any more audio\n                    return;\n                }\n\n                let payload: ArrayBuffer;\n                let sendDelay: number;\n\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                    payload = null;\n                    sendDelay = 0;\n                } else {\n                    payload = audioStreamChunk.buffer;\n\n                    this.privRequestSession.onAudioSent(payload.byteLength);\n\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n                        sendDelay = 0;\n                    } else {\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\n                    }\n                }\n\n                if (0 !== sendDelay) {\n                    await this.delay(sendDelay);\n                }\n\n                if (payload !== null) {\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\n                }\n\n                // Are we still alive?\n                if (!this.privIsDisposed &&\n                    !this.privRequestSession.isSpeechEnded &&\n                    this.privRequestSession.isRecognizing &&\n                    this.privRequestSession.recogNumber === startRecogNumber) {\n                    connection.send(\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\n                    ).catch((): void => {\n                        // eslint-disable-next-line @typescript-eslint/no-empty-function\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((): void => { });\n                    });\n\n                    if (!audioStreamChunk?.isEnd) {\n                        // this.writeBufferToConsole(payload);\n                        // Regardless of success or failure, schedule the next upload.\n                        // If the underlying connection was broken, the next cycle will\n                        // get a new connection and re-transmit missing audio automatically.\n                        return readAndUploadCycle();\n                    } else {\n                        // the audio stream has been closed, no need to schedule next\n                        // read-upload cycle.\n                        if (!this.privIsLiveAudio) {\n                            this.privRequestSession.onSpeechEnded();\n                        }\n                    }\n                }\n            }\n        };\n\n        return readAndUploadCycle();\n    }\n\n    private async retryableConnect(): Promise<IConnection> {\n        let isUnAuthorized: boolean = false;\n\n        this.privAuthFetchEventId = createNoDashGuid();\n        const sessionId: string = this.privRequestSession.sessionId;\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\n\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n        let lastStatusCode: number = 0;\n        let lastReason: string = \"\";\n\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\n\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\n            // facing event when a connection fails to let them try and provide new auth information.\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n            const auth: AuthInfo = await authPromise;\n\n            await this.privRequestSession.onAuthCompleted(false);\n\n            // Create the connection\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\n            // Attach the telemetry handlers.\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\n\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n            // it'll stop sending events.\n            connection.events.attach((event: ConnectionEvent): void => {\n                this.connectionEvents.onEvent(event);\n            });\n\n            const response: ConnectionOpenResponse = await connection.open();\n            // 200 == everything is fine.\n            if (response.statusCode === 200) {\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\n                return Promise.resolve(connection);\n            } else if (response.statusCode === 1006) {\n                isUnAuthorized = true;\n            }\n\n            lastStatusCode = response.statusCode;\n            lastReason = response.reason;\n\n            this.privRequestSession.onRetryConnection();\n        }\n\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\n    }\n\n    private delay(delayMs: number): Promise<void> {\n        return new Promise((resolve: () => void): number => this.privSetTimeout(resolve, delayMs));\n    }\n\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\n        let out: string = \"Buffer Size: \";\n        if (null === buffer) {\n            out += \"null\";\n        } else {\n            const readView: Uint8Array = new Uint8Array(buffer);\n            out += `${buffer.byteLength}\\r\\n`;\n            for (let i: number = 0; i < buffer.byteLength; i++) {\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n                if (((i + 1) % 16) === 0) {\n                    // eslint-disable-next-line no-console\n                    console.info(out);\n                    out = \"\";\n                }\n            }\n        }\n        // eslint-disable-next-line no-console\n        console.info(out);\n    }\n\n    private async sendFinalAudio(): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\n        return;\n    }\n\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\n    private async configureConnection(): Promise<IConnection> {\n        const connection: IConnection = await this.connectImpl();\n        if (this.configConnectionOverride !== undefined) {\n            return this.configConnectionOverride(connection);\n        }\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n        await this.sendPrePayloadJSON(connection, false);\n        return connection;\n    }\n}\n"]}