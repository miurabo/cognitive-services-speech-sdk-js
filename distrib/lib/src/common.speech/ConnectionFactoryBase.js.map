{"version":3,"sources":["src/common.speech/ConnectionFactoryBase.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,oDAEkC;AAElC,0CAA4C;AAE5C,6DAA4D;AAE5D;IAAA;IA+DA,CAAC;IA7DiB,mCAAa,GAA3B,UAA4B,MAAc;QACtC,IAAI,CAAC,CAAC,MAAM,EAAE;YACV,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBAC1C,OAAO,WAAW,CAAC;aACtB;YACD,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;gBAC1C,OAAO,WAAW,CAAC;aACtB;SACJ;QACD,OAAO,gBAAgB,CAAC;IAC5B,CAAC;IAOS,kDAAkB,GAA5B,UACI,MAAwB,EACxB,WAAsC,EACtC,QAAgB;QAHpB,iBA0BC;QArBG,IAAM,wBAAwB,GAAwB,IAAI,GAAG,CAAC;YAC1D,CAAC,oBAAU,CAAC,mCAAmC,EAAE,yCAAmB,CAAC,4BAA4B,CAAC;YAClG,CAAC,oBAAU,CAAC,0CAA0C,EAAE,yCAAmB,CAAC,kBAAkB,CAAC;YAC/F,CAAC,oBAAU,CAAC,2CAA2C,EAAE,yCAAmB,CAAC,mBAAmB,CAAC;YACjG,CAAC,oBAAU,CAAC,+CAA+C,EAAE,yCAAmB,CAAC,uBAAuB,CAAC;YACzG,CAAC,oBAAU,CAAC,0CAA0C,EAAE,yCAAmB,CAAC,cAAc,CAAC;YAC3F,CAAC,oBAAU,CAAC,qCAAqC,EAAE,yCAAmB,CAAC,SAAS,CAAC;YACjF,CAAC,oBAAU,CAAC,gDAAgD,EAAE,yCAAmB,CAAC,yBAAyB,CAAC;YAC5G,CAAC,oBAAU,CAAC,kDAAkD,EAAE,yCAAmB,CAAC,2BAA2B,CAAC;SACnH,CAAC,CAAC;QAEH,wBAAwB,CAAC,OAAO,CAAC,UAAC,aAAqB,EAAE,UAAsB;YAC3E,KAAI,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAGH,IAAM,iBAAiB,GAA8B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,uCAA6B,EAAE,IAAI,CAAC,CAA8B,CAAC;QAEjK,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAC,KAAa;YACjD,WAAW,CAAC,KAAK,CAAC,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAES,+CAAe,GAAzB,UACI,MAAkB,EAClB,aAAqB,EACrB,MAAwB,EACxB,WAAsC,EACtC,QAAgB;QAEhB,IAAM,KAAK,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAEvE,0FAA0F;QAC1F,2FAA2F;QAC3F,IAAI,KAAK,IAAI,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAC/D,WAAW,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;SAC1D;IACL,CAAC;IAEL,4BAAC;AAAD,CA/DA,AA+DC,IAAA;AA/DqB,sDAAqB","file":"ConnectionFactoryBase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ServicePropertiesPropertyName,\n} from \"../common.speech/Exports\";\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognizerConfig } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\n\n    public static getHostSuffix(region: string): string {\n        if (!!region) {\n            if (region.toLowerCase().startsWith(\"china\")) {\n                return \".azure.cn\";\n            }\n            if (region.toLowerCase().startsWith(\"usgov\")) {\n                return \".azure.us\";\n            }\n        }\n        return \".microsoft.com\";\n    }\n\n    public abstract create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection;\n\n    protected setCommonUrlParams(\n        config: RecognizerConfig,\n        queryParams: IStringDictionary<string>,\n        endpoint: string): void {\n\n        const propertyIdToParameterMap: Map<number, string> = new Map([\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\n            [PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, QueryParameterNames.EnableWordLevelTimestamps],\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\n        ]);\n\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\n        });\n\n\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\n\n        Object.keys(serviceProperties).forEach((value: string): void => {\n            queryParams[value] = serviceProperties[value];\n        });\n    }\n\n    protected setUrlParameter(\n        propId: PropertyId,\n        parameterName: string,\n        config: RecognizerConfig,\n        queryParams: IStringDictionary<string>,\n        endpoint: string): void {\n\n        const value: string = config.parameters.getProperty(propId, undefined);\n\n        // FIXME: The .search() check will incorrectly match parameter name anywhere in the string\n        //        including e.g. the path portion, or even as a substring of other query parameters\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n            queryParams[parameterName] = value.toLocaleLowerCase();\n        }\n    }\n\n}\n"]}