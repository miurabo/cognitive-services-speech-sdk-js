{"version":3,"sources":["src/common.speech/ConversationServiceRecognizer.ts"],"names":[],"mappings":"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","file":"ConversationServiceRecognizer.js","sourcesContent":["import { IAudioSource } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    OutputFormat,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    ResultReason,\n    SpeechRecognitionResult\n} from \"../sdk/Exports\";\nimport {\n    DetailedSpeechPhrase,\n    EnumTranslation,\n    IAuthentication,\n    IConnectionFactory,\n    OutputFormatPropertyName,\n    RecognitionStatus,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis\n} from \"./Exports\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\nexport class ConversationServiceRecognizer extends ServiceRecognizerBase {\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: Recognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n        this.handleSpeechPhraseMessage = async (textBody: string): Promise<void> => this.handleSpeechPhrase(textBody);\n        this.handleSpeechHypothesisMessage = (textBody: string): void => this.handleSpeechHypothesis(textBody);\n    }\n\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n        void connectionMessage;\n        return;\n    }\n\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\n        void result;\n        void offset;\n        void sessionId;\n        return;\n    }\n\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\n        void result;\n        void duration;\n        void sessionId;\n        return;\n    }\n\n    protected async processSpeechMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n        let processed: boolean = false;\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n            case \"speech.fragment\":\n                if (!!this.handleSpeechHypothesisMessage) {\n                    this.handleSpeechHypothesisMessage(connectionMessage.textBody);\n                }\n                processed = true;\n                break;\n            case \"speech.phrase\":\n                if (!!this.handleSpeechPhraseMessage) {\n                    await this.handleSpeechPhraseMessage(connectionMessage.textBody);\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n            // Implementing to allow inheritance\n            void sessionId;\n            void requestId;\n            void cancellationReason;\n            void errorCode;\n            void error;\n        }\n\n    protected async handleSpeechPhrase(textBody: string): Promise<void> {\n\n        const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(textBody);\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n        let result: SpeechRecognitionResult;\n        const resultProps: PropertyCollection = new PropertyCollection();\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\n        const simpleOffset = simple.Offset + this.privRequestSession.currentTurnAudioOffset;\n        let offset = simpleOffset;\n\n        this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n        if (ResultReason.Canceled === resultReason) {\n            const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n            const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\n\n            await this.cancelRecognitionLocal(\n                cancelReason,\n                cancellationErrorCode,\n                EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n\n        } else {\n            if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                    result = new SpeechRecognitionResult(\n                        this.privRequestSession.requestId,\n                        resultReason,\n                        simple.DisplayText,\n                        simple.Duration,\n                        simpleOffset,\n                        simple.Language,\n                        simple.LanguageDetectionConfidence,\n                        simple.SpeakerId,\n                        undefined,\n                        textBody,\n                        resultProps);\n                } else {\n                    const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(textBody);\n                    const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\n                    const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\n\n                    result = new SpeechRecognitionResult(\n                        this.privRequestSession.requestId,\n                        resultReason,\n                        detailed.Text,\n                        detailed.Duration,\n                        totalOffset,\n                        detailed.Language,\n                        detailed.LanguageDetectionConfidence,\n                        detailed.SpeakerId,\n                        undefined,\n                        offsetCorrectedJson,\n                        resultProps);\n\n                        offset = result.offset;\n                }\n\n                this.handleRecognizedCallback(result, offset, this.privRequestSession.sessionId);\n            }\n        }\n    }\n\n    protected handleSpeechHypothesis(textBody: string): void {\n        const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(textBody);\n        const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n        const resultProps: PropertyCollection = new PropertyCollection();\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, textBody);\n\n        const result = new SpeechRecognitionResult(\n            this.privRequestSession.requestId,\n            ResultReason.RecognizingSpeech,\n            hypothesis.Text,\n            hypothesis.Duration,\n            offset,\n            hypothesis.Language,\n            hypothesis.LanguageDetectionConfidence,\n            hypothesis.SpeakerId,\n            undefined,\n            textBody,\n            resultProps);\n\n        this.privRequestSession.onHypothesis(offset);\n\n        this.handleRecognizingCallback(result, hypothesis.Duration, this.privRequestSession.sessionId);\n    }\n}\n"]}