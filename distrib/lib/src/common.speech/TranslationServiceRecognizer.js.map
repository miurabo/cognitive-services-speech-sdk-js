{"version":3,"sources":["src/common.speech/TranslationServiceRecognizer.ts"],"names":[],"mappings":"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","file":"TranslationServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionEvent,\n    IAudioSource,\n    MessageType,\n    TranslationStatus,\n} from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionResult,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationRecognizer,\n    Translations,\n    TranslationSynthesisEventArgs,\n    TranslationSynthesisResult,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    ConversationServiceRecognizer,\n    EnumTranslation,\n    RecognitionStatus,\n    SynthesisStatus,\n    TranslationHypothesis,\n    TranslationPhrase,\n    TranslationSynthesisEnd,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// eslint-disable-next-line max-classes-per-file\nexport class TranslationServiceRecognizer extends ConversationServiceRecognizer {\n    private privTranslationRecognizer: TranslationRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        translationRecognizer: TranslationRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\n        this.privTranslationRecognizer = translationRecognizer;\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n                this.privTranslationRecognizer.onConnection();\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                void this.privTranslationRecognizer.onDisconnection();\n            }\n        });\n\n    }\n\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        const resultProps: PropertyCollection = new PropertyCollection();\n        let processed: boolean = await this.processSpeechMessages(connectionMessage);\n        if (processed) {\n            return true;\n        }\n\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\n\n                // OK, the recognition was successful. How'd the translation do?\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\n                if (!!this.privTranslationRecognizer.recognized) {\n                    try {\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\n                        /* eslint-disable no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                // report result to promise.\n                if (!!this.privSuccessCallback) {\n                    try {\n                        this.privSuccessCallback(result.result);\n                    } catch (e) {\n                        if (!!this.privErrorCallback) {\n                            this.privErrorCallback(e as string);\n                        }\n                    }\n                    // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n                    this.privSuccessCallback = undefined;\n                    this.privErrorCallback = undefined;\n                }\n            } else {\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n\n                const result = new TranslationRecognitionResult(\n                    undefined,\n                    this.privRequestSession.requestId,\n                    reason,\n                    translatedPhrase.Text,\n                    translatedPhrase.Duration,\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\n                    translatedPhrase.Language,\n                    translatedPhrase.Confidence,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                if (reason === ResultReason.Canceled) {\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\n\n                    await this.cancelRecognitionLocal(\n                        cancelReason,\n                        cancellationErrorCode,\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\n\n                } else {\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n                        if (!!this.privTranslationRecognizer.recognized) {\n                            try {\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                                /* eslint-disable no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!this.privSuccessCallback) {\n                        try {\n                            this.privSuccessCallback(result);\n                        } catch (e) {\n                            if (!!this.privErrorCallback) {\n                                this.privErrorCallback(e as string);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        this.privSuccessCallback = undefined;\n                        this.privErrorCallback = undefined;\n                    }\n                }\n                processed = true;\n            }\n\n        };\n\n        if (connectionMessage.messageType === MessageType.Text) {\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        }\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"translation.hypothesis\":\n\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n\n                if (!!this.privTranslationRecognizer.recognizing) {\n                    try {\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n                        /* eslint-disable no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n\n            case \"translation.response\":\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody) as { SpeechPhrase: ITranslationPhrase };\n                if (!!phrase.SpeechPhrase) {\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\n                }\n                break;\n            case \"translation.phrase\":\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\n                break;\n\n            case \"translation.synthesis\":\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n                processed = true;\n                break;\n\n            case \"audio.end\":\n            case \"translation.synthesis.end\":\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n                switch (synthEnd.SynthesisStatus) {\n                    case SynthesisStatus.Error:\n                        if (!!this.privTranslationRecognizer.synthesizing) {\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\n\n                            try {\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                                /* eslint-disable no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n\n                        if (!!this.privTranslationRecognizer.canceled) {\n                            // And raise a canceled event to send the rich(er) error message back.\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                                this.privRequestSession.sessionId,\n                                CancellationReason.Error,\n                                synthEnd.FailureReason,\n                                CancellationErrorCode.ServiceError,\n                                null);\n\n                            try {\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                                /* eslint-disable no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                        break;\n                    case SynthesisStatus.Success:\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n                        break;\n                    default:\n                        break;\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privTranslationRecognizer.canceled) {\n\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                sessionId,\n                cancellationReason,\n                error,\n                errorCode,\n                undefined);\n\n            try {\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n                /* eslint-disable no-empty */\n            } catch { }\n        }\n\n        if (!!this.privSuccessCallback) {\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\n                undefined, // Translations\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Druation\n                undefined, // Offset\n                undefined, // Language\n                undefined, // LanguageDetectionConfidence\n                error,\n                undefined, // Json\n                properties);\n            try {\n                this.privSuccessCallback(result);\n                /* eslint-disable no-empty */\n                this.privSuccessCallback = undefined;\n            } catch { }\n        }\n    }\n\n    protected handleRecognizingCallback(result: SpeechRecognitionResult, duration: number, sessionId: string): void {\n        try {\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), duration, sessionId);\n            this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, ev);\n            /* eslint-disable no-empty */\n        } catch (error) {\n            // Not going to let errors in the event handler\n            // trip things up.\n        }\n    }\n\n    protected handleRecognizedCallback(result: SpeechRecognitionResult, offset: number, sessionId: string): void {\n        try {\n            const ev = new TranslationRecognitionEventArgs(TranslationRecognitionResult.fromSpeechRecognitionResult(result), offset, sessionId);\n            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n        } catch (error) {\n            // Not going to let errors in the event handler\n            // trip things up.\n        }\n    }\n\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\n        let translations: Translations;\n\n        if (undefined !== serviceResult.Translation.Translations) {\n            translations = new Translations();\n            for (const translation of serviceResult.Translation.Translations) {\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\n            }\n        }\n\n        let resultReason: ResultReason;\n        let language: string;\n        let confidence: string;\n        if (serviceResult instanceof TranslationPhrase) {\n            if (!!serviceResult.Translation && serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\n                resultReason = ResultReason.TranslatedSpeech;\n            } else {\n                resultReason = ResultReason.RecognizedSpeech;\n            }\n            language = serviceResult.Language;\n            confidence = serviceResult.Confidence;\n        } else {\n            resultReason = ResultReason.TranslatingSpeech;\n        }\n\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n        const result = new TranslationRecognitionResult(\n            translations,\n            this.privRequestSession.requestId,\n            resultReason,\n            serviceResult.Text,\n            serviceResult.Duration,\n            offset,\n            language,\n            confidence,\n            serviceResult.Translation.FailureReason,\n            JSON.stringify(serviceResult),\n            properties);\n\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n        return ev;\n    }\n\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\n        const result = new TranslationSynthesisResult(reason, audio);\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\n\n        if (!!this.privTranslationRecognizer.synthesizing) {\n            try {\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                /* eslint-disable no-empty */\n            } catch (error) {\n                // Not going to let errors in the event handler\n                // trip things up.\n            }\n        }\n\n    }\n}\n"]}