{"version":3,"sources":["src/common.speech/TranslationConnectionFactory.ts"],"names":[],"mappings":"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","file":"TranslationConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary,\n} from \"../common/Exports\";\nimport { StringUtils } from \"../common/StringUtils\";\nimport {\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    RecognizerConfig,\n    WebsocketMessageFormatter,\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n\n    public create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection {\n\n        const endpoint: string = this.getEndpointUrl(config);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        if (config.autoDetectSourceLanguages !== undefined) {\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n        }\n        this.setQueryParams(queryParams, config, endpoint);\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n    public getEndpointUrl(config: RecognizerConfig, returnRegionPlaceholder?: boolean): string {\n\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n\n        let endpointUrl: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpointUrl) {\n            if (config.autoDetectSourceLanguages !== undefined) {\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.stt.speech\" + hostSuffix);\n                endpointUrl = host + \"/speech/universal/v2\";\n            } else {\n                const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://{region}.s2s.speech\" + hostSuffix);\n                endpointUrl = host + \"/speech/translation/cognitiveservices/v1\";\n            }\n        }\n\n        if (returnRegionPlaceholder === true) {\n            return endpointUrl;\n        }\n\n        return StringUtils.formatString(endpointUrl, { region });\n    }\n\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\n\n        queryParams.from = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n        queryParams.to = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages);\n\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\n        this.setUrlParameter(\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\n            QueryParameterNames.StableTranslation,\n            config,\n            queryParams,\n            endpointUrl\n        );\n\n        const translationVoice: string =  config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n        if (translationVoice !== undefined) {\n            queryParams.voice = translationVoice;\n            queryParams.features = \"texttospeech\";\n        }\n    }\n}\n"]}