{"version":3,"sources":["src/common.speech/Transcription/ConversationManager.ts"],"names":[],"mappings":"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","file":"ConversationManager.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IRequestOptions,\n    IRestParams,\n    IRestResponse,\n    RestMessageAdapter,\n    RestRequestType\n} from \"../../common.browser/Exports\";\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { IConversationResponseError, IInternalConversation } from \"./ConversationTranslatorInterfaces\";\n\nexport class ConversationManager {\n\n    private privRequestParams: IRestParams;\n    private privErrors: IErrorMessages;\n    private privHost: string;\n    private privApiVersion: string;\n    private privRestPath: string;\n    private privRestAdapter: RestMessageAdapter;\n\n    public constructor() {\n        //\n        this.privRequestParams = ConversationConnectionConfig.configParams;\n        this.privErrors = ConversationConnectionConfig.restErrors;\n        this.privHost = ConversationConnectionConfig.host;\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\n        this.privRestPath = ConversationConnectionConfig.restPath;\n        this.privRestAdapter = new RestMessageAdapter({});\n    }\n\n    /**\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n     * @param args\n     * @param conversationCode\n     * @param callback\n     * @param errorCallback\n     */\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: (c: any) => void, err?: (e: string) => void): void {\n\n        try {\n\n            Contracts.throwIfNullOrUndefined(args, \"args\");\n\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n\n            const queryParams: IStringDictionary<string> = {};\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n            queryParams[this.privRequestParams.languageCode] = languageCode;\n            queryParams[this.privRequestParams.nickname] = nickname;\n\n            const headers: IStringDictionary<string> = {};\n            if (correlationId) {\n                headers[this.privRequestParams.correlationId] = correlationId;\n            }\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n\n            if (conversationCode !== undefined) {\n                queryParams[this.privRequestParams.roomId] = conversationCode;\n            } else {\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n                if (subscriptionKey) {\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n                } else if (authToken) {\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n                } else {\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n                }\n            }\n\n            const config: IRequestOptions = {};\n            config.headers = headers;\n            this.privRestAdapter.options = config;\n\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\n\n            // TODO: support a proxy and certificate validation\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse): void => {\n\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\n\n                if (!response.ok) {\n                    if (!!err) {\n                        // get the error\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n                        let errMessageRaw: IConversationResponseError;\n                        try {\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n                        } catch (e) {\n                            errorMessage += ` [${response.data}]`;\n                        }\n                        if (requestId) {\n                            errorMessage += ` ${requestId}`;\n                        }\n\n                        err(errorMessage);\n                    }\n                    return;\n                }\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\n                if (conversation) {\n                    conversation.requestId = requestId;\n                }\n                if (!!cb) {\n                    try {\n                        cb(conversation);\n                    } catch (e) {\n                        if (!!err) {\n                            err(e as string);\n                        }\n                    }\n                    cb = undefined;\n                }\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            }).catch( (): void => { });\n\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error;\n                    err(typedError.name + \": \" + typedError.message);\n\n                } else {\n                    err(error as string);\n                }\n            }\n        }\n    }\n\n    /**\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n     * @param args\n     * @param sessionToken\n     * @param callback\n     */\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\n            try {\n\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n\n                const queryParams: IStringDictionary<string> = {};\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\n\n                const headers: IStringDictionary<string> = {};\n                if (correlationId) {\n                    headers[this.privRequestParams.correlationId] = correlationId;\n                }\n\n                const config: IRequestOptions = {};\n                config.headers = headers;\n                this.privRestAdapter.options = config;\n\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\n\n                // TODO: support a proxy and certificate validation\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse): void => {\n\n                    if (!response.ok) {\n                        // ignore errors on delete\n                    }\n\n                    resolve();\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                }).catch( (): void => {});\n\n            } catch (error) {\n                if (error instanceof Error) {\n                    const typedError: Error = error;\n                    reject(typedError.name + \": \" + typedError.message);\n\n                } else {\n                    reject(error as string);\n                }\n            }\n        });\n    }\n}\n"]}