{"version":3,"sources":["src/common.speech/Transcription/ConversationConnectionFactory.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,wDAA8E;AAC9E,gDAAkF;AAClF,iDAAgD;AAChD,6CAA+C;AAC/C,kEAAiE;AAEjE,+EAA8E;AAC9E,iGAAgG;AAEhG;;;GAGG;AACH;IAAmD,iDAAqB;IAAxE;;IAmBA,CAAC;IAjBU,8CAAM,GAAb,UAAc,MAAwB,EAAE,QAAkB,EAAE,YAAqB;QAE7E,IAAM,YAAY,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,2BAA2B,EAAE,2DAA4B,CAAC,IAAI,CAAC,CAAC;QACtI,IAAM,aAAa,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,oCAAoC,EAAE,oBAAU,EAAE,CAAC,CAAC;QAE3H,IAAM,QAAQ,GAAW,WAAS,YAAY,GAAG,2DAA4B,CAAC,aAAe,CAAC;QAC9F,IAAM,KAAK,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,oBAAU,CAAC,4BAA4B,EAAE,SAAS,CAAC,CAAC;QACxG,qBAAS,CAAC,sBAAsB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAEjD,IAAM,WAAW,GAA8B,EAAE,CAAC;QAClD,WAAW,CAAC,2DAA4B,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,2DAA4B,CAAC,UAAU,CAAC;QAC5G,WAAW,CAAC,2DAA4B,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;QACrE,WAAW,CAAC,2DAA4B,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,aAAa,CAAC;QACrF,IAAM,iBAAiB,GAAY,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM,CAAC;QAC1H,OAAO,IAAI,6BAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,EAAE,IAAI,6EAAqC,EAAE,EAAE,mBAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;IACpL,CAAC;IAEL,oCAAC;AAAD,CAnBA,AAmBC,CAnBkD,6CAAqB,GAmBvE;AAnBY,sEAA6B","file":"ConversationConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\n\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\n\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\n\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\n\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\n        Contracts.throwIfNullOrUndefined(token, \"token\");\n\n        const queryParams: IStringDictionary<string> = {};\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n}\n"]}