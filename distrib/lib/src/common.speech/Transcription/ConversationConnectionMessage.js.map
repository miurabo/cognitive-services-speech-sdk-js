{"version":3,"sources":["src/common.speech/Transcription/ConversationConnectionMessage.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;AAElC,gDAAyF;AAEzF;IAAmD,iDAAiB;IAGhE,uCACI,WAAwB,EACxB,IAAS,EACT,OAAmC,EACnC,EAAW;QAJf,YAKQ,kBAAM,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,SAK5C;QAJO,IAAM,IAAI,GAAqB,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,QAAQ,CAAqB,CAAC;QAC7E,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YACzB,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,IAAI,CAAC;SAChD;;IACT,CAAC;IAED,sBAAW,kEAAuB;aAAlC;YACI,OAAO,IAAI,CAAC,2BAA2B,CAAC;QAC5C,CAAC;;;OAAA;IACL,oCAAC;AAAD,CAlBA,AAkBC,CAlBkD,2BAAiB,GAkBnE;AAlBY,sEAA6B","file":"ConversationConnectionMessage.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports\";\n\nexport class ConversationConnectionMessage extends ConnectionMessage {\n    private privConversationMessageType: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n            super(messageType, body, headers, id);\n            const json: { type: string } = JSON.parse(this.textBody) as { type: string };\n            if (json.type !== undefined) {\n                this.privConversationMessageType = json.type;\n            }\n    }\n\n    public get conversationMessageType(): string {\n        return this.privConversationMessageType;\n    }\n}\n"]}