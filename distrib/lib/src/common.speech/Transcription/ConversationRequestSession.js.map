{"version":3,"sources":["src/common.speech/Transcription/ConversationRequestSession.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElC,gDAI8B;AAE9B;;;GAGG;AACH;IAOI,oCAAmB,SAAiB;QAN5B,mBAAc,GAAY,KAAK,CAAC;QAChC,oBAAe,GAAkB,IAAI,KAAK,EAAe,CAAC;QAM9D,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,0BAAgB,EAAE,CAAC;QACxC,IAAI,CAAC,6BAA6B,GAAG,IAAI,kBAAQ,EAAQ,CAAC;IAC9D,CAAC;IAED,sBAAW,iDAAS;aAApB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAW,iDAAS;aAApB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAW,yDAAiB;aAA5B;YACI,OAAO,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC;QACtD,CAAC;;;OAAA;IAEM,yDAAoB,GAA3B,UAA4B,gBAAwB,EAAE,YAAoB;QACtE,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACtC,CAAC;IAEM,oDAAe,GAAtB,UAAuB,OAAgB;QACnC,IAAI,OAAO,EAAE;YACT,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;IACL,CAAC;IAEM,mEAA8B,GAArC,UAAsC,UAAkB;QACpD,IAAI,UAAU,KAAK,GAAG,EAAE;YACpB,OAAO;SACV;aAAM,IAAI,UAAU,KAAK,GAAG,EAAE;YAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;IACL,CAAC;IAEM,6DAAwB,GAA/B,UAAgC,qBAA8B;QAC1D,IAAI,CAAC,qBAAqB,EAAE;YACxB,IAAI,CAAC,UAAU,EAAE,CAAC;SACrB;aAAM;YACH,IAAI,CAAC,aAAa,GAAG,0BAAgB,EAAE,CAAC;SAC3C;IACL,CAAC;IAEY,4CAAO,GAApB;;;;;;6BACQ,CAAC,IAAI,CAAC,cAAc,EAApB,wBAAoB;wBACpB,uEAAuE;wBACvE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;8BACkB,EAApB,KAAA,IAAI,CAAC,eAAe;;;6BAApB,CAAA,cAAoB,CAAA;wBAAlC,UAAU;wBACjB,qBAAM,UAAU,CAAC,MAAM,EAAE,EAAA;;wBAAzB,SAAyB,CAAC;;;wBADL,IAAoB,CAAA;;;;;;KAIpD;IAEO,+CAAU,GAAlB;QACI,EAAE;IACN,CAAC;IAEL,iCAAC;AAAD,CAjEA,AAiEC,IAAA;AAjEY,gEAA0B","file":"ConversationRequestSession.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    createNoDashGuid,\n    Deferred,\n    IDetachable,\n} from \"../../common/Exports\";\n\n/**\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\n * TODO: define what telemetry is required.\n */\nexport class ConversationRequestSession {\n    private privIsDisposed: boolean = false;\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\n    private privRequestId: string;\n    private privRequestCompletionDeferral: Deferred<void>;\n    private privSessionId: string;\n\n    public constructor(sessionId: string) {\n        this.privSessionId = sessionId;\n        this.privRequestId = createNoDashGuid();\n        this.privRequestCompletionDeferral = new Deferred<void>();\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get completionPromise(): Promise<void> {\n        return this.privRequestCompletionDeferral.promise;\n    }\n\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\n        this.privSessionId = connectionId;\n    }\n\n    public onAuthCompleted(isError: boolean): void {\n        if (isError) {\n            this.onComplete();\n        }\n    }\n\n    public onConnectionEstablishCompleted(statusCode: number): void {\n        if (statusCode === 200) {\n            return;\n        } else if (statusCode === 403) {\n            this.onComplete();\n        }\n    }\n\n    public onServiceTurnEndResponse(continuousRecognition: boolean): void {\n        if (!continuousRecognition) {\n            this.onComplete();\n        } else {\n            this.privRequestId = createNoDashGuid();\n        }\n    }\n\n    public async dispose(): Promise<void> {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n            for (const detachable of this.privDetachables) {\n                await detachable.detach();\n            }\n        }\n    }\n\n    private onComplete(): void {\n        //\n    }\n\n}\n"]}