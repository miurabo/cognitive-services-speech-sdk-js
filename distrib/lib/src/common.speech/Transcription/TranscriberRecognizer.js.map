{"version":3,"sources":["src/common.speech/Transcription/TranscriberRecognizer.ts"],"names":[],"mappings":"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","file":"TranscriberRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\nimport { AudioStreamFormatImpl } from \"../../sdk/Audio/AudioStreamFormat\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport {\n    AudioConfig,\n    CancellationEventArgs,\n    Conversation,\n    ConversationInfo,\n    Meeting,\n    MeetingInfo,\n    MeetingTranscriber,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SessionEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechTranslationConfig,\n    SpeechTranslationConfigImpl,\n} from \"../../sdk/Exports\";\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n    TranscriberConnectionFactory,\n    TranscriptionServiceRecognizer,\n} from \"../Exports\";\n\nexport class TranscriberRecognizer extends Recognizer {\n\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\n\n    private privDisposedRecognizer: boolean;\n    private privConversation: Conversation;\n    private privMeeting: Meeting;\n    private isMeetingRecognizer: boolean;\n\n    /**\n     * TranscriberRecognizer constructor.\n     * @constructor\n     * @param {SpeechTranslationConfig} speechTranslationConfig - Non-audio configuration associated with the recognizer\n     * @param {AudioConfig} audioConfig - An audio configuration associated with the recognizer\n     */\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig: AudioConfig) {\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\n\n        const audioConfigImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        Contracts.throwIfNull(audioConfigImpl, \"audioConfigImpl\");\n\n        Contracts.throwIfNullOrWhitespace(\n            speechTranslationConfigImpl.speechRecognitionLanguage,\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\n        this.privDisposedRecognizer = false;\n        this.isMeetingRecognizer = false;\n    }\n\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    public set conversation(c: Conversation) {\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\n        this.isMeetingRecognizer = false;\n        this.privConversation = c;\n    }\n\n    public getConversationInfo(): ConversationInfo {\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\n        return this.privConversation.conversationInfo;\n    }\n\n    public set meeting(m: Meeting) {\n        Contracts.throwIfNullOrUndefined(m, \"Meeting\");\n        this.isMeetingRecognizer = true;\n        this.privMeeting = m;\n    }\n\n    public getMeetingInfo(): MeetingInfo {\n        Contracts.throwIfNullOrUndefined(this.privMeeting, \"Meeting\");\n        return this.privMeeting.meetingInfo;\n    }\n\n    public IsMeetingRecognizer(): boolean {\n        return this.isMeetingRecognizer;\n    }\n\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n\n    public async close(): Promise<void> {\n        if (!this.privDisposedRecognizer) {\n            await this.dispose(true);\n        }\n    }\n\n    // Push async join/leave conversation message via serviceRecognizer\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n        await reco.sendSpeechEventAsync(conversationInfo, command);\n    }\n\n    // Push async join/leave meeting message via serviceRecognizer\n    public async pushMeetingEvent(meetingInfo: MeetingInfo, command: string): Promise<void> {\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n        await reco.sendMeetingSpeechEventAsync(meetingInfo, command);\n    }\n\n    public async checkAudioConfiguration(): Promise<void> {\n        const audioConfigImpl = this.audioConfig as AudioConfigImpl;\n        const format: AudioStreamFormatImpl = await audioConfigImpl.format;\n        const channels = format.channels;\n        if (channels === 1) {\n            // We use this GUID property to indicate that single channel audio is in use for MeetingTranscriber.\n            this.properties.setProperty(\"f0f5debc-f8c9-4892-ac4b-90a7ab359fd2\", \"true\");\n        } else if (channels !== 8) {\n            throw new Error(`Unsupported audio configuration: Detected ${channels}-channel audio`);\n        }\n        return;\n    }\n\n    public connectMeetingCallbacks(transcriber: MeetingTranscriber): void {\n        this.isMeetingRecognizer = true;\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\n            if (!!transcriber.canceled) {\n                transcriber.canceled(transcriber, e);\n            }\n        };\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\n            if (!!transcriber.transcribing) {\n                transcriber.transcribing(transcriber, e);\n            }\n        };\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\n            if (!!transcriber.transcribed) {\n                transcriber.transcribed(transcriber, e);\n            }\n        };\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\n            if (!!transcriber.sessionStarted) {\n                transcriber.sessionStarted(transcriber, e);\n            }\n        };\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\n            if (!!transcriber.sessionStopped) {\n                transcriber.sessionStopped(transcriber, e);\n            }\n        };\n    }\n\n    public disconnectCallbacks(): void {\n        this.canceled = undefined;\n        this.recognizing = undefined;\n        this.recognized = undefined;\n        this.sessionStarted = undefined;\n        this.sessionStopped = undefined;\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member ConversationTranscriber.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedRecognizer = true;\n            await this.implRecognizerStop();\n        }\n\n        await super.dispose(disposing);\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(\n            speechConfig,\n            this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n}\n"]}