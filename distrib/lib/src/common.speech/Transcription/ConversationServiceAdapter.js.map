{"version":3,"sources":["src/common.speech/Transcription/ConversationServiceAdapter.ts"],"names":[],"mappings":"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","file":"ConversationServiceAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionState,\n    createNoDashGuid,\n    Deferred,\n    IAudioSource,\n    IConnection,\n    MessageType,\n} from \"../../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    ConversationExpirationEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationResult,\n    ResultReason,\n    Translations\n} from \"../../sdk/Exports\";\nimport {\n    CognitiveTokenAuthentication,\n    IAuthentication,\n    IConnectionFactory,\n    RecognizerConfig,\n    ServiceRecognizerBase\n} from \"../Exports\";\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\nimport { ConversationRequestSession } from \"./ConversationRequestSession\";\nimport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs\n} from \"./ConversationTranslatorEventArgs\";\nimport {\n    ConversationTranslatorCommandTypes,\n    ConversationTranslatorMessageTypes,\n    IInternalParticipant\n} from \"./ConversationTranslatorInterfaces\";\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer\";\nimport {\n    CommandResponsePayload,\n    IParticipantPayloadResponse,\n    IParticipantsListPayloadResponse,\n    ITranslationResponsePayload,\n    ParticipantPayloadResponse,\n    ParticipantsListPayloadResponse,\n    SpeechResponsePayload,\n    TextResponsePayload\n} from \"./ServiceMessages/Exports\";\n\n/**\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\n */\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\n    private privConversationConnectionFactory: IConnectionFactory;\n    private privConversationAuthFetchEventId: string;\n    private privConversationAuthentication: IAuthentication;\n    private privConversationRequestSession: ConversationRequestSession;\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\n    private privConnectionLoop: Promise<void>;\n    private terminateMessageLoop: boolean;\n    private privLastPartialUtteranceId: string;\n    private privConversationIsDisposed: boolean;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\n\n        this.privLastPartialUtteranceId = \"\";\n        this.privConversationServiceConnector = conversationServiceConnector;\n        this.privConversationAuthentication = authentication;\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\n        this.recognizeOverride = (): Promise<void> => this.noOp();\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\n        this.privConversationConnectionFactory = connectionFactory;\n        this.privConversationIsDisposed = false;\n    }\n\n    public isDisposed(): boolean {\n        return super.isDisposed() || this.privConversationIsDisposed;\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        this.privConversationIsDisposed = true;\n        if (this.privConnectionConfigPromise !== undefined) {\n            const connection: IConnection = await this.privConnectionConfigPromise;\n            await connection.dispose(reason);\n        }\n        await super.dispose(reason);\n    }\n\n    public async sendMessage(message: string): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        return connection.send(new ConversationConnectionMessage(\n            MessageType.Text,\n            message));\n    }\n\n    public async sendMessageAsync(message: string): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\n    }\n\n    protected privDisconnect(): Promise<void> {\n        if (this.terminateMessageLoop) {\n            return;\n        }\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\n            this.privConversationRequestSession.requestId,\n            CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        this.terminateMessageLoop = true;\n        return Promise.resolve();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/require-await\n    protected async processTypeSpecificMessages(): Promise<boolean> {\n        return true;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        this.terminateMessageLoop = true;\n\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\n            cancellationReason,\n            error,\n            errorCode,\n            undefined,\n            sessionId);\n\n        try {\n            if (!!this.privConversationServiceConnector.canceled) {\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\n            }\n        } catch {\n            // continue on error\n        }\n    }\n\n    /**\n     * Establishes a websocket connection to the end point.\n     */\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\n        this.privConnectionLoop = this.startMessageLoop();\n        return connection;\n    }\n\n    /**\n     * Process incoming websocket messages\n     */\n    private async receiveConversationMessageOverride(): Promise<void> {\n        if (this.isDisposed() || this.terminateMessageLoop) {\n            return Promise.resolve();\n        }\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\n\n        try {\n            const connection: IConnection = await this.fetchConnection();\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\n            if (this.isDisposed() || this.terminateMessageLoop) {\n                // We're done.\n                communicationCustodian.resolve();\n                return Promise.resolve();\n            }\n\n            if (!message) {\n                return this.receiveConversationMessageOverride();\n            }\n\n            const sessionId: string = this.privConversationRequestSession.sessionId;\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\n            let sendFinal: boolean = false;\n\n            try {\n                switch (conversationMessageType) {\n                    case \"info\":\n                    case \"participant_command\":\n                    case \"command\":\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\n                        switch (commandPayload.command.toLowerCase()) {\n\n                            /**\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\n                             * The consuming client must wait for this message to arrive\n                             * before starting to send their own data.\n                             */\n                            case \"participantlist\":\n\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\n\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\n                                    const participant: IInternalParticipant = {\n                                        avatar: p.avatar,\n                                        displayName: p.nickname,\n                                        id: p.participantId,\n                                        isHost: p.ishost,\n                                        isMuted: p.ismuted,\n                                        isUsingTts: p.usetts,\n                                        preferredLanguage: p.locale\n                                    };\n                                    return participant;\n                                });\n\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\n                                            participantsPayload.muteAll, participantsResult, sessionId));\n                                }\n                                break;\n\n                            /**\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\n                             * This is sent at the start of the Conversation\n                             */\n                            case \"settranslatetolanguages\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\n                             * If sent by the participant the setting will effect only their own profanity level.\n                             * If sent by the host, the setting will effect all participants including the host.\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\n                             */\n                            case \"setprofanityfiltering\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetMute' is sent if the participant has been muted by the host.\n                             * Check the 'participantId' to determine if the current user has been muted.\n                             */\n                            case \"setmute\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setMute,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\n                             */\n                            case \"setmuteall\":\n\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\n                             */\n                            case \"roomexpirationwarning\":\n\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\n                             */\n                            case \"setusetts\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setUseTTS,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\n                             */\n                            case \"setlockstate\":\n\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'ChangeNickname' is received if a user changes their display name.\n                             * Any cached particpiants list should be updated to reflect the display name.\n                             */\n                            case \"changenickname\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.changeNickname,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'JoinSession' is sent when a user joins the Conversation.\n                             */\n                            case \"joinsession\":\n\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\n\n                                const joiningParticipant: IInternalParticipant = {\n                                    avatar: joinParticipantPayload.avatar,\n                                    displayName: joinParticipantPayload.nickname,\n                                    id: joinParticipantPayload.participantId,\n                                    isHost: joinParticipantPayload.ishost,\n                                    isMuted: joinParticipantPayload.ismuted,\n                                    isUsingTts: joinParticipantPayload.usetts,\n                                    preferredLanguage: joinParticipantPayload.locale,\n                                };\n\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantEventArgs(\n                                            joiningParticipant,\n                                            sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\n                             */\n                            case \"leavesession\":\n\n                                const leavingParticipant: IInternalParticipant = {\n                                    id: commandPayload.participantId\n                                };\n\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\n                             */\n                            case \"disconnectsession\":\n\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                                const disconnectParticipant: IInternalParticipant = {\n                                    id: commandPayload.participantId\n                                };\n\n                                break;\n\n                            case \"token\":\n                                const token = new CognitiveTokenAuthentication(\n                                    (): Promise<string> => {\n                                        const authorizationToken = commandPayload.token;\n                                        return Promise.resolve(authorizationToken);\n                                    },\n                                    (): Promise<string> => {\n                                        const authorizationToken = commandPayload.token;\n                                        return Promise.resolve(authorizationToken);\n                                    });\n                                this.authentication = token;\n\n                                break;\n\n                            /**\n                             * Message not recognized.\n                             */\n                            default:\n                                break;\n                        }\n                        break;\n\n                    /**\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\n                     */\n                    case \"partial\":\n\n                    /**\n                     * 'final' (or 'phrase') represents a finalized speech message.\n                     */\n                    case \"final\":\n\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\n\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\n                            this.getTranslations(speechPayload.translations),\n                            speechPayload.language,\n                            speechPayload.id,\n                            conversationResultReason,\n                            speechPayload.recognition,\n                            undefined,\n                            undefined,\n                            message.textBody,\n                            undefined);\n\n                        if (speechPayload.isFinal) {\n                            // check the length, sometimes empty finals are returned\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\n                                sendFinal = true;\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\n                                // send final as normal. We had a non-empty partial for this same utterance\n                                // so sending the empty final is important\n                                sendFinal = true;\n                            } else {\n                                // suppress unneeded final\n                            }\n\n                            if (sendFinal) {\n                                if (!!this.privConversationServiceConnector.translationReceived) {\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\n                                }\n                            }\n                        } else if (speechResult.text !== undefined) {\n                            this.privLastPartialUtteranceId = speechPayload.id;\n                            if (!!this.privConversationServiceConnector.translationReceived) {\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\n                            }\n                        }\n\n                        break;\n\n                    /**\n                     * \"translated_message\" is a text message or instant message (IM).\n                     */\n                    case \"translated_message\":\n\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\n\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\n                            this.getTranslations(textPayload.translations),\n                            textPayload.language,\n                            undefined,\n                            undefined,\n                            textPayload.originalText,\n                            undefined,\n                            undefined,\n                            undefined,\n                            message.textBody,\n                            undefined);\n\n                        if (!!this.privConversationServiceConnector.translationReceived) {\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\n                        }\n                        break;\n\n                    default:\n                        // ignore any unsupported message types\n                        break;\n                }\n            } catch (e) {\n                // continue\n            }\n            return this.receiveConversationMessageOverride();\n        } catch (e) {\n            this.terminateMessageLoop = true;\n        }\n\n        return communicationCustodian.promise;\n    }\n\n    private async startMessageLoop(): Promise<void> {\n        if (this.isDisposed()) {\n            return Promise.resolve();\n        }\n        this.terminateMessageLoop = false;\n\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\n\n        try {\n            const r = await messageRetrievalPromise;\n            return r;\n        } catch (error) {\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\n            return null;\n        }\n    }\n\n    // Takes an established websocket connection to the endpoint\n    private configConnection(): Promise<IConnection> {\n        if (this.isDisposed()) {\n            return Promise.resolve<IConnection>(undefined);\n        }\n        if (this.privConnectionConfigPromise !== undefined) {\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionConfigPromise = undefined;\n                    return this.configConnection();\n                }\n                return this.privConnectionConfigPromise;\n            }, (): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionConfigPromise = undefined;\n                return this.configConnection();\n            });\n        }\n        if (this.terminateMessageLoop) {\n            return Promise.resolve<IConnection>(undefined);\n        }\n\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\n\n        return this.privConnectionConfigPromise;\n    }\n\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\n        let translations: Translations;\n\n        if (undefined !== serviceResultTranslations) {\n            translations = new Translations();\n            for (const translation of serviceResultTranslations) {\n                translations.set(translation.lang, translation.translation);\n            }\n        }\n\n        return translations;\n    }\n}\n"]}