{"version":3,"sources":["src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts"],"names":[],"mappings":";AAAA,4DAA4D;AAC5D,kCAAkC;;;AAElC,gDAM8B;AAC9B,iFAAgF;AAEhF;;GAEG;AACH;IAAA;IAwCA,CAAC;IAtCG;;OAEG;IACI,mEAAmB,GAA1B,UAA2B,OAA4B;QACnD,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAiC,CAAC;QAE/D,IAAI;YACA,IAAI,OAAO,CAAC,WAAW,KAAK,qBAAW,CAAC,IAAI,EAAE;gBAC1C,IAAM,eAAe,GAAkC,IAAI,6DAA6B,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,WAAW,EAAE,EAAE,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;gBACnJ,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;aACrC;iBAAM,IAAI,OAAO,CAAC,WAAW,KAAK,qBAAW,CAAC,MAAM,EAAE;gBACnD,QAAQ,CAAC,OAAO,CAAC,IAAI,6DAA6B,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1H;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,QAAQ,CAAC,MAAM,CAAC,0CAAwC,CAAa,CAAC,CAAC;SAC1E;QAED,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC;IAED;;OAEG;IACI,qEAAqB,GAA5B,UAA6B,OAA0B;QAEnD,IAAM,QAAQ,GAAG,IAAI,kBAAQ,EAAuB,CAAC;QAErD,IAAI;YACA,IAAI,OAAO,CAAC,WAAW,KAAK,qBAAW,CAAC,IAAI,EAAE;gBAC1C,IAAM,OAAO,GAAG,MAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC;gBAC9D,QAAQ,CAAC,OAAO,CAAC,IAAI,6BAAmB,CAAC,qBAAW,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;aACpF;SACJ;QAAC,OAAO,CAAC,EAAE;YACR,QAAQ,CAAC,MAAM,CAAC,mCAAiC,CAAa,CAAC,CAAC;SACnE;QAED,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC;IACL,4CAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,sFAAqC","file":"ConversationWebsocketMessageFormatter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionMessage,\n    Deferred,\n    IWebsocketMessageFormatter,\n    MessageType,\n    RawWebsocketMessage,\n} from \"../../common/Exports\";\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\n\n/**\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\n */\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\n\n    /**\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\n     */\n    public toConnectionMessage(message: RawWebsocketMessage): Promise<ConversationConnectionMessage> {\n        const deferral = new Deferred<ConversationConnectionMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\n                deferral.resolve(incomingMessage);\n            } else if (message.messageType === MessageType.Binary) {\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. Error: ${e as string}`);\n        }\n\n        return deferral.promise;\n    }\n\n    /**\n     * Format outgoing messages: text (commands or IM)\n     */\n    public fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage> {\n\n        const deferral = new Deferred<RawWebsocketMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. ${e as string}`);\n        }\n\n        return deferral.promise;\n    }\n}\n"]}