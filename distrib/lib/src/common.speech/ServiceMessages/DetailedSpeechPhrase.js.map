{"version":3,"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"names":[],"mappings":"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","file":"DetailedSpeechPhrase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\n\n// speech.phrase for detailed\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n    PrimaryLanguage?: IPrimaryLanguage;\n    DisplayText?: string;\n    SpeakerId?: string;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display?: string;\n    DisplayText?: string;\n    Words?: IWord[];\n    DisplayWords?: IWord[];\n}\n\nexport interface IWord {\n    Word: string;\n    Offset: number;\n    Duration: number;\n}\n\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): DetailedSpeechPhrase {\n        return new DetailedSpeechPhrase(json);\n    }\n\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\n        if (!!this.privDetailedSpeechPhrase.NBest) {\n            let firstWordOffset: number;\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\n                if (!!phrase.Words && !!phrase.Words[0]) {\n                    firstWordOffset = phrase.Words[0].Offset;\n                    break;\n                }\n            }\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\n                const offset: number = baseOffset - firstWordOffset;\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\n                    if (!!details.Words) {\n                        for (const word of details.Words) {\n                            word.Offset += offset;\n                        }\n                    }\n                    if (!!details.DisplayWords) {\n                        for (const word of details.DisplayWords) {\n                            word.Offset += offset;\n                        }\n                    }\n                }\n            }\n        }\n        return JSON.stringify(this.privDetailedSpeechPhrase);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\n    }\n    public get NBest(): IPhrase[] {\n        return this.privDetailedSpeechPhrase.NBest;\n    }\n    public get Duration(): number {\n        return this.privDetailedSpeechPhrase.Duration;\n    }\n    public get Offset(): number {\n        return this.privDetailedSpeechPhrase.Offset;\n    }\n    public get Language(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n    }\n    public get LanguageDetectionConfidence(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n    }\n    public get Text(): string {\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\n        }\n        return this.privDetailedSpeechPhrase.DisplayText;\n    }\n    public get SpeakerId(): string {\n        return this.privDetailedSpeechPhrase.SpeakerId;\n    }\n}\n"]}