{"version":3,"sources":["src/common.browser/MicAudioSource.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;;;;;AAElC,OAAO,EACH,YAAY,EAEZ,IAAI,EACP,MAAM,0BAA0B,CAAC;AAClC,OAAO,EACH,qBAAqB,EAErB,4BAA4B,EAC5B,mBAAmB,EACnB,qBAAqB,EACrB,4BAA4B,EAC5B,6BAA6B,EAC7B,4BAA4B,EAC5B,yBAAyB,EACzB,wBAAwB,EACxB,gBAAgB,EAChB,QAAQ,EACR,MAAM,EACN,WAAW,GAKd,MAAM,mBAAmB,CAAC;AAE3B,OAAO,EACH,iBAAiB,EACjB,qBAAqB,GACxB,MAAM,gCAAgC,CAAC;AAUxC,MAAM,CAAC,MAAM,iCAAiC,GAAG,6BAA6B,CAAC;AAE/E,MAAM,OAAO,cAAc;IAsBvB,YACqB,YAAuB,EACvB,QAAiB,EAClC,aAAsB,EACtB,WAAyB;QAHR,iBAAY,GAAZ,YAAY,CAAW;QACvB,aAAQ,GAAR,QAAQ,CAAS;QApB9B,gBAAW,GAA2C,EAAE,CAAC;QAyB7D,IAAI,CAAC,mBAAmB,GAAG,cAAc,CAAC,WAAW,CAAC,cAAc,GAAG,EAAE,CAAC;QAC1E,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjE,IAAI,CAAC,UAAU,GAAG,IAAI,WAAW,EAAoB,CAAC;QACtD,IAAI,CAAC,eAAe,GAAG,WAAW,IAAI,IAAI,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IAED,IAAW,MAAM;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IACvD,CAAC;IAEM,MAAM;QACT,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7B,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;SAC9C;QAED,IAAI,CAAC,sBAAsB,GAAG,IAAI,QAAQ,EAAQ,CAAC;QAEnD,IAAI;YACA,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC7B;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI,KAAK,YAAY,KAAK,EAAE;gBACxB,MAAM,UAAU,GAAU,KAAK,CAAC;gBAChC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;aACnF;iBAAM;gBACH,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAe,CAAC,CAAC;aACvD;YACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;SAC9C;QAED,MAAM,GAAG,GAAG,MAAM,CAAC,SAAuB,CAAC;QAE3C,IAAI,YAAY,GAAG;QACf,2BAA2B;QAC3B,GAAG,CAAC,YAAY;YAChB,GAAG,CAAC,kBAAkB;YACtB,GAAG,CAAC,eAAe;YACnB,GAAG,CAAC,cAAc,CACrB,CAAC;QAEF,IAAI,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE;YACpB,YAAY,GAAG,CAAC,WAAmC,EAAE,eAAkD,EAAE,aAA8C,EAAQ,EAAE;gBAC7J,GAAG,CAAC,YAAY;qBACX,YAAY,CAAC,WAAW,CAAC;qBACzB,IAAI,CAAC,eAAe,CAAC;qBACrB,KAAK,CAAC,aAAa,CAAC,CAAC;YAC9B,CAAC,CAAC;SACL;QAED,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,QAAQ,GAAG,wCAAwC,CAAC;YAC1D,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,oDAAoD;SAC9G;aAAM;YACH,MAAM,IAAI,GAAG,GAAS,EAAE;gBACpB,IAAI,CAAC,OAAO,CAAC,IAAI,4BAA4B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,eAAe;gBAC5E,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;oBACrD,IAAI,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACrD,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,CAAC;iBACzC;qBAAM;oBACH,YAAY,CACR,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAC3E,CAAC,WAAwB,EAAQ,EAAE;wBAC/B,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;wBACnC,IAAI,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACrD,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,CAAC;oBAC1C,CAAC,EAAE,CAAC,KAAU,EAAQ,EAAE;wBACpB,MAAM,QAAQ,GAAG,oDAAoD,KAAe,EAAE,CAAC;wBACvF,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;oBACnE,CAAC,CAAC,CAAC;iBACV;YACL,CAAC,CAAC;YAEF,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,WAAW,EAAE;gBACxC,gGAAgG;gBAChG,uDAAuD;gBACvD,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;qBACpB,IAAI,CAAC,IAAI,CAAC;qBACV,KAAK,CAAC,CAAC,MAAW,EAAQ,EAAE;oBACzB,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,uCAAuC,MAAgB,EAAE,CAAC,CAAC;gBAClG,CAAC,CAAC,CAAC;aACV;iBAAM;gBACH,IAAI,EAAE,CAAC;aACV;SACJ;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;IAC/C,CAAC;IAEM,EAAE;QACL,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,MAAM,CAAC,WAAmB;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,6BAA6B,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;QAE1E,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAChC,CAAC,MAA2B,EAAoB,EAAE;YAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,4BAA4B,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;YACzE,OAAO;gBACH,MAAM,EAAE,GAAwB,EAAE;oBAC9B,MAAM,CAAC,SAAS,EAAE,CAAC;oBACnB,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;oBACrC,IAAI,CAAC,OAAO,CAAC,IAAI,4BAA4B,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;oBACzE,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC1B,CAAC,CAAA;gBACD,EAAE,EAAE,GAAW,EAAE,CAAC,WAAW;gBAC7B,IAAI,EAAE,GAAuC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE;aAChE,CAAC;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,MAAM,CAAC,WAAmB;QAC7B,IAAI,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;YAC9C,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACrC,IAAI,CAAC,OAAO,CAAC,IAAI,4BAA4B,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;SAC5E;IACL,CAAC;IAEY,OAAO;;YAChB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE;gBACrC,IAAI,QAAQ,EAAE;oBACV,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;oBAC1C,IAAI,MAAM,EAAE;wBACR,MAAM,CAAC,KAAK,EAAE,CAAC;qBAClB;iBACJ;aACJ;YAED,IAAI,CAAC,OAAO,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB;YACpE,IAAI,IAAI,CAAC,sBAAsB,EAAE;gBAC7B,yEAAyE;gBACzE,6DAA6D;gBAC7D,MAAM,IAAI,CAAC,sBAAsB,CAAC;gBAClC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;aACtC;YAED,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAEjC,OAAO;QACX,CAAC;KAAA;IAED,IAAW,MAAM;QACb,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IAED,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,CAAC,KAAa,EAA4B,EAAE,CAAC,CAC/E;YACI,aAAa,EAAE,cAAc,CAAC,WAAW,CAAC,aAAa;YACvD,YAAY,EAAE,cAAc,CAAC,WAAW,CAAC,QAAQ;YACjD,YAAY,EAAE,YAAY,CAAC,OAAO;YAClC,YAAY,EAAE,YAAY;YAC1B,KAAK,EAAE,KAAK;YACZ,UAAU,EAAE,cAAc,CAAC,WAAW,CAAC,aAAa;YACpD,IAAI,EAAE,IAAI,CAAC,WAAW;SACzB,CACJ,CAAC,CAAC;IACP,CAAC;IAEM,WAAW,CAAC,IAAY,EAAE,KAAa;QAC1C,IAAI,IAAI,KAAK,iCAAiC,EAAE;YAC5C,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC1C;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,YAAY,GAAG,IAAI,GAAG,mCAAmC,CAAC,CAAC;SAC9E;IACL,CAAC;IAEO,kBAAkB;QACtB,MAAM,qBAAqB,GAAW,YAAY,CAAC;QAEnD,4CAA4C;QAC5C,IAAI,IAAI,CAAC,mBAAmB,KAAK,SAAS,EAAE;YACxC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACpD;QAED,kFAAkF;QAClF,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACpE,OAAO,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;SACjD;QAED,kBAAkB;QAClB,IAAI,CAAC,mBAAmB,GAAG,qBAAqB,CAAC;QAEjD,oDAAoD;QACpD,MAAM,kBAAkB,GAAW,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC;QAE9F,kFAAkF;QAClF,IAAI,SAAS,KAAK,kBAAkB,EAAE;YAClC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACpD;QAED,MAAM,QAAQ,GAAqB,IAAI,QAAQ,EAAU,CAAC;QAE1D,+BAA+B;QAC/B,SAAS,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,CAAC,OAA0B,EAAQ,EAAE;YAChF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,IAAI,MAAM,CAAC,QAAQ,KAAK,kBAAkB,EAAE;oBACxC,mBAAmB;oBACnB,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,KAAK,CAAC;oBACxC,MAAM;iBACT;aACJ;YACD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC/C,CAAC,EAAE,GAAqB,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAEvE,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC;IAEa,MAAM,CAAC,WAAmB;;YACpC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;YACpB,MAAM,MAAM,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;YACnF,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC;YACvC,IAAI;gBACA,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;aAC5E;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,OAAO,CAAC,IAAI,yBAAyB,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,KAAe,CAAC,CAAC,CAAC;gBACvF,MAAM,KAAK,CAAC;aACf;YACD,MAAM,MAAM,GAAwB,MAAM,CAAC;YAC3C,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAEO,OAAO,CAAC,KAAuB;QACnC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,kBAAkB;QACtB,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO;SACV;QAED,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,eAAe,CAAC,cAAc,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IACvG,CAAC;IAEa,mBAAmB;;YAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACnB,OAAO;aACV;YAED,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAE1D,2EAA2E;YAC3E,uGAAuG;YACvG,uDAAuD;YACvD,IAAI,QAAQ,GAAY,KAAK,CAAC;YAC9B,IAAI,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC7B,QAAQ,GAAG,IAAI,CAAC;aACnB;YAED,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACrB,8EAA8E;oBAC9E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;oBAC1B,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;oBAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;iBAC9B;aACJ;iBAAM,IAAI,IAAI,KAAK,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,SAAS,EAAE;gBAC1E,0DAA0D;gBAC1D,0DAA0D;gBAC1D,iEAAiE;gBACjE,0DAA0D;gBAC1D,kEAAkE;gBAClE,wBAAwB;gBACxB,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;aACpC;QACL,CAAC;KAAA;;AAzSuB,0BAAW,GAA0B,iBAAiB,CAAC,qBAAqB,EAA2B,CAAC","file":"MicAudioSource.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    connectivity,\n    ISpeechConfigAudioDevice,\n    type\n} from \"../common.speech/Exports\";\nimport {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ChunkedArrayBufferStream,\n    createNoDashGuid,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    Stream,\n} from \"../common/Exports\";\nimport { IStreamChunk } from \"../common/Stream\";\nimport {\n    AudioStreamFormat,\n    AudioStreamFormatImpl,\n} from \"../sdk/Audio/AudioStreamFormat\";\nimport { IRecorder } from \"./IRecorder\";\n\n// Extending the default definition with browser specific definitions for backward compatibility\ninterface INavigator extends Navigator {\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback | undefined, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n}\n\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\n\nexport class MicAudioSource implements IAudioSource {\n\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\n\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private privId: string;\n\n    private privEvents: EventSource<AudioSourceEvent>;\n\n    private privInitializeDeferral: Deferred<void>;\n\n    private privMediaStream: MediaStream;\n\n    private privContext: AudioContext;\n\n    private privMicrophoneLabel: string;\n\n    private privOutputChunkSize: number;\n\n    private privIsClosing: boolean;\n\n    public constructor(\n        private readonly privRecorder: IRecorder,\n        private readonly deviceId?: string,\n        audioSourceId?: string,\n        mediaStream?: MediaStream\n        ) {\n\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privMediaStream = mediaStream || null;\n        this.privIsClosing = false;\n    }\n\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\n    }\n\n    public turnOn(): Promise<void> {\n        if (this.privInitializeDeferral) {\n            return this.privInitializeDeferral.promise;\n        }\n\n        this.privInitializeDeferral = new Deferred<void>();\n\n        try {\n            this.createAudioContext();\n        } catch (error) {\n            if (error instanceof Error) {\n                const typedError: Error = error;\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\n            } else {\n                this.privInitializeDeferral.reject(error as string);\n            }\n            return this.privInitializeDeferral.promise;\n        }\n\n        const nav = window.navigator as INavigator;\n\n        let getUserMedia = (\n            // eslint-disable-next-line\n            nav.getUserMedia ||\n            nav.webkitGetUserMedia ||\n            nav.mozGetUserMedia ||\n            nav.msGetUserMedia\n        );\n\n        if (!!nav.mediaDevices) {\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\n                nav.mediaDevices\n                    .getUserMedia(constraints)\n                    .then(successCallback)\n                    .catch(errorCallback);\n            };\n        }\n\n        if (!getUserMedia) {\n            const errorMsg = \"Browser does not support getUserMedia.\";\n            this.privInitializeDeferral.reject(errorMsg);\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\n        } else {\n            const next = (): void => {\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n                if (this.privMediaStream && this.privMediaStream.active) {\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\n                    this.privInitializeDeferral.resolve();\n                } else {\n                    getUserMedia(\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\n                        (mediaStream: MediaStream): void => {\n                            this.privMediaStream = mediaStream;\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\n                            this.privInitializeDeferral.resolve();\n                        }, (error: any): void => {\n                            const errorMsg = `Error occurred during microphone initialization: ${error as string}`;\n                            this.privInitializeDeferral.reject(errorMsg);\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\n                        });\n                }\n            };\n\n            if (this.privContext.state === \"suspended\") {\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\n                // https://github.com/WebAudio/web-audio-api/issues/790\n                this.privContext.resume()\n                    .then(next)\n                    .catch((reason: any): void => {\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason as string}`);\n                    });\n            } else {\n                next();\n            }\n        }\n\n        return this.privInitializeDeferral.promise;\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\n            (stream: Stream<ArrayBuffer>): IAudioStreamNode => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n                return {\n                    detach: async (): Promise<void> => {\n                        stream.readEnded();\n                        delete this.privStreams[audioNodeId];\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        return this.turnOff();\n                    },\n                    id: (): string => audioNodeId,\n                    read: (): Promise<IStreamChunk<ArrayBuffer>> => stream.read(),\n                };\n            });\n    }\n\n    public detach(audioNodeId: string): void {\n        if (audioNodeId && this.privStreams[audioNodeId]) {\n            this.privStreams[audioNodeId].close();\n            delete this.privStreams[audioNodeId];\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n        }\n    }\n\n    public async turnOff(): Promise<void> {\n        for (const streamId in this.privStreams) {\n            if (streamId) {\n                const stream = this.privStreams[streamId];\n                if (stream) {\n                    stream.close();\n                }\n            }\n        }\n\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n        if (this.privInitializeDeferral) {\n            // Correctly handle when browser forces mic off before turnOn() completes\n            // eslint-disable-next-line @typescript-eslint/await-thenable\n            await this.privInitializeDeferral;\n            this.privInitializeDeferral = null;\n        }\n\n        await this.destroyAudioContext();\n\n        return;\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return this.getMicrophoneLabel().then((label: string): ISpeechConfigAudioDevice => (\n            {\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\n                connectivity: connectivity.Unknown,\n                manufacturer: \"Speech SDK\",\n                model: label,\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\n                type: type.Microphones,\n            }\n        ));\n    }\n\n    public setProperty(name: string, value: string): void {\n        if (name === AudioWorkletSourceURLPropertyName) {\n            this.privRecorder.setWorkletUrl(value);\n        } else {\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\n        }\n    }\n\n    private getMicrophoneLabel(): Promise<string> {\n        const defaultMicrophoneName: string = \"microphone\";\n\n        // If we did this already, return the value.\n        if (this.privMicrophoneLabel !== undefined) {\n            return Promise.resolve(this.privMicrophoneLabel);\n        }\n\n        // If the stream isn't currently running, we can't query devices because security.\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\n            return Promise.resolve(defaultMicrophoneName);\n        }\n\n        // Setup a default\n        this.privMicrophoneLabel = defaultMicrophoneName;\n\n        // Get the id of the device running the audio track.\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\n\n        // If the browser doesn't support getting the device ID, set a default and return.\n        if (undefined === microphoneDeviceId) {\n            return Promise.resolve(this.privMicrophoneLabel);\n        }\n\n        const deferred: Deferred<string> = new Deferred<string>();\n\n        // Enumerate the media devices.\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]): void => {\n            for (const device of devices) {\n                if (device.deviceId === microphoneDeviceId) {\n                    // Found the device\n                    this.privMicrophoneLabel = device.label;\n                    break;\n                }\n            }\n            deferred.resolve(this.privMicrophoneLabel);\n        }, (): Deferred<string> => deferred.resolve(this.privMicrophoneLabel));\n\n        return deferred.promise;\n    }\n\n    private async listen(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\n        await this.turnOn();\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\n        this.privStreams[audioNodeId] = stream;\n        try {\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\n        } catch (error) {\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error as string));\n            throw error;\n        }\n        const result: Stream<ArrayBuffer> = stream;\n        return result;\n    }\n\n    private onEvent(event: AudioSourceEvent): void {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private createAudioContext(): void {\n        if (!!this.privContext) {\n            return;\n        }\n\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\n    }\n\n    private async destroyAudioContext(): Promise<void> {\n        if (!this.privContext) {\n            return;\n        }\n\n        this.privRecorder.releaseMediaResources(this.privContext);\n\n        // This pattern brought to you by a bug in the TypeScript compiler where it\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\n        // https://github.com/Microsoft/TypeScript/issues/11498\n        let hasClose: boolean = false;\n        if (\"close\" in this.privContext) {\n            hasClose = true;\n        }\n\n        if (hasClose) {\n            if (!this.privIsClosing) {\n                // The audio context close may take enough time that the close is called twice\n                this.privIsClosing = true;\n                await this.privContext.close();\n                this.privContext = null;\n                this.privIsClosing = false;\n            }\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\n            // Suspend actually takes a callback, but analogous to the\n            // resume method, it'll be only fired if suspend is called\n            // in a direct response to a user action. The later is not always\n            // the case, as TurnOff is also called, when we receive an\n            // end-of-speech message from the service. So, doing a best effort\n            // fire-and-forget here.\n            await this.privContext.suspend();\n        }\n    }\n}\n"]}