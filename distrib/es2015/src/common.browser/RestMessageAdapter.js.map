{"version":3,"sources":["src/common.browser/RestMessageAdapter.ts"],"names":[],"mappings":"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","file":"RestMessageAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport bent, { BentResponse, RequestBody } from \"bent\";\nimport {\n    ArgumentNullError,\n    Deferred\n} from \"../common/Exports\";\nimport { IRequestOptions } from \"./Exports\";\n\nexport enum RestRequestType {\n    Get = \"GET\",\n    Post = \"POST\",\n    Delete = \"DELETE\",\n    File = \"file\",\n}\n\nexport interface IRestResponse {\n    ok: boolean;\n    status: number;\n    statusText: string;\n    data: string;\n    json: any;\n    headers: string;\n}\n\ninterface JsonError {\n    error?: {\n        message: string;\n    };\n}\n\n// accept rest operations via request method and return abstracted objects from server response\nexport class RestMessageAdapter {\n\n    private privIgnoreCache: boolean;\n    private privHeaders: { [key: string]: string };\n\n    public constructor(\n        configParams: IRequestOptions\n        ) {\n\n        if (!configParams) {\n            throw new ArgumentNullError(\"configParams\");\n        }\n\n        this.privHeaders = configParams.headers;\n        this.privIgnoreCache = configParams.ignoreCache;\n    }\n\n    public static extractHeaderValue(headerKey: string, headers: string): string {\n        let headerValue: string = \"\";\n\n        try {\n            const arr = headers.trim().split(/[\\r\\n]+/);\n            const headerMap: { [key: string]: string } = {};\n            arr.forEach((line: string): void => {\n                const parts = line.split(\": \");\n                const header = parts.shift().toLowerCase();\n                const value = parts.join(\": \");\n                headerMap[header] = value;\n            });\n\n            headerValue = headerMap[headerKey.toLowerCase()];\n        } catch (e) {\n            // ignore the error\n        }\n\n        return headerValue;\n    }\n\n    public set options(configParams: IRequestOptions) {\n        this.privHeaders = configParams.headers;\n        this.privIgnoreCache = configParams.ignoreCache;\n    }\n\n    public setHeaders(key: string, value: string): void {\n        this.privHeaders[key] = value;\n    }\n\n    public request(\n        method: RestRequestType,\n        uri: string,\n        queryParams: { [key: string]: any } = {},\n        body: any = null,\n        ): Promise<IRestResponse> {\n\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\n\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\n        const handleRestResponse = (data: BentResponse, j: JsonError = {}): IRestResponse => {\n            const d: { statusText?: string; statusMessage?: string } = data;\n            return {\n                data: JSON.stringify(j),\n                headers: JSON.stringify(data.headers),\n                json: j,\n                ok: data.statusCode >= 200 && data.statusCode < 300,\n                status: data.statusCode,\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\n            };\n        };\n\n        const send = (postData: RequestBody): void => {\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : `?${this.queryParams(queryParams)}`;\n            sendRequest(params, postData).then( async (data: BentResponse): Promise<void> => {\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\n                    // No JSON from Delete and reset (204) operations\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\n                } else {\n                    try {\n                        const j: JsonError = await data.json() as JsonError;\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\n                    } catch {\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\n                    }\n                }\n            }).catch((error: string): void => {\n                responseReceivedDeferral.reject(error);\n            });\n        };\n\n        if (this.privIgnoreCache) {\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\n        }\n\n        if (method === RestRequestType.Post && body) {\n            this.privHeaders[\"content-type\"] = \"application/json\";\n            this.privHeaders[\"Content-Type\"] = \"application/json\";\n        }\n        send(body as RequestBody);\n        return responseReceivedDeferral.promise;\n    }\n\n    private queryParams(params: { [key: string]: string } = {}): string {\n        return Object.keys(params)\n            .map((k: string): string => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n            .join(\"&\");\n    }\n}\n"]}