{"version":3,"sources":["src/common.browser/ConsoleLoggingListener.ts"],"names":[],"mappings":";AAIA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAGlE,qBAAa,sBAAuB,YAAW,cAAc,CAAC,aAAa,CAAC;IACxE,OAAO,CAAC,kBAAkB,CAAW;IACrC,OAAO,CAAC,WAAW,CAA0B;IAC7C,OAAO,CAAC,uBAAuB,CAAiB;gBAE7B,cAAc,GAAE,QAAwB;IAI3D,IAAW,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,QAAQ,EAGnC;IAED,IAAW,mBAAmB,CAAC,YAAY,EAAE,OAAO,EAEnD;IAEM,OAAO,CAAC,KAAK,EAAE,aAAa,GAAG,IAAI;IAkC1C,OAAO,CAAC,QAAQ;CA8BnB","file":"ConsoleLoggingListener.d.ts","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport * as fs from \"fs\";\nimport { LogLevel } from \"../sdk/LogLevel\";\nimport { IEventListener, PlatformEvent } from \"../common/Exports\";\nimport { Contracts } from \"../sdk/Contracts\";\n\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\n    private privLogLevelFilter: LogLevel;\n    private privLogPath: fs.PathLike = undefined;\n    private privEnableConsoleOutput: boolean = true;\n\n    public constructor(logLevelFilter: LogLevel = LogLevel.None) { // Console output disabled by default\n        this.privLogLevelFilter = logLevelFilter;\n    }\n\n    public set logPath(path: fs.PathLike) {\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available\");\n        this.privLogPath = path;\n    }\n\n    public set enableConsoleOutput(enableOutput: boolean) {\n        this.privEnableConsoleOutput = enableOutput;\n    }\n\n    public onEvent(event: PlatformEvent): void {\n        if (event.eventType >= this.privLogLevelFilter) {\n            const log = this.toString(event);\n            if (!!this.privLogPath) {\n                fs.writeFileSync(this.privLogPath, log + \"\\n\", { flag: \"a+\" });\n            }\n\n            if (this.privEnableConsoleOutput) {\n                switch (event.eventType) {\n                    case LogLevel.Debug:\n                        // eslint-disable-next-line no-console\n                        console.debug(log);\n                        break;\n                    case LogLevel.Info:\n                        // eslint-disable-next-line no-console\n                        console.info(log);\n                        break;\n                    case LogLevel.Warning:\n                        // eslint-disable-next-line no-console\n                        console.warn(log);\n                        break;\n                    case LogLevel.Error:\n                        // eslint-disable-next-line no-console\n                        console.error(log);\n                        break;\n                    default:\n                        // eslint-disable-next-line no-console\n                        console.log(log);\n                        break;\n                }\n            }\n        }\n    }\n\n    private toString(event: PlatformEvent): string {\n        const logFragments = [\n            `${event.eventTime}`,\n            `${event.name}`,\n        ];\n\n        const e: any = event as any;\n        for (const prop in e) {\n            if (prop && event.hasOwnProperty(prop) &&\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\n                prop !== \"eventId\" && prop !== \"name\" &&\n                prop !== \"constructor\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const value = e[prop];\n                let valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    } else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n\n                logFragments.push(`${prop}: ${valueToLog}`);\n            }\n\n        }\n\n        return logFragments.join(\" | \");\n    }\n}\n"]}