{"version":3,"sources":["src/common.browser/WebsocketConnection.ts"],"names":[],"mappings":"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","file":"WebsocketConnection.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    createNoDashGuid,\n    EventSource,\n    IConnection,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n} from \"../common/Exports\";\nimport { ProxyInfo } from \"./ProxyInfo\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\n\nexport class WebsocketConnection implements IConnection {\n\n    private privUri: string;\n    private privMessageFormatter: IWebsocketMessageFormatter;\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\n    private privId: string;\n    private privIsDisposed: boolean = false;\n\n    public constructor(\n        uri: string,\n        queryParameters: IStringDictionary<string>,\n        headers: IStringDictionary<string>,\n        messageFormatter: IWebsocketMessageFormatter,\n        proxyInfo: ProxyInfo,\n        enableCompression: boolean = false,\n        connectionId?: string) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.privMessageFormatter = messageFormatter;\n\n        let queryParams = \"\";\n        let i = 0;\n\n        if (queryParameters) {\n            for (const paramName in queryParameters) {\n                if (paramName) {\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\n\n                    const key = encodeURIComponent(paramName);\n                    queryParams += key;\n\n                    let val = queryParameters[paramName];\n                    if (val) {\n                        val = encodeURIComponent(val);\n                        queryParams += `=${val}`;\n                    }\n\n                    i++;\n                }\n            }\n        }\n\n        if (headers) {\n            for (const headerName in headers) {\n                if (headerName) {\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\n                    const val = encodeURIComponent(headers[headerName]);\n                    queryParams += `${headerName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        this.privUri = \"wss://\" + location.host + \"/api/speech-to-text\" + queryParams;\n        this.privId = connectionId ? connectionId : createNoDashGuid();\n\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\n            this.privUri,\n            this.id,\n            this.privMessageFormatter,\n            proxyInfo,\n            headers,\n            enableCompression);\n    }\n\n    public async dispose(): Promise<void> {\n        this.privIsDisposed = true;\n\n        if (this.privConnectionMessageAdapter) {\n            await this.privConnectionMessageAdapter.close();\n        }\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public get uri(): string {\n        return this.privUri;\n    }\n\n    public state(): ConnectionState {\n        return this.privConnectionMessageAdapter.state;\n    }\n\n    public open(): Promise<ConnectionOpenResponse> {\n        return this.privConnectionMessageAdapter.open();\n    }\n\n    public send(message: ConnectionMessage): Promise<void> {\n        return this.privConnectionMessageAdapter.send(message);\n    }\n\n    public read(): Promise<ConnectionMessage> {\n        return this.privConnectionMessageAdapter.read();\n    }\n\n    public get events(): EventSource<ConnectionEvent> {\n        return this.privConnectionMessageAdapter.events;\n    }\n}\n"]}