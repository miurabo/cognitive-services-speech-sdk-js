{"version":3,"sources":["src/common.speech/SpeechConnectionMessage.Internal.ts"],"names":[],"mappings":"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","file":"SpeechConnectionMessage.Internal.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\n\nexport class SpeechConnectionMessage extends ConnectionMessage {\n\n    private privPath: string;\n    private privRequestId: string;\n    private privContentType: string;\n    private privStreamId: string;\n    private privAdditionalHeaders: IStringDictionary<string>;\n\n    public constructor(\n        messageType: MessageType,\n        path: string,\n        requestId: string,\n        contentType: string,\n        body: any,\n        streamId?: string,\n        additionalHeaders?: IStringDictionary<string>,\n        id?: string) {\n\n        if (!path) {\n            throw new ArgumentNullError(\"path\");\n        }\n\n        if (!requestId) {\n            throw new ArgumentNullError(\"requestId\");\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[HeaderNames.Path] = path;\n        headers[HeaderNames.RequestId] = requestId;\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\n        if (contentType) {\n            headers[HeaderNames.ContentType] = contentType;\n        }\n\n        if (streamId) {\n            headers[HeaderNames.RequestStreamId] = streamId;\n        }\n\n        if (additionalHeaders) {\n            for (const headerName in additionalHeaders) {\n                if (headerName) {\n                    headers[headerName] = additionalHeaders[headerName];\n                }\n\n            }\n        }\n\n        if (id) {\n            super(messageType, body, headers, id);\n        } else {\n            super(messageType, body, headers);\n        }\n\n        this.privPath = path;\n        this.privRequestId = requestId;\n        this.privContentType = contentType;\n        this.privStreamId = streamId;\n        this.privAdditionalHeaders = additionalHeaders;\n    }\n\n    public get path(): string {\n        return this.privPath;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get contentType(): string {\n        return this.privContentType;\n    }\n\n    public get streamId(): string {\n        return this.privStreamId;\n    }\n\n    public get additionalHeaders(): IStringDictionary<string> {\n        return this.privAdditionalHeaders;\n    }\n\n    public static fromConnectionMessage(message: ConnectionMessage): SpeechConnectionMessage {\n        let path = null;\n        let requestId = null;\n        let contentType = null;\n        // let requestTimestamp = null;\n        let streamId = null;\n        const additionalHeaders: IStringDictionary<string> = {};\n\n        if (message.headers) {\n            for (const headerName in message.headers) {\n                if (headerName) {\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\n                        path = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\n                        requestId = message.headers[headerName];\n                    // } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\n                       //  requestTimestamp = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\n                        contentType = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\n                        streamId = message.headers[headerName];\n                    } else {\n                        additionalHeaders[headerName] = message.headers[headerName];\n                    }\n                }\n            }\n        }\n\n        return new SpeechConnectionMessage(\n            message.messageType,\n            path,\n            requestId,\n            contentType,\n            message.body,\n            streamId,\n            additionalHeaders,\n            message.id);\n    }\n}\n"]}