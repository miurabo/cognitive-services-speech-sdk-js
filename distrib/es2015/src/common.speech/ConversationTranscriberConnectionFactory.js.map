{"version":3,"sources":["src/common.speech/ConversationTranscriberConnectionFactory.ts"],"names":[],"mappings":"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","file":"ConversationTranscriberConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport {\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ServicePropertiesPropertyName\n} from \"../common.speech/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    RecognizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class ConversationTranscriberConnectionFactory extends ConnectionFactoryBase {\n    private readonly universalUri: string = \"/speech/universal/v2\";\n\n    public create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n        const queryParams: IStringDictionary<string> = {};\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n        if (endpointId) {\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n            }\n        } else if (language) {\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n                queryParams[QueryParameterNames.Language] = language;\n            }\n        }\n\n        if (config.autoDetectSourceLanguages !== undefined) {\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n        }\n\n        this.setV2UrlParams(config, queryParams, endpoint);\n\n        if (!endpoint) {\n            endpoint = `${host}${this.universalUri}`;\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n\n        const webSocketConnection = new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n\n        // Set the value of SpeechServiceConnection_Url to webSocketConnection.uri (and not to `endpoint`), since this value is the final\n        // URI that was used to make the connection (including query parameters).\n        const uri: string = webSocketConnection.uri;\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, uri);\n\n        return webSocketConnection;\n    }\n\n    protected setV2UrlParams(\n        config: RecognizerConfig,\n        queryParams: IStringDictionary<string>,\n        endpoint: string): void {\n\n        const propertyIdToParameterMap: Map<number, string> = new Map([\n            [PropertyId.Speech_SegmentationSilenceTimeoutMs, QueryParameterNames.SegmentationSilenceTimeoutMs],\n            [PropertyId.SpeechServiceConnection_EnableAudioLogging, QueryParameterNames.EnableAudioLogging],\n            [PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs, QueryParameterNames.EndSilenceTimeoutMs],\n            [PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs, QueryParameterNames.InitialSilenceTimeoutMs],\n            [PropertyId.SpeechServiceResponse_PostProcessingOption, QueryParameterNames.Postprocessing],\n            [PropertyId.SpeechServiceResponse_ProfanityOption, QueryParameterNames.Profanity],\n            [PropertyId.SpeechServiceResponse_StablePartialResultThreshold, QueryParameterNames.StableIntermediateThreshold],\n        ]);\n\n        propertyIdToParameterMap.forEach((parameterName: string, propertyId: PropertyId): void => {\n            this.setUrlParameter(propertyId, parameterName, config, queryParams, endpoint);\n        });\n\n\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\")) as IStringDictionary<string>;\n\n        Object.keys(serviceProperties).forEach((value: string): void => {\n            queryParams[value] = serviceProperties[value];\n        });\n    }\n}\n"]}