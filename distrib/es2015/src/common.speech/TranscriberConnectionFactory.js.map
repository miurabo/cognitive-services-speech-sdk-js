{"version":3,"sources":["src/common.speech/TranscriberConnectionFactory.ts"],"names":[],"mappings":"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","file":"TranscriberConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport {\n    OutputFormat,\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    OutputFormatPropertyName,\n    RecognizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\n\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\n\n    public create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\n\n        const queryParams: IStringDictionary<string> = {};\n        this.setQueryParams(queryParams, config, endpoint);\n\n        if (!endpoint) {\n            endpoint = host;\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n    public setQueryParams(queryParams: IStringDictionary<string>, config: RecognizerConfig, endpointUrl: string): void {\n\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n        if (endpointId && !(QueryParameterNames.CustomSpeechDeploymentId in queryParams)) {\n            queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n        }\n\n        if (language && !(QueryParameterNames.Language in queryParams)) {\n            queryParams[QueryParameterNames.Language] = language;\n        }\n\n        const wordLevelTimings: boolean = config.parameters.getProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"false\").toLowerCase() === \"true\";\n        const detailed: boolean = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) !== OutputFormat[OutputFormat.Simple];\n        if (wordLevelTimings || detailed) {\n            queryParams[QueryParameterNames.Format] = OutputFormat[OutputFormat.Detailed].toLowerCase();\n        }\n\n        this.setCommonUrlParams(config, queryParams, endpointUrl);\n    }\n}\n"]}