{"version":3,"sources":["src/common.speech/SynthesisRestAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAGH,cAAc,EACd,kBAAkB,EAClB,eAAe,GAClB,MAAM,2BAA2B,CAAC;AACnC,OAAO,EACH,UAAU,GACb,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAEhE,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C;;;;GAIG;AACH,MAAM,OAAO,oBAAoB;IAK7B,YAAmB,MAAyB,EAAE,cAA+B;QAEzE,IAAI,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC;QACrG,IAAI,CAAC,QAAQ,EAAE;YACX,MAAM,MAAM,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC;YAC1G,MAAM,UAAU,GAAW,qBAAqB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACvE,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,4BAA4B,EAAE,WAAW,MAAM,cAAc,UAAU,EAAE,CAAC,CAAC;SAClI;QACD,IAAI,CAAC,OAAO,GAAG,GAAG,QAAQ,gCAAgC,CAAC;QAE3D,MAAM,OAAO,GAAoB,cAAc,CAAC,cAAc,CAAC;QAC/D,IAAI,CAAC,eAAe,GAAG,IAAI,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,kBAAkB,GAAG,cAAc,CAAC;IAC7C,CAAC;IAED;;;;;;OAMG;IACI,aAAa,CAAC,YAAoB;QACrC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAA0B,EAAE;YACnG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrE,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ","file":"SynthesisRestAdapter.js","sourcesContent":["import {\n    IRequestOptions,\n    IRestResponse,\n    RestConfigBase,\n    RestMessageAdapter,\n    RestRequestType,\n} from \"../common.browser/Exports\";\nimport {\n    PropertyId,\n} from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { AuthInfo, IAuthentication, SynthesizerConfig } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\n\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SynthesisRestAdapter\n */\nexport class SynthesisRestAdapter {\n    private privRestAdapter: RestMessageAdapter;\n    private privUri: string;\n    private privAuthentication: IAuthentication;\n\n    public constructor(config: SynthesizerConfig, authentication: IAuthentication) {\n\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\n        }\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\n\n        const options: IRequestOptions = RestConfigBase.requestOptions;\n        this.privRestAdapter = new RestMessageAdapter(options);\n        this.privAuthentication = authentication;\n    }\n\n    /**\n     * Sends list voices request to endpoint.\n     * @function\n     * @public\n     * @param connectionId - guid for connectionId\n     * @returns {Promise<IRestResponse>} rest response to status request\n     */\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\n        return this.privAuthentication.fetch(connectionId).then((authInfo: AuthInfo): Promise<IRestResponse> => {\n            this.privRestAdapter.setHeaders(authInfo.headerName, authInfo.token);\n            return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\n        });\n    }\n\n}\n"]}