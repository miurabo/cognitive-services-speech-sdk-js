{"version":3,"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"names":[],"mappings":"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","file":"DetailedSpeechPhrase.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\n\n// speech.phrase for detailed\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n    PrimaryLanguage?: IPrimaryLanguage;\n    DisplayText?: string;\n    SpeakerId?: string;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display?: string;\n    DisplayText?: string;\n    Words?: IWord[];\n    DisplayWords?: IWord[];\n}\n\nexport interface IWord {\n    Word: string;\n    Offset: number;\n    Duration: number;\n}\n\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): DetailedSpeechPhrase {\n        return new DetailedSpeechPhrase(json);\n    }\n\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\n        if (!!this.privDetailedSpeechPhrase.NBest) {\n            let firstWordOffset: number;\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\n                if (!!phrase.Words && !!phrase.Words[0]) {\n                    firstWordOffset = phrase.Words[0].Offset;\n                    break;\n                }\n            }\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\n                const offset: number = baseOffset - firstWordOffset;\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\n                    if (!!details.Words) {\n                        for (const word of details.Words) {\n                            word.Offset += offset;\n                        }\n                    }\n                    if (!!details.DisplayWords) {\n                        for (const word of details.DisplayWords) {\n                            word.Offset += offset;\n                        }\n                    }\n                }\n            }\n        }\n        return JSON.stringify(this.privDetailedSpeechPhrase);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\n    }\n    public get NBest(): IPhrase[] {\n        return this.privDetailedSpeechPhrase.NBest;\n    }\n    public get Duration(): number {\n        return this.privDetailedSpeechPhrase.Duration;\n    }\n    public get Offset(): number {\n        return this.privDetailedSpeechPhrase.Offset;\n    }\n    public get Language(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n    }\n    public get LanguageDetectionConfidence(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n    }\n    public get Text(): string {\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\n        }\n        return this.privDetailedSpeechPhrase.DisplayText;\n    }\n    public get SpeakerId(): string {\n        return this.privDetailedSpeechPhrase.SpeakerId;\n    }\n}\n"]}