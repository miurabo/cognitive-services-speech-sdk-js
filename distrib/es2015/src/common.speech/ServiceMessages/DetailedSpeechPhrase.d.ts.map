{"version":3,"sources":["src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAGjE,MAAM,WAAW,qBAAqB;IAClC,iBAAiB,EAAE,iBAAiB,CAAC;IACrC,KAAK,EAAE,OAAO,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,eAAe,CAAC,EAAE,gBAAgB,CAAC;IACnC,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,SAAS,CAAC,EAAE,MAAM,CAAC;CACtB;AAED,MAAM,WAAW,OAAO;IACpB,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,OAAO,EAAE,MAAM,CAAC;IAChB,GAAG,EAAE,MAAM,CAAC;IACZ,SAAS,EAAE,MAAM,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;IAChB,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC;CAC1B;AAED,MAAM,WAAW,KAAK;IAClB,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,EAAE,MAAM,CAAC;CACpB;AAED,qBAAa,oBAAqB,YAAW,qBAAqB;IAC9D,OAAO,CAAC,wBAAwB,CAAwB;IAExD,OAAO;WAKO,QAAQ,CAAC,IAAI,EAAE,MAAM,GAAG,oBAAoB;IAInD,2BAA2B,CAAC,UAAU,EAAE,MAAM,GAAG,MAAM;IA4B9D,IAAW,iBAAiB,IAAI,iBAAiB,CAEhD;IACD,IAAW,KAAK,IAAI,OAAO,EAAE,CAE5B;IACD,IAAW,QAAQ,IAAI,MAAM,CAE5B;IACD,IAAW,MAAM,IAAI,MAAM,CAE1B;IACD,IAAW,QAAQ,IAAI,MAAM,CAE5B;IACD,IAAW,2BAA2B,IAAI,MAAM,CAE/C;IACD,IAAW,IAAI,IAAI,MAAM,CAKxB;IACD,IAAW,SAAS,IAAI,MAAM,CAE7B;CACJ","file":"DetailedSpeechPhrase.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\n\n// speech.phrase for detailed\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n    PrimaryLanguage?: IPrimaryLanguage;\n    DisplayText?: string;\n    SpeakerId?: string;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display?: string;\n    DisplayText?: string;\n    Words?: IWord[];\n    DisplayWords?: IWord[];\n}\n\nexport interface IWord {\n    Word: string;\n    Offset: number;\n    Duration: number;\n}\n\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privDetailedSpeechPhrase = JSON.parse(json) as IDetailedSpeechPhrase;\n        this.privDetailedSpeechPhrase.RecognitionStatus = RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus as unknown as keyof typeof RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): DetailedSpeechPhrase {\n        return new DetailedSpeechPhrase(json);\n    }\n\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\n        if (!!this.privDetailedSpeechPhrase.NBest) {\n            let firstWordOffset: number;\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\n                if (!!phrase.Words && !!phrase.Words[0]) {\n                    firstWordOffset = phrase.Words[0].Offset;\n                    break;\n                }\n            }\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\n                const offset: number = baseOffset - firstWordOffset;\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\n                    if (!!details.Words) {\n                        for (const word of details.Words) {\n                            word.Offset += offset;\n                        }\n                    }\n                    if (!!details.DisplayWords) {\n                        for (const word of details.DisplayWords) {\n                            word.Offset += offset;\n                        }\n                    }\n                }\n            }\n        }\n        return JSON.stringify(this.privDetailedSpeechPhrase);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\n    }\n    public get NBest(): IPhrase[] {\n        return this.privDetailedSpeechPhrase.NBest;\n    }\n    public get Duration(): number {\n        return this.privDetailedSpeechPhrase.Duration;\n    }\n    public get Offset(): number {\n        return this.privDetailedSpeechPhrase.Offset;\n    }\n    public get Language(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n    }\n    public get LanguageDetectionConfidence(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n    }\n    public get Text(): string {\n        if (!!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0]) {\n            return this.privDetailedSpeechPhrase.NBest[0].Display || this.privDetailedSpeechPhrase.NBest[0].DisplayText;\n        }\n        return this.privDetailedSpeechPhrase.DisplayText;\n    }\n    public get SpeakerId(): string {\n        return this.privDetailedSpeechPhrase.SpeakerId;\n    }\n}\n"]}