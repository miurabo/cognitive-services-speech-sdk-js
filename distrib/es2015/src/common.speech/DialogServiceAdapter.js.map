{"version":3,"sources":["src/common.speech/DialogServiceAdapter.ts"],"names":[],"mappings":"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","file":"DialogServiceAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ReplayableAudioNode\n} from \"../common.browser/Exports\";\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\nimport {\n    BackgroundEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    createGuid,\n    createNoDashGuid,\n    Deferred,\n    DialogEvent,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    MessageType,\n    ServiceEvent,\n} from \"../common/Exports\";\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport {\n    ActivityReceivedEventArgs,\n    CancellationErrorCode,\n    CancellationReason,\n    DialogServiceConfig,\n    DialogServiceConnector,\n    PropertyCollection,\n    PropertyId,\n    RecognitionEventArgs,\n    ResultReason,\n    SessionEventArgs,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n    TurnStatusReceivedEventArgs,\n} from \"../sdk/Exports\";\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\nimport {\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    ISpeechConfigAudioDevice,\n    RecognitionStatus,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechDetected,\n    SpeechHypothesis,\n    SpeechKeyword,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\n    private privDialogServiceConnector: DialogServiceConnector;\n\n    private privDialogAudioSource: IAudioSource;\n\n    private privConnectionLoop: Promise<void>;\n    private terminateMessageLoop: boolean;\n    private agentConfigSent: boolean;\n    private privLastResult: SpeechRecognitionResult;\n    private privEvents: EventSource<DialogEvent>;\n\n    // Turns are of two kinds:\n    // 1: SR turns, end when the SR result is returned and then turn end.\n    // 2: Service turns where an activity is sent by the service along with the audio.\n    private privTurnStateManager: DialogServiceTurnStateManager;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        dialogServiceConnector: DialogServiceConnector) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\n\n        this.privEvents = new EventSource<DialogEvent>();\n        this.privDialogServiceConnector = dialogServiceConnector;\n        this.receiveMessageOverride = (): Promise<void> => this.receiveDialogMessageOverride();\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\n        this.recognizeOverride =\n            (recoMode: RecognitionMode, successCallback: (e: SpeechRecognitionResult) => void, errorCallback: (e: string) => void): Promise<void> =>\n            this.listenOnce(recoMode, successCallback, errorCallback);\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.dialogConnectImpl(connection);\n        this.configConnectionOverride = (connection: IConnection): Promise<IConnection> => this.configConnection(connection);\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\n        this.privDialogAudioSource = audioSource;\n\n        this.agentConfigSent = false;\n        this.privLastResult = null;\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                this.terminateMessageLoop = true;\n            }\n        });\n    }\n\n    public async sendMessage(message: string): Promise<void> {\n        const interactionGuid: string = createGuid();\n        const requestId: string = createNoDashGuid();\n\n        const agentMessage: any = {\n            context: {\n                interactionId: interactionGuid\n            },\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            messagePayload: JSON.parse(message),\n            version: 0.5\n        };\n\n        const agentMessageJson = JSON.stringify(agentMessage);\n        const connection: IConnection = await this.fetchConnection();\n        await connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"agent\",\n            requestId,\n            \"application/json\",\n            agentMessageJson));\n\n    }\n\n    protected async privDisconnect(): Promise<void> {\n        await this.cancelRecognition(this.privRequestSession.sessionId,\n            this.privRequestSession.requestId,\n            CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        this.terminateMessageLoop = true;\n        this.agentConfigSent = false;\n        return;\n    }\n\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        const resultProps: PropertyCollection = new PropertyCollection();\n        if (connectionMessage.messageType === MessageType.Text) {\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        }\n\n        let result: SpeechRecognitionResult;\n        let processed: boolean;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.phrase\":\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\n\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\n                    this.privLastResult = args.result;\n\n                    if (!!this.privDialogServiceConnector.recognized) {\n                        try {\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\n                            /* eslint-disable no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.hypothesis\":\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n                result = new SpeechRecognitionResult(\n                    this.privRequestSession.requestId,\n                    ResultReason.RecognizingSpeech,\n                    hypothesis.Text,\n                    hypothesis.Duration,\n                    offset,\n                    hypothesis.Language,\n                    hypothesis.LanguageDetectionConfidence,\n                    undefined,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                this.privRequestSession.onHypothesis(offset);\n\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n                if (!!this.privDialogServiceConnector.recognizing) {\n                    try {\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\n                        /* eslint-disable no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.keyword\":\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\n\n                result = new SpeechRecognitionResult(\n                    this.privRequestSession.requestId,\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\n                    keyword.Text,\n                    keyword.Duration,\n                    keyword.Offset,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                if (keyword.Status !== \"Accepted\") {\n                    this.privLastResult = result;\n                }\n\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\n\n                if (!!this.privDialogServiceConnector.recognized) {\n                    try {\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\n                        /* eslint-disable no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"audio\":\n                {\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\n                    try {\n                        // Empty binary message signals end of stream.\n                        if (!connectionMessage.binaryBody) {\n                            turn.endAudioStream();\n                        } else {\n                            turn.audioStream.write(connectionMessage.binaryBody);\n                        }\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n\n            case \"response\":\n                {\n                    this.handleResponseMessage(connectionMessage);\n\n                }\n                processed = true;\n                break;\n\n            default:\n                break;\n        }\n        const defferal = new Deferred<boolean>();\n        defferal.resolve(processed);\n        return defferal.promise;\n    }\n\n    // Cancels recognition.\n    protected async cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): Promise<void> {\n\n        this.terminateMessageLoop = true;\n\n        if (!!this.privRequestSession.isRecognizing) {\n            await this.privRequestSession.onStopRecognizing();\n        }\n\n        if (!!this.privDialogServiceConnector.canceled) {\n            const properties: PropertyCollection = new PropertyCollection();\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                sessionId);\n\n            try {\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\n                /* eslint-disable no-empty */\n            } catch { }\n\n            if (!!this.privSuccessCallback) {\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\n                    undefined, // ResultId\n                    ResultReason.Canceled,\n                    undefined, // Text\n                    undefined, // Duration\n                    undefined, // Offset\n                    undefined, // Language\n                    undefined, // Language Detection Confidence\n                    undefined, // Speaker Id\n                    error,\n                    undefined, // Json\n                    properties);\n                try {\n                    this.privSuccessCallback(result);\n                    this.privSuccessCallback = undefined;\n                    /* eslint-disable no-empty */\n                } catch { }\n            }\n        }\n    }\n\n    protected async listenOnce(\n        recoMode: RecognitionMode,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallback: (e: string) => void\n    ): Promise<void> {\n        this.privRecognizerConfig.recognitionMode = recoMode;\n\n        this.privSuccessCallback = successCallback;\n        this.privErrorCallback = errorCallback;\n\n        this.privRequestSession.startNewRecognition();\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\n\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\n\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n        const conPromise: Promise<IConnection> = this.connectImpl();\n\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\n\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\n\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\n\n        try {\n            await conPromise;\n            await preAudioPromise;\n        } catch (error) {\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error as string);\n            return Promise.resolve();\n        }\n\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n        if (!!this.privRecognizer.sessionStarted) {\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n        }\n\n        const audioSendPromise = this.sendAudio(audioNode);\n\n        // /* eslint-disable no-empty */\n        audioSendPromise.then((): void => { /* add? return true;*/ }, async (error: string): Promise<void> => {\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n        });\n    }\n\n    // Establishes a websocket connection to the end point.\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\n        this.privConnectionLoop = this.startMessageLoop();\n        return connection;\n    }\n\n    private receiveDialogMessageOverride(): Promise<void> {\n\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\n\n        const loop = async (): Promise<void> => {\n            try {\n                const isDisposed: boolean = this.isDisposed();\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\n                if (isDisposed || terminateMessageLoop) {\n                    // We're done.\n                    communicationCustodian.resolve(undefined);\n                    return;\n                }\n\n                const connection: IConnection = await this.fetchConnection();\n                const message: ConnectionMessage = await connection.read();\n\n                if (!message) {\n                    return loop();\n                }\n\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n                switch (connectionMessage.path.toLowerCase()) {\n                    case \"turn.start\":\n                        {\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\n\n                            // turn started by the service\n                            if (turnRequestId !== audioSessionReqId) {\n                                this.privTurnStateManager.StartTurn(turnRequestId);\n                            } else {\n                                this.privRequestSession.onServiceTurnStartResponse();\n                            }\n                        }\n                        break;\n\n                    case \"speech.startdetected\":\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n\n                        if (!!this.privRecognizer.speechStartDetected) {\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n                        }\n\n                        break;\n\n                    case \"speech.enddetected\":\n\n                        let json: string;\n\n                        if (connectionMessage.textBody.length > 0) {\n                            json = connectionMessage.textBody;\n                        } else {\n                            // If the request was empty, the JSON returned is empty.\n                            json = \"{ Offset: 0 }\";\n                        }\n\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\n\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n                        if (!!this.privRecognizer.speechEndDetected) {\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n                        }\n                        break;\n\n                    case \"turn.end\":\n                        {\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\n\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\n\n                            // turn started by the service\n                            if (turnEndRequestId !== audioSessionReqId) {\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\n                            } else {\n                                // Audio session turn\n\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\n\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                                    if (!!this.privRecognizer.sessionStopped) {\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                                    }\n                                }\n\n                                // report result to promise.\n                                if (!!this.privSuccessCallback && this.privLastResult) {\n                                    try {\n                                        this.privSuccessCallback(this.privLastResult);\n                                        this.privLastResult = null;\n                                    } catch (e) {\n                                        if (!!this.privErrorCallback) {\n                                            this.privErrorCallback(e as string);\n                                        }\n                                    }\n                                    // Only invoke the call back once.\n                                    // and if it's successful don't invoke the\n                                    // error after that.\n                                    this.privSuccessCallback = undefined;\n                                    this.privErrorCallback = undefined;\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        try {\n                            const processed = await this.processTypeSpecificMessages(connectionMessage);\n                            if (!processed) {\n                                if (!!this.serviceEvents) {\n                                    this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                                }\n                            }\n                        } catch (e) {\n                            //\n                        }\n                }\n                const ret: Promise<void> = loop();\n\n                return ret;\n            } catch (error) {\n                this.terminateMessageLoop = true;\n                communicationCustodian.resolve();\n            }\n        };\n\n        loop().catch((reason: string): void => {\n            Events.instance.onEvent(new BackgroundEvent(reason));\n        });\n\n        return communicationCustodian.promise;\n    }\n\n    private async startMessageLoop(): Promise<void> {\n\n        this.terminateMessageLoop = false;\n\n        try {\n            await this.receiveDialogMessageOverride();\n        } catch (error) {\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\n        }\n\n        return Promise.resolve();\n    }\n\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\n    private async configConnection(connection: IConnection): Promise<IConnection> {\n        if (this.terminateMessageLoop) {\n            this.terminateMessageLoop = false;\n            return Promise.reject(\"Connection to service terminated.\");\n        }\n\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n        await this.sendAgentConfig(connection);\n        return connection;\n    }\n\n    private async sendPreAudioMessages(): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        this.addKeywordContextData();\n        await this.sendSpeechContext(connection, true);\n        await this.sendAgentContext(connection);\n        await this.sendWaveHeader(connection);\n    }\n\n    private sendAgentConfig(connection: IConnection): Promise<void> {\n        if (this.agentConfig && !this.agentConfigSent) {\n\n            if (this.privRecognizerConfig\n                .parameters\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\n                const config = this.agentConfig.get();\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\n                this.agentConfig.set(config);\n            }\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\n\n            const agentConfigJson = this.agentConfig.toJsonString();\n\n            // guard against sending this multiple times on one connection\n            this.agentConfigSent = true;\n\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"agent.config\",\n                this.privRequestSession.requestId,\n                \"application/json\",\n                agentConfigJson));\n        }\n\n        return;\n    }\n\n    private sendAgentContext(connection: IConnection): Promise<void> {\n        const guid: string = createGuid();\n\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n\n        const agentContext: any = {\n            channelData: \"\",\n            context: {\n                interactionId: guid\n            },\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\n            version: 0.5\n        };\n\n        const agentContextJson = JSON.stringify(agentContext);\n\n        return connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"speech.agent.context\",\n            this.privRequestSession.requestId,\n            \"application/json\",\n            agentContextJson));\n    }\n\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\n\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n        const result = new SpeechRecognitionResult(\n            this.privRequestSession.requestId,\n            resultReason,\n            serviceResult.DisplayText,\n            serviceResult.Duration,\n            offset,\n            serviceResult.Language,\n            serviceResult.LanguageDetectionConfidence,\n            undefined,\n            undefined,\n            JSON.stringify(serviceResult),\n            properties);\n\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n        return ev;\n    }\n\n    private handleResponseMessage(responseMessage: SpeechConnectionMessage): void {\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\n        // event according to the message type that's specified.\n        const responsePayload: { messageType: string } = JSON.parse(responseMessage.textBody) as { messageType: string };\n        switch (responsePayload.messageType.toLowerCase()) {\n            case \"message\":\n                const responseRequestId = responseMessage.requestId.toUpperCase();\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\n\n                // update the conversation Id\n                if (activityPayload.conversationId) {\n                    const updateAgentConfig = this.agentConfig.get();\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\n                    this.agentConfig.set(updateAgentConfig);\n                }\n\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\n                    activityPayload,\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\n                if (!!this.privDialogServiceConnector.activityReceived) {\n                    try {\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\n                        /* eslint-disable-next-line no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                break;\n\n            case \"messagestatus\":\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\n                    try {\n                        this.privDialogServiceConnector.turnStatusReceived(\n                            this.privDialogServiceConnector,\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\n                        /* eslint-disable-next-line no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                break;\n\n            default:\n                Events.instance.onEvent(\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\n                break;\n        }\n    }\n\n    private onEvent(event: DialogEvent): void {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private addKeywordContextData(): void {\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\n        if (keywordPropertyValue === undefined) {\n            return;\n        }\n\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\n\n        const keywords = keywordPropertyValue.split(\";\");\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\n\n        const keywordDefinitionArray = [];\n        for (let i = 0; i < keywords.length; i++) {\n            const definition: { [section: string]: any } = {};\n            definition.text = keywords[i];\n            if (i < keywordOffsets.length) {\n                definition.offset = Number(keywordOffsets[i]);\n            }\n            if (i < keywordDurations.length) {\n                definition.duration = Number(keywordDurations[i]);\n            }\n            keywordDefinitionArray.push(definition);\n        }\n\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\n        this.speechContext.setSection(\"keywordDetection\", [{\n            clientDetectedKeywords: keywordDefinitionArray,\n            onReject: { action: \"EndOfTurn\" },\n            type: \"startTrigger\"\n        }]);\n    }\n}\n"]}