{"version":3,"sources":["src/common.speech/RequestSession.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAKH,YAAY,EACZ,aAAa,EAChB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAKH,sBAAsB,EACzB,MAAM,qBAAqB,CAAC;AAG7B,qBAAa,cAAc;IACvB,OAAO,CAAC,cAAc,CAAkB;IACxC,OAAO,CAAC,4BAA4B,CAA2B;IAC/D,OAAO,CAAC,eAAe,CAA2C;IAClE,OAAO,CAAC,aAAa,CAAS;IAC9B,OAAO,CAAC,iBAAiB,CAAS;IAClC,OAAO,CAAC,eAAe,CAAS;IAChC,OAAO,CAAC,aAAa,CAAsB;IAC3C,OAAO,CAAC,oBAAoB,CAAS;IACrC,OAAO,CAAC,uBAAuB,CAAkB;IACjD,OAAO,CAAC,iBAAiB,CAAkB;IAC3C,OAAO,CAAC,iBAAiB,CAAkB;IAC3C,OAAO,CAAC,wBAAwB,CAAa;IAC7C,OAAO,CAAC,kBAAkB,CAAa;IACvC,OAAO,CAAC,sBAAsB,CAAkB;IAChD,OAAO,CAAC,aAAa,CAAa;IAClC,OAAO,CAAC,wBAAwB,CAAa;IAC7C,OAAO,CAAC,eAAe,CAAa;IACpC,OAAO,CAAC,aAAa,CAAS;IAC9B,OAAO,CAAC,gBAAgB,CAAiB;IACzC,OAAO,CAAC,UAAU,CAAkB;IACpC,OAAO,CAAC,sBAAsB,CAAa;gBAExB,aAAa,EAAE,MAAM;IAUxC,IAAW,SAAS,IAAI,MAAM,CAE7B;IAED,IAAW,SAAS,IAAI,MAAM,CAE7B;IAED,IAAW,WAAW,IAAI,MAAM,CAE/B;IAED,IAAW,qBAAqB,IAAI,OAAO,CAAC,IAAI,CAAC,CAEhD;IAED,IAAW,aAAa,IAAI,OAAO,CAElC;IAED,IAAW,aAAa,IAAI,OAAO,CAElC;IAED,IAAW,sBAAsB,IAAI,MAAM,CAE1C;IAED,IAAW,WAAW,IAAI,MAAM,CAE/B;IAED,IAAW,qBAAqB,IAAI,MAAM,CAEzC;IAID,IAAW,SAAS,IAAI,MAAM,CAE7B;IAID,IAAW,oBAAoB,IAAI,MAAM,CAExC;IAEM,yBAAyB,CAAC,WAAW,EAAE,YAAY,CAAC,aAAa,CAAC,GAAG,IAAI;IAMzE,mBAAmB,IAAI,IAAI;IAWrB,4BAA4B,CAAC,SAAS,EAAE,mBAAmB,EAAE,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAWnG,oBAAoB,CAAC,gBAAgB,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,GAAG,IAAI;IAMpE,eAAe,CAAC,OAAO,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAOhD,8BAA8B,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAclF,wBAAwB,CAAC,qBAAqB,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAa7E,eAAe,IAAI,IAAI;IAIvB,0BAA0B,IAAI,IAAI;IAYlC,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI;IAOlC,kBAAkB,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI;IAKxC,mBAAmB,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI;IAOzC,WAAW,CAAC,SAAS,EAAE,MAAM,GAAG,IAAI;IAKpC,iBAAiB,IAAI,IAAI;IAInB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;IAe9B,YAAY,IAAI,MAAM;IAQhB,iBAAiB,IAAI,OAAO,CAAC,IAAI,CAAC;IAKxC,aAAa,IAAI,IAAI;IAI5B,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,sBAAsB,GAAG,IAAI;YAOxC,UAAU;YAOV,eAAe;CAQhC","file":"RequestSession.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport {\n    createNoDashGuid,\n    Deferred,\n    Events,\n    IDetachable,\n    IEventSource,\n    PlatformEvent\n} from \"../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    ListeningStartedEvent,\n    RecognitionStartedEvent,\n    RecognitionTriggeredEvent,\n    SpeechRecognitionEvent,\n} from \"./RecognitionEvents\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\n\nexport class RequestSession {\n    private privIsDisposed: boolean = false;\n    private privServiceTelemetryListener: ServiceTelemetryListener;\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAudioNode: ReplayableAudioNode;\n    private privAuthFetchEventId: string;\n    private privIsAudioNodeDetached: boolean = false;\n    private privIsRecognizing: boolean = false;\n    private privIsSpeechEnded: boolean = false;\n    private privTurnStartAudioOffset: number = 0;\n    private privLastRecoOffset: number = 0;\n    private privHypothesisReceived: boolean = false;\n    private privBytesSent: number = 0;\n    private privRecognitionBytesSent: number = 0;\n    private privRecogNumber: number = 0;\n    private privSessionId: string;\n    private privTurnDeferral: Deferred<void>;\n    private privInTurn: boolean = false;\n    private privConnectionAttempts: number = 0;\n\n    public constructor(audioSourceId: string) {\n        this.privAudioSourceId = audioSourceId;\n        this.privRequestId = createNoDashGuid();\n        this.privAudioNodeId = createNoDashGuid();\n        this.privTurnDeferral = new Deferred<void>();\n\n        // We're not in a turn, so resolve.\n        this.privTurnDeferral.resolve();\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get turnCompletionPromise(): Promise<void> {\n        return this.privTurnDeferral.promise;\n    }\n\n    public get isSpeechEnded(): boolean {\n        return this.privIsSpeechEnded;\n    }\n\n    public get isRecognizing(): boolean {\n        return this.privIsRecognizing;\n    }\n\n    public get currentTurnAudioOffset(): number {\n        return this.privTurnStartAudioOffset;\n    }\n\n    public get recogNumber(): number {\n        return this.privRecogNumber;\n    }\n\n    public get numConnectionAttempts(): number {\n        return this.privConnectionAttempts;\n    }\n\n    // The number of bytes sent for the current connection.\n    // Counter is reset to 0 each time a connection is established.\n    public get bytesSent(): number {\n        return this.privBytesSent;\n    }\n\n    // The number of bytes sent for the current recognition.\n    // Counter is reset to 0 each time recognition is started.\n    public get recognitionBytesSent(): number {\n        return this.privRecognitionBytesSent;\n    }\n\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\n        if (!!this.privServiceTelemetryListener) {\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\n        }\n    }\n\n    public startNewRecognition(): void {\n        this.privRecognitionBytesSent = 0;\n        this.privIsSpeechEnded = false;\n        this.privIsRecognizing = true;\n        this.privTurnStartAudioOffset = 0;\n        this.privLastRecoOffset = 0;\n        this.privRecogNumber++;\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n    }\n\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean): Promise<void> {\n        this.privAudioNode = audioNode;\n        this.privIsAudioNodeDetached = false;\n\n        if (isError) {\n            await this.onComplete();\n        } else {\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n        }\n    }\n\n    public onPreConnectionStart(authFetchEventId: string, connectionId: string): void {\n        this.privAuthFetchEventId = authFetchEventId;\n        this.privSessionId = connectionId;\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\n    }\n\n    public async onAuthCompleted(isError: boolean): Promise<void> {\n        if (isError) {\n            await this.onComplete();\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\n        if (statusCode === 200) {\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\n            if (!!this.privAudioNode) {\n                this.privAudioNode.replay();\n            }\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            this.privBytesSent = 0;\n            return;\n        } else if (statusCode === 403) {\n            await this.onComplete();\n        }\n    }\n\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\n        this.privTurnDeferral.resolve();\n\n        if (!continuousRecognition || this.isSpeechEnded) {\n            await this.onComplete();\n            this.privInTurn = false;\n        } else {\n            // Start a new request set.\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            this.privAudioNode.replay();\n        }\n    }\n\n    public onSpeechContext(): void {\n        this.privRequestId = createNoDashGuid();\n    }\n\n    public onServiceTurnStartResponse(): void {\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\n            // What? How are we starting a turn with another not done?\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            this.privTurnDeferral.promise.then().catch((): void => { });\n        }\n        this.privInTurn = true;\n        this.privTurnDeferral = new Deferred<void>();\n    }\n\n    public onHypothesis(offset: number): void {\n        if (!this.privHypothesisReceived) {\n            this.privHypothesisReceived = true;\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\n        }\n    }\n\n    public onPhraseRecognized(offset: number): void {\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\n        this.onServiceRecognized(offset);\n    }\n\n    public onServiceRecognized(offset: number): void {\n        this.privLastRecoOffset = offset;\n        this.privHypothesisReceived = false;\n        this.privAudioNode.shrinkBuffers(offset);\n        this.privConnectionAttempts = 0;\n    }\n\n    public onAudioSent(bytesSent: number): void {\n        this.privBytesSent += bytesSent;\n        this.privRecognitionBytesSent += bytesSent;\n    }\n\n    public onRetryConnection(): void {\n        this.privConnectionAttempts++;\n    }\n\n    public async dispose(): Promise<void> {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n            for (const detachable of this.privDetachables) {\n                await detachable.detach();\n            }\n\n            if (!!this.privServiceTelemetryListener) {\n                this.privServiceTelemetryListener.dispose();\n            }\n            this.privIsRecognizing = false;\n        }\n    }\n\n    public getTelemetry(): string {\n        if (this.privServiceTelemetryListener.hasTelemetry) {\n            return this.privServiceTelemetryListener.getTelemetry();\n        } else {\n            return null;\n        }\n    }\n\n    public async onStopRecognizing(): Promise<void> {\n        await this.onComplete();\n    }\n\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\n    public onSpeechEnded(): void {\n        this.privIsSpeechEnded = true;\n    }\n\n    protected onEvent(event: SpeechRecognitionEvent): void {\n        if (!!this.privServiceTelemetryListener) {\n            this.privServiceTelemetryListener.onEvent(event);\n        }\n        Events.instance.onEvent(event);\n    }\n\n    private async onComplete(): Promise<void> {\n        if (!!this.privIsRecognizing) {\n            this.privIsRecognizing = false;\n            await this.detachAudioNode();\n        }\n    }\n\n    private async detachAudioNode(): Promise<void> {\n        if (!this.privIsAudioNodeDetached) {\n            this.privIsAudioNodeDetached = true;\n            if (this.privAudioNode) {\n                await this.privAudioNode.detach();\n            }\n        }\n    }\n}\n"]}