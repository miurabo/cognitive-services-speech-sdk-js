{"version":3,"sources":["src/common.speech/CognitiveSubscriptionKeyAuthentication.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EACH,iBAAiB,GACpB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EACH,QAAQ,EAEX,MAAM,mBAAmB,CAAC;AAE3B;;GAEG;AACH,MAAM,OAAO,sCAAsC;IAG/C;;;;OAIG;IACH,YAAmB,eAAuB;QACtC,IAAI,CAAC,eAAe,EAAE;YAClB,MAAM,IAAI,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;;OAMG;IACH,6DAA6D;IACtD,KAAK,CAAC,gBAAwB;QACjC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;;OAMG;IACH,6DAA6D;IACtD,aAAa,CAAC,gBAAwB;QACzC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;CACJ","file":"CognitiveSubscriptionKeyAuthentication.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n} from \"../common/Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport {\n    AuthInfo,\n    IAuthentication\n} from \"./IAuthentication\";\n\n/**\n * @class\n */\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\n    private privAuthInfo: AuthInfo;\n\n    /**\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n     * @constructor\n     * @param {string} subscriptionKey - The subscription key\n     */\n    public constructor(subscriptionKey: string) {\n        if (!subscriptionKey) {\n            throw new ArgumentNullError(\"subscriptionKey\");\n        }\n\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public fetch(authFetchEventId: string): Promise<AuthInfo> {\n        return Promise.resolve(this.privAuthInfo);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo> {\n        return Promise.resolve(this.privAuthInfo);\n    }\n}\n"]}