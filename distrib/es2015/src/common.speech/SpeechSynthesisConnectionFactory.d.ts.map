{"version":3,"sources":["src/common.speech/SpeechSynthesisConnectionFactory.ts"],"names":[],"mappings":"AAOA,OAAO,EACH,WAAW,EAEd,MAAM,mBAAmB,CAAC;AAG3B,OAAO,EACH,QAAQ,EACR,iBAAiB,EAEpB,MAAM,WAAW,CAAC;AAEnB,OAAO,EAAE,2BAA2B,EAAE,MAAM,+BAA+B,CAAC;AAK5E,qBAAa,gCAAiC,YAAW,2BAA2B;IAEhF,OAAO,CAAC,QAAQ,CAAC,YAAY,CAA6C;IAEnE,MAAM,CACT,MAAM,EAAE,iBAAiB,EACzB,QAAQ,EAAE,QAAQ,EAClB,YAAY,CAAC,EAAE,MAAM,GAAG,WAAW;CA6B1C","file":"SpeechSynthesisConnectionFactory.d.ts","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    SynthesizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\n\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\n\n    public create(\n        config: SynthesizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        if (!endpoint) {\n            endpoint = host + this.synthesisUri;\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n        if (endpointId !== undefined) {\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n        }\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n    }\n}\n"]}