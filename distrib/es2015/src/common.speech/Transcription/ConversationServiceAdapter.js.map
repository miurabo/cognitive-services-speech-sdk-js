{"version":3,"sources":["src/common.speech/Transcription/ConversationServiceAdapter.ts"],"names":[],"mappings":"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","file":"ConversationServiceAdapter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionState,\n    createNoDashGuid,\n    Deferred,\n    IAudioSource,\n    IConnection,\n    MessageType,\n} from \"../../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    ConversationExpirationEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationResult,\n    ResultReason,\n    Translations\n} from \"../../sdk/Exports\";\nimport {\n    CognitiveTokenAuthentication,\n    IAuthentication,\n    IConnectionFactory,\n    RecognizerConfig,\n    ServiceRecognizerBase\n} from \"../Exports\";\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\nimport { ConversationRequestSession } from \"./ConversationRequestSession\";\nimport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs\n} from \"./ConversationTranslatorEventArgs\";\nimport {\n    ConversationTranslatorCommandTypes,\n    ConversationTranslatorMessageTypes,\n    IInternalParticipant\n} from \"./ConversationTranslatorInterfaces\";\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer\";\nimport {\n    CommandResponsePayload,\n    IParticipantPayloadResponse,\n    IParticipantsListPayloadResponse,\n    ITranslationResponsePayload,\n    ParticipantPayloadResponse,\n    ParticipantsListPayloadResponse,\n    SpeechResponsePayload,\n    TextResponsePayload\n} from \"./ServiceMessages/Exports\";\n\n/**\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\n */\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\n    private privConversationConnectionFactory: IConnectionFactory;\n    private privConversationAuthFetchEventId: string;\n    private privConversationAuthentication: IAuthentication;\n    private privConversationRequestSession: ConversationRequestSession;\n    private privConnectionConfigPromise: Promise<IConnection> = undefined;\n    private privConnectionLoop: Promise<void>;\n    private terminateMessageLoop: boolean;\n    private privLastPartialUtteranceId: string;\n    private privConversationIsDisposed: boolean;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\n\n        this.privLastPartialUtteranceId = \"\";\n        this.privConversationServiceConnector = conversationServiceConnector;\n        this.privConversationAuthentication = authentication;\n        this.receiveMessageOverride = (): Promise<void> => this.receiveConversationMessageOverride();\n        this.recognizeOverride = (): Promise<void> => this.noOp();\n        this.postConnectImplOverride = (connection: Promise<IConnection>): Promise<IConnection> => this.conversationConnectImpl(connection);\n        this.configConnectionOverride = (): Promise<IConnection> => this.configConnection();\n        this.disconnectOverride = (): Promise<void> => this.privDisconnect();\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\n        this.privConversationConnectionFactory = connectionFactory;\n        this.privConversationIsDisposed = false;\n    }\n\n    public isDisposed(): boolean {\n        return super.isDisposed() || this.privConversationIsDisposed;\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        this.privConversationIsDisposed = true;\n        if (this.privConnectionConfigPromise !== undefined) {\n            const connection: IConnection = await this.privConnectionConfigPromise;\n            await connection.dispose(reason);\n        }\n        await super.dispose(reason);\n    }\n\n    public async sendMessage(message: string): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        return connection.send(new ConversationConnectionMessage(\n            MessageType.Text,\n            message));\n    }\n\n    public async sendMessageAsync(message: string): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\n    }\n\n    protected privDisconnect(): Promise<void> {\n        if (this.terminateMessageLoop) {\n            return;\n        }\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\n            this.privConversationRequestSession.requestId,\n            CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        this.terminateMessageLoop = true;\n        return Promise.resolve();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/require-await\n    protected async processTypeSpecificMessages(): Promise<boolean> {\n        return true;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        this.terminateMessageLoop = true;\n\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\n            cancellationReason,\n            error,\n            errorCode,\n            undefined,\n            sessionId);\n\n        try {\n            if (!!this.privConversationServiceConnector.canceled) {\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\n            }\n        } catch {\n            // continue on error\n        }\n    }\n\n    /**\n     * Establishes a websocket connection to the end point.\n     */\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\n        this.privConnectionLoop = this.startMessageLoop();\n        return connection;\n    }\n\n    /**\n     * Process incoming websocket messages\n     */\n    private async receiveConversationMessageOverride(): Promise<void> {\n        if (this.isDisposed() || this.terminateMessageLoop) {\n            return Promise.resolve();\n        }\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\n\n        try {\n            const connection: IConnection = await this.fetchConnection();\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\n            if (this.isDisposed() || this.terminateMessageLoop) {\n                // We're done.\n                communicationCustodian.resolve();\n                return Promise.resolve();\n            }\n\n            if (!message) {\n                return this.receiveConversationMessageOverride();\n            }\n\n            const sessionId: string = this.privConversationRequestSession.sessionId;\n            const conversationMessageType: string = message.conversationMessageType.toLowerCase();\n            let sendFinal: boolean = false;\n\n            try {\n                switch (conversationMessageType) {\n                    case \"info\":\n                    case \"participant_command\":\n                    case \"command\":\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\n                        switch (commandPayload.command.toLowerCase()) {\n\n                            /**\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\n                             * The consuming client must wait for this message to arrive\n                             * before starting to send their own data.\n                             */\n                            case \"participantlist\":\n\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\n\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse): IInternalParticipant => {\n                                    const participant: IInternalParticipant = {\n                                        avatar: p.avatar,\n                                        displayName: p.nickname,\n                                        id: p.participantId,\n                                        isHost: p.ishost,\n                                        isMuted: p.ismuted,\n                                        isUsingTts: p.usetts,\n                                        preferredLanguage: p.locale\n                                    };\n                                    return participant;\n                                });\n\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\n                                            participantsPayload.muteAll, participantsResult, sessionId));\n                                }\n                                break;\n\n                            /**\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\n                             * This is sent at the start of the Conversation\n                             */\n                            case \"settranslatetolanguages\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\n                             * If sent by the participant the setting will effect only their own profanity level.\n                             * If sent by the host, the setting will effect all participants including the host.\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\n                             */\n                            case \"setprofanityfiltering\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetMute' is sent if the participant has been muted by the host.\n                             * Check the 'participantId' to determine if the current user has been muted.\n                             */\n                            case \"setmute\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setMute,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\n                             */\n                            case \"setmuteall\":\n\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\n                             */\n                            case \"roomexpirationwarning\":\n\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\n                             */\n                            case \"setusetts\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setUseTTS,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\n                             */\n                            case \"setlockstate\":\n\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'ChangeNickname' is received if a user changes their display name.\n                             * Any cached particpiants list should be updated to reflect the display name.\n                             */\n                            case \"changenickname\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.changeNickname,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'JoinSession' is sent when a user joins the Conversation.\n                             */\n                            case \"joinsession\":\n\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\n\n                                const joiningParticipant: IInternalParticipant = {\n                                    avatar: joinParticipantPayload.avatar,\n                                    displayName: joinParticipantPayload.nickname,\n                                    id: joinParticipantPayload.participantId,\n                                    isHost: joinParticipantPayload.ishost,\n                                    isMuted: joinParticipantPayload.ismuted,\n                                    isUsingTts: joinParticipantPayload.usetts,\n                                    preferredLanguage: joinParticipantPayload.locale,\n                                };\n\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantEventArgs(\n                                            joiningParticipant,\n                                            sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\n                             */\n                            case \"leavesession\":\n\n                                const leavingParticipant: IInternalParticipant = {\n                                    id: commandPayload.participantId\n                                };\n\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\n                             */\n                            case \"disconnectsession\":\n\n                                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                                const disconnectParticipant: IInternalParticipant = {\n                                    id: commandPayload.participantId\n                                };\n\n                                break;\n\n                            case \"token\":\n                                const token = new CognitiveTokenAuthentication(\n                                    (): Promise<string> => {\n                                        const authorizationToken = commandPayload.token;\n                                        return Promise.resolve(authorizationToken);\n                                    },\n                                    (): Promise<string> => {\n                                        const authorizationToken = commandPayload.token;\n                                        return Promise.resolve(authorizationToken);\n                                    });\n                                this.authentication = token;\n\n                                break;\n\n                            /**\n                             * Message not recognized.\n                             */\n                            default:\n                                break;\n                        }\n                        break;\n\n                    /**\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\n                     */\n                    case \"partial\":\n\n                    /**\n                     * 'final' (or 'phrase') represents a finalized speech message.\n                     */\n                    case \"final\":\n\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\n                        const conversationResultReason: ResultReason = (conversationMessageType === \"final\") ? ResultReason.TranslatedParticipantSpeech : ResultReason.TranslatingParticipantSpeech;\n\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\n                            this.getTranslations(speechPayload.translations),\n                            speechPayload.language,\n                            speechPayload.id,\n                            conversationResultReason,\n                            speechPayload.recognition,\n                            undefined,\n                            undefined,\n                            message.textBody,\n                            undefined);\n\n                        if (speechPayload.isFinal) {\n                            // check the length, sometimes empty finals are returned\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\n                                sendFinal = true;\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\n                                // send final as normal. We had a non-empty partial for this same utterance\n                                // so sending the empty final is important\n                                sendFinal = true;\n                            } else {\n                                // suppress unneeded final\n                            }\n\n                            if (sendFinal) {\n                                if (!!this.privConversationServiceConnector.translationReceived) {\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\n                                }\n                            }\n                        } else if (speechResult.text !== undefined) {\n                            this.privLastPartialUtteranceId = speechPayload.id;\n                            if (!!this.privConversationServiceConnector.translationReceived) {\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\n                            }\n                        }\n\n                        break;\n\n                    /**\n                     * \"translated_message\" is a text message or instant message (IM).\n                     */\n                    case \"translated_message\":\n\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\n                        // TODO: (Native parity) a result reason should be set based whether the participantId is ours or not\n\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\n                            this.getTranslations(textPayload.translations),\n                            textPayload.language,\n                            undefined,\n                            undefined,\n                            textPayload.originalText,\n                            undefined,\n                            undefined,\n                            undefined,\n                            message.textBody,\n                            undefined);\n\n                        if (!!this.privConversationServiceConnector.translationReceived) {\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\n                        }\n                        break;\n\n                    default:\n                        // ignore any unsupported message types\n                        break;\n                }\n            } catch (e) {\n                // continue\n            }\n            return this.receiveConversationMessageOverride();\n        } catch (e) {\n            this.terminateMessageLoop = true;\n        }\n\n        return communicationCustodian.promise;\n    }\n\n    private async startMessageLoop(): Promise<void> {\n        if (this.isDisposed()) {\n            return Promise.resolve();\n        }\n        this.terminateMessageLoop = false;\n\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\n\n        try {\n            const r = await messageRetrievalPromise;\n            return r;\n        } catch (error) {\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error as string);\n            return null;\n        }\n    }\n\n    // Takes an established websocket connection to the endpoint\n    private configConnection(): Promise<IConnection> {\n        if (this.isDisposed()) {\n            return Promise.resolve<IConnection>(undefined);\n        }\n        if (this.privConnectionConfigPromise !== undefined) {\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionConfigPromise = undefined;\n                    return this.configConnection();\n                }\n                return this.privConnectionConfigPromise;\n            }, (): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionConfigPromise = undefined;\n                return this.configConnection();\n            });\n        }\n        if (this.terminateMessageLoop) {\n            return Promise.resolve<IConnection>(undefined);\n        }\n\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): IConnection => connection);\n\n        return this.privConnectionConfigPromise;\n    }\n\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\n        let translations: Translations;\n\n        if (undefined !== serviceResultTranslations) {\n            translations = new Translations();\n            for (const translation of serviceResultTranslations) {\n                translations.set(translation.lang, translation.translation);\n            }\n        }\n\n        return translations;\n    }\n}\n"]}