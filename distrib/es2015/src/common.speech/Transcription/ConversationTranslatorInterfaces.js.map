{"version":3,"sources":["src/common.speech/Transcription/ConversationTranslatorInterfaces.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAqElC,8CAA8C;AAC9C,MAAM,OAAO,oBAAoB;IAE7B,YAA0B,eAAuC,EAAE,EAAS,IAAa;QAA/D,iBAAY,GAAZ,YAAY,CAA6B;QAAS,SAAI,GAAJ,IAAI,CAAS;IAEzF,CAAC;IAED;;;OAGG;IACI,sBAAsB,CAAC,KAA2B;QACrD,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,OAAO;SACV;QAED,MAAM,MAAM,GAAW,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC1D,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE;YACb,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;SAC9C;aAAM;YACH,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjC;QAED,yBAAyB;QACzB,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACI,mBAAmB,CAAC,EAAU;QACjC,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAuB,EAAW,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1F,CAAC;IAED;;;OAGG;IACI,cAAc,CAAC,EAAU;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAuB,EAAW,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACrF,CAAC;IAED;;OAEG;IACI,iBAAiB,CAAC,EAAU;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAuB,EAAW,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IACpG,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAuB,EAAW,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,IAAI,CAAE,CAAC;IAC5F,CAAC;IAED;;OAEG;IACH,IAAW,EAAE;QACT,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;CACJ;AAoHD;;GAEG;AACH,MAAM,CAAC,MAAM,kCAAkC,GAAG;IAC9C,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;IACZ,cAAc,EAAE,iBAAiB;IACjC,SAAS,EAAE,YAAY;IACvB,OAAO,EAAE,SAAS;IAClB,kBAAkB,EAAE,qBAAqB;IACzC,iBAAiB,EAAE,oBAAoB;CAC1C,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,kCAAkC,GAAG;IAC9C,cAAc,EAAE,gBAAgB;IAChC,iBAAiB,EAAE,mBAAmB;IACtC,gBAAgB,EAAE,kBAAkB;IACpC,eAAe,EAAE,iBAAiB;IAClC,WAAW,EAAE,aAAa;IAC1B,YAAY,EAAE,cAAc;IAC5B,eAAe,EAAE,iBAAiB;IAClC,qBAAqB,EAAE,uBAAuB;IAC9C,YAAY,EAAE,cAAc;IAC5B,OAAO,EAAE,SAAS;IAClB,UAAU,EAAE,YAAY;IACxB,qBAAqB,EAAE,uBAAuB;IAC9C,uBAAuB,EAAE,yBAAyB;IAClD,SAAS,EAAE,WAAW;CACzB,CAAC","file":"ConversationTranslatorInterfaces.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionEventArgs,\n    ConversationExpirationEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    SessionEventArgs,\n    } from \"../../sdk/Exports\";\n// import { ConversationClient } from \"./ConversationConnection\";\nimport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\n\n/**\n * Internal conversation data\n */\nexport interface IInternalConversation {\n    // the token to use for connecting to the Speech Service\n    cognitiveSpeechAuthToken: string;\n    // the region to use for connecting to the Speech Service\n    cognitiveSpeechRegion: string;\n    // the unique id of the user who started or joined the Conversation\n    participantId: string;\n    // a descriptive name for the Conversation\n    name: string;\n    // a descriptive name for the Conversation\n    description: string;\n    // the speech model ID for custom speech\n    speechModel: string;\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\n    modalities: number;\n    // ?\n    isApproved: boolean;\n    // the mute flag has been set at conversation level and only the host can speak\n    isMuted: boolean;\n    // the 5 character conversation Id\n    roomId: string;\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\n    avatar: string;\n    // the token to use when calling the websocket\n    token: string;\n    // used for tracking the session and help with troubleshooting problems in the logs\n    correlationId: string;\n    // extracted from the headers\n    requestId: string;\n    // set programmatically\n    isHost: boolean;\n}\n\n/**\n * The user who is participating in the conversation.\n */\nexport interface IInternalParticipant {\n    avatar?: string;\n    displayName?: string;\n    id?: string;\n    isHost?: boolean;\n    isMuted?: boolean;\n    isUsingTts?: boolean;\n    profanity?: boolean;\n    preferredLanguage?: string;\n    translateToLanguages?: string[];\n    voice?: string;\n}\n\n/** Users participating in the conversation */\nexport class InternalParticipants {\n\n    public constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\n\n    }\n\n    /**\n     * Add or update a participant\n     * @param value\n     */\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\n        if (value === undefined) {\n            return;\n        }\n\n        const exists: number = this.getParticipantIndex(value.id);\n        if (exists > -1) {\n            this.participants.splice(exists, 1, value);\n        } else {\n            this.participants.push(value);\n        }\n\n        // ensure it was added ok\n        return this.getParticipant(value.id);\n    }\n\n    /**\n     * Find the participant's position in the participants list.\n     * @param id\n     */\n    public getParticipantIndex(id: string): number {\n        return this.participants.findIndex((p: IInternalParticipant): boolean => p.id === id);\n    }\n\n    /**\n     * Find the participant by id.\n     * @param id\n     */\n    public getParticipant(id: string): IInternalParticipant {\n        return this.participants.find((p: IInternalParticipant): boolean => p.id === id);\n    }\n\n    /**\n     * Remove a participant from the participants list.\n     */\n    public deleteParticipant(id: string): void {\n        this.participants = this.participants.filter((p: IInternalParticipant): boolean => p.id !== id);\n    }\n\n    /**\n     * Helper to return the conversation host.\n     */\n    public get host(): IInternalParticipant {\n        return this.participants.find((p: IInternalParticipant): boolean => p.isHost === true );\n    }\n\n    /**\n     * Helper to return the current user.\n     */\n    public get me(): IInternalParticipant {\n        return this.getParticipant(this.meId);\n    }\n}\n\n/**\n * Recognizer for handling Conversation Translator websocket messages\n */\nexport interface ConversationRecognizer {\n    isDisposed(): boolean;\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\n    cancelSpeech?: () => Promise<void>;\n    close?: () => Promise<void>;\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\n    connected?: (e: ConnectionEventArgs) => void;\n    disconnected?: (e: ConnectionEventArgs) => void;\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\n}\n\n/**\n * Error message returned from the Conversation Translator websocket\n */\nexport interface IConversationResponseErrorMessage {\n    code: string;\n    message: string;\n}\n\n/**\n * Error returned from the Conversation Translator websocket\n */\nexport interface IConversationResponseError {\n    error: IConversationResponseErrorMessage;\n}\n\n/**\n * Base message command\n */\nexport interface IClientMessage {\n    type: any;\n}\n\n/**\n * Command message\n */\nexport interface ICommandMessage extends IClientMessage {\n    command?: string;\n}\n\n/**\n * Text message command\n */\nexport interface IInstantMessageCommand extends ICommandMessage {\n    roomId: string;\n    nickname?: string;\n    participantId: string;\n    text: string;\n}\n\n/**\n * Lock command\n */\nexport interface ILockConversationCommand extends ICommandMessage {\n    id?: string; // incoming ws\n    nickname?: string; // incoming ws\n    participantId: string; // host - incoming ws\n    roomid: string;\n    value: boolean;\n}\n\n/**\n * Mute all command\n */\nexport interface IMuteAllCommand extends ICommandMessage {\n    roomid: string;\n    nickname?: string;  // incoming ws\n    participantId: string; // host\n    value: boolean;\n    id?: string; // incoming ws\n}\n\n/**\n * Mute participant command\n */\nexport interface IMuteCommand extends ICommandMessage {\n    roomid: string;\n    nickname?: string;\n    participantId: string; // participant\n    value: boolean;\n    id?: string; // incoming ws\n}\n\n/**\n * Remove participant command\n */\nexport interface IEjectParticipantCommand extends ICommandMessage {\n    roomid: string;\n    participantId: string; // participant\n}\n\n/**\n * Change nickname command\n */\nexport interface IChangeNicknameCommand extends ICommandMessage {\n    roomid: string;\n    participantId: string;\n    nickname: string;\n    value: string;\n}\n\n/**\n * List of command message types\n */\nexport const ConversationTranslatorMessageTypes = {\n    command: \"command\",\n    final: \"final\",\n    info: \"info\",\n    instantMessage: \"instant_message\",\n    keepAlive: \"keep_alive\",\n    partial: \"partial\",\n    participantCommand: \"participant_command\",\n    translatedMessage: \"translated_message\"\n};\n\n/**\n * List of command types\n */\nexport const ConversationTranslatorCommandTypes = {\n    changeNickname: \"ChangeNickname\",\n    disconnectSession: \"DisconnectSession\",\n    ejectParticipant: \"EjectParticipant\",\n    instant_message: \"instant_message\",\n    joinSession: \"JoinSession\",\n    leaveSession: \"LeaveSession\",\n    participantList: \"ParticipantList\",\n    roomExpirationWarning: \"RoomExpirationWarning\",\n    setLockState: \"SetLockState\",\n    setMute: \"SetMute\",\n    setMuteAll: \"SetMuteAll\",\n    setProfanityFiltering: \"SetProfanityFiltering\",\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\n    setUseTTS: \"SetUseTTS\"\n};\n\n/**\n * HTTP response helper\n */\nexport interface IResponse {\n    ok: boolean;\n    status: number;\n    statusText: string;\n    data: string;\n    json: <T>() => T;\n    headers: string;\n}\n"]}