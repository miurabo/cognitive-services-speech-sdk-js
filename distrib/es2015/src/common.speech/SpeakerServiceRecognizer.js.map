{"version":3,"sources":["src/common.speech/SpeakerServiceRecognizer.ts"],"names":[],"mappings":"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","file":"SpeakerServiceRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport {\n    Deferred,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    MessageType,\n} from \"../common/Exports\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport { SpeakerRecognitionModel } from \"../sdk/SpeakerRecognitionModel\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    SpeakerRecognitionResult,\n    SpeakerRecognizer,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SessionEventArgs,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    ISpeechConfigAudioDevice,\n    SpeakerResponse,\n    ServiceRecognizerBase,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\ninterface SpeakerContext {\n    scenario: string;\n    profileIds: string[];\n    features: {\n        interimResult: string;\n        progressiveDetection: string;\n    };\n}\n\n// eslint-disable-next-line max-classes-per-file\nexport class SpeakerServiceRecognizer extends ServiceRecognizerBase {\n    private privSpeakerRecognizer: SpeakerRecognizer;\n    private privSpeakerAudioSource: IAudioSource;\n    private privResultDeferral: Deferred<SpeakerRecognitionResult>;\n    private privSpeakerModel: SpeakerRecognitionModel;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: SpeakerRecognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n        this.privSpeakerRecognizer = recognizer;\n        this.privSpeakerAudioSource = audioSource;\n        this.recognizeSpeaker = (model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> => this.recognizeSpeakerOnce(model);\n        this.sendPrePayloadJSONOverride = (): Promise<void> => this.noOp();\n    }\n\n    protected processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        let processed: boolean = false;\n\n        const resultProps: PropertyCollection = new PropertyCollection();\n        if (connectionMessage.messageType === MessageType.Text) {\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        }\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speaker.response\":\n                const response: SpeakerResponse = JSON.parse(connectionMessage.textBody) as SpeakerResponse;\n                let result: SpeakerRecognitionResult;\n                if (response.status.statusCode.toLowerCase() !== \"success\") {\n                    result = new SpeakerRecognitionResult(\n                        response,\n                        ResultReason.Canceled,\n                        CancellationErrorCode.ServiceError,\n                        response.status.reason\n                        );\n                } else {\n                    result = new SpeakerRecognitionResult(\n                        response,\n                        ResultReason.RecognizedSpeaker,\n                        );\n                }\n                if (!!this.privResultDeferral) {\n                    this.privResultDeferral.resolve(result);\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        const defferal = new Deferred<boolean>();\n        defferal.resolve(processed);\n        return defferal.promise;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privResultDeferral) {\n            const result: SpeakerRecognitionResult = new SpeakerRecognitionResult(\n                {\n                    scenario: this.privSpeakerModel.scenario,\n                    status: { statusCode: error, reason: error }\n                },\n                ResultReason.Canceled,\n                errorCode,\n                error\n                );\n            try {\n                this.privResultDeferral.resolve(result);\n            } catch (error) {\n                this.privResultDeferral.reject(error as string);\n            }\n        }\n    }\n\n    public async recognizeSpeakerOnce(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\n        this.privSpeakerModel = model;\n        this.voiceProfileType = model.scenario;\n        if (!this.privResultDeferral) {\n            this.privResultDeferral = new Deferred<SpeakerRecognitionResult>();\n        }\n        this.privRequestSession.startNewRecognition();\n        this.privRequestSession.listenForServiceTelemetry(this.privSpeakerAudioSource.events);\n\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\n\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n        const conPromise: Promise<IConnection> = this.connectImpl();\n\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages(this.extractSpeakerContext(model));\n\n        const node: IAudioStreamNode = await this.privSpeakerAudioSource.attach(this.privRequestSession.audioNodeId);\n        const format: AudioStreamFormatImpl = await this.privSpeakerAudioSource.format;\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privSpeakerAudioSource.deviceInfo;\n\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\n\n        try {\n            await conPromise;\n            await preAudioPromise;\n        } catch (err) {\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, err as string);\n        }\n\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n        if (!!this.privRecognizer.sessionStarted) {\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n        }\n\n        void this.receiveMessage();\n        const audioSendPromise = this.sendAudio(audioNode);\n\n        // /* eslint-disable no-empty */\n        audioSendPromise.then((): void => { /* add? return true;*/ }, (error: string): void => {\n            this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n        });\n\n        return this.privResultDeferral.promise;\n    }\n\n    private async sendPreAudioMessages(context: SpeakerContext): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        await this.sendSpeakerRecognition(connection, context);\n        // await this.sendWaveHeader(connection);\n    }\n\n    private async sendSpeakerRecognition(connection: IConnection, context: SpeakerContext): Promise<void> {\n        const speakerContextJson = JSON.stringify(context);\n        return connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"speaker.context\",\n            this.privRequestSession.requestId,\n            \"application/json; charset=utf-8\",\n            speakerContextJson));\n    }\n\n    private extractSpeakerContext(model: SpeakerRecognitionModel): SpeakerContext {\n        return {\n            features: {\n                interimResult: \"enabled\",\n                progressiveDetection: \"disabled\",\n            },\n            profileIds: model.profileIds,\n            scenario: model.scenario,\n        };\n    }\n}\n"]}