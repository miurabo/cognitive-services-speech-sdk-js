{"version":3,"sources":["src/common.speech/SpeechSynthesisConnectionFactory.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EACH,SAAS,EACT,mBAAmB,EACtB,MAAM,2BAA2B,CAAC;AAKnC,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAGH,yBAAyB,EAC5B,MAAM,WAAW,CAAC;AACnB,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAE5C,OAAO,EACH,mBAAmB,EACtB,MAAM,uBAAuB,CAAC;AAE/B,MAAM,OAAO,gCAAgC;IAA7C;QAEqB,iBAAY,GAAW,iCAAiC,CAAC;IAkC9E,CAAC;IAhCU,MAAM,CACT,MAAyB,EACzB,QAAkB,EAClB,YAAqB;QAErB,IAAI,QAAQ,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,gCAAgC,EAAE,SAAS,CAAC,CAAC;QAC7G,MAAM,MAAM,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;QAC3G,MAAM,UAAU,GAAW,qBAAqB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,kCAAkC,EAAE,SAAS,CAAC,CAAC;QAC3G,MAAM,UAAU,GAAG,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;QAChE,MAAM,IAAI,GAAW,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,4BAA4B,EAAE,QAAQ,GAAG,MAAM,GAAG,GAAG,GAAG,UAAU,GAAG,SAAS,GAAG,UAAU,CAAC,CAAC;QAE3J,MAAM,WAAW,GAA8B,EAAE,CAAC;QAElD,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;SACvC;QAED,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,QAAQ,CAAC,KAAK,KAAK,SAAS,IAAI,QAAQ,CAAC,KAAK,KAAK,EAAE,EAAE;YACvD,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;SACjD;QACD,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;QACjD,IAAI,UAAU,KAAK,SAAS,EAAE;YAC1B,OAAO,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,GAAG,UAAU,CAAC;SACrE;QAED,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;QAEhF,MAAM,iBAAiB,GAAY,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,mCAAmC,EAAE,OAAO,CAAC,KAAK,MAAM,CAAC;QAC1H,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,yBAAyB,EAAE,EAAE,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;IAClL,CAAC;CACJ","file":"SpeechSynthesisConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    SynthesizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\n\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\n\n    public create(\n        config: SynthesizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        if (!endpoint) {\n            endpoint = host + this.synthesisUri;\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n        if (endpointId !== undefined) {\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n        }\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n    }\n}\n"]}