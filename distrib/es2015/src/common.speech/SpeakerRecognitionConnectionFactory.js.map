{"version":3,"sources":["src/common.speech/SpeakerRecognitionConnectionFactory.ts"],"names":[],"mappings":"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","file":"SpeakerRecognitionConnectionFactory.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport {\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    RecognizerConfig,\n    WebsocketMessageFormatter,\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\n\nclass SpeakerRecognitionConnectionFactoryBase extends ConnectionFactoryBase {\n\n    public create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        endpointPath: string,\n        connectionId?: string): IConnection {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `wss://${region}.spr-frontend.speech${hostSuffix}`);\n            const scenario: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_SpeakerIdMode, \"TextIndependentIdentification\");\n            endpoint = `${host}/speaker/ws/${this.scenarioToPath(scenario)}/${endpointPath}`;\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            format: \"simple\",\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n        };\n\n        this.setCommonUrlParams(config, queryParams, endpoint);\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n        headers[HeaderNames.SpIDAuthKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key);\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n    private scenarioToPath(mode: string): string {\n        switch (mode) {\n            case \"TextIndependentVerification\":\n            case \"2\":\n                return \"verification/text-independent\";\n            case \"TextDependentVerification\":\n            case \"1\":\n                return \"verification/text-dependent\";\n            default:\n                return \"identification/text-independent\";\n        }\n    }\n}\n\nexport class SpeakerRecognitionConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\n        return super.create(config, authInfo, \"recognition\", connectionId);\n    }\n}\n\nexport class VoiceProfileConnectionFactory extends SpeakerRecognitionConnectionFactoryBase {\n    public create( config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\n        return super.create(config, authInfo, \"profile\", connectionId);\n    }\n}\n\n"]}