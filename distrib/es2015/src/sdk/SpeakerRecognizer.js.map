{"version":3,"sources":["src/sdk/SpeakerRecognizer.ts"],"names":[],"mappings":"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","file":"SpeakerRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeakerRecognitionConnectionFactory,\n    SpeakerServiceRecognizer,\n    SpeechServiceConfig\n} from \"../common.speech/Exports\";\nimport { SpeakerRecognitionModel } from \"./SpeakerRecognitionModel\";\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeakerIdentificationModel,\n    SpeakerRecognitionResult,\n    SpeakerVerificationModel,\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nexport class SpeakerRecognizer extends Recognizer {\n    protected privProperties: PropertyCollection;\n    private privDisposedSpeakerRecognizer: boolean;\n    private privAudioConfigImpl: AudioConfigImpl;\n    /**\n     * Initializes an instance of the SpeakerRecognizer.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n\n        super(audioConfig, configImpl.properties, new SpeakerRecognitionConnectionFactory());\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n\n        this.privDisposedSpeakerRecognizer = false;\n        this.privProperties = configImpl.properties;\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * The collection of properties and their values defined for this SpeakerRecognizer.\n     * @member SpeakerRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Get recognition result for model using given audio\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @async\n     * @param {SpeakerIdentificationModel | SpeakerVerificationModel} model Model containing Voice Profiles to be identified\n     * @param cb - Callback invoked once result is returned.\n     * @param err - Callback invoked in case of an error.\n     */\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n\n        return this.recognizeSpeakerOnceAsyncImpl(model);\n    }\n\n    /**\n     * Included for compatibility\n     * @member SpeakerRecognizer.prototype.close\n     * @function\n     * @public\n     * @async\n     */\n    public async close(): Promise<void> {\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n        await this.dispose(true);\n    }\n\n    protected async recognizeSpeakerOnceAsyncImpl(model: SpeakerRecognitionModel): Promise<SpeakerRecognitionResult> {\n        Contracts.throwIfDisposed(this.privDisposedSpeakerRecognizer);\n\n        await this.implRecognizerStop();\n        const result: SpeakerRecognitionResult = await this.privReco.recognizeSpeaker(model);\n        await this.implRecognizerStop();\n\n        return result;\n    }\n\n    protected async implRecognizerStop(): Promise<void> {\n        if (this.privReco) {\n            await this.privReco.stopRecognizing();\n        }\n        return;\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new SpeakerServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n    }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedSpeakerRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedSpeakerRecognizer = true;\n            await super.dispose(disposing);\n        }\n    }\n}\n"]}