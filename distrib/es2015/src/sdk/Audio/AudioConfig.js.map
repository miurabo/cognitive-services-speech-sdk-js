{"version":3,"sources":["src/sdk/Audio/AudioConfig.ts"],"names":[],"mappings":"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","file":"AudioConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\n\nimport { PathLike } from \"fs\";\nimport {\n    FileAudioSource,\n    MicAudioSource,\n    PcmRecorder,\n} from \"../../common.browser/Exports\";\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\nimport {\n    AudioSourceEvent,\n    EventSource,\n    IAudioDestination,\n    IAudioSource,\n    IAudioStreamNode\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioInputStream,\n    AudioOutputStream,\n    AudioStreamFormat,\n    IPlayer,\n    PullAudioInputStreamCallback,\n    PullAudioOutputStream,\n    PushAudioOutputStream,\n    PushAudioOutputStreamCallback,\n    SpeakerAudioDestination\n} from \"../Exports\";\nimport { AudioFileWriter } from \"./AudioFileWriter\";\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\nexport abstract class AudioConfig {\n    /**\n     * Creates an AudioConfig object representing the default microphone on the system.\n     * @member AudioConfig.fromDefaultMicrophoneInput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromDefaultMicrophoneInput(): AudioConfig {\n        const pcmRecorder = new PcmRecorder(true);\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n    }\n\n    /**\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\n     * @member AudioConfig.fromMicrophoneInput\n     * @function\n     * @public\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n     * Default microphone is used the value is omitted.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\n        const pcmRecorder = new PcmRecorder(true);\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\n    }\n\n    /**\n     * Creates an AudioConfig object representing the specified file.\n     * @member AudioConfig.fromWavFileInput\n     * @function\n     * @public\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\n        return new AudioConfigImpl(new FileAudioSource(file, name));\n    }\n\n    /**\n     * Creates an AudioConfig object representing the specified stream.\n     * @member AudioConfig.fromStreamInput\n     * @function\n     * @public\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\n     * stream. Currently, only WAV / PCM is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\n        | MediaStream): AudioConfig {\n        if (audioStream instanceof PullAudioInputStreamCallback) {\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));\n        }\n\n        if (audioStream instanceof AudioInputStream) {\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\n        }\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\n            const pcmRecorder = new PcmRecorder(false);\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Creates an AudioConfig object representing the default speaker.\n     * @member AudioConfig.fromDefaultSpeakerOutput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n    public static fromDefaultSpeakerOutput(): AudioConfig {\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\n    }\n\n    /**\n     * Creates an AudioConfig object representing the custom IPlayer object.\n     * You can use the IPlayer object to control pause, resume, etc.\n     * @member AudioConfig.fromSpeakerOutput\n     * @function\n     * @public\n     * @param {IPlayer} player - the IPlayer object for playback.\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.12.0\n     */\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\n        if (player === undefined) {\n            return AudioConfig.fromDefaultSpeakerOutput();\n        }\n        if (player instanceof SpeakerAudioDestination) {\n            return new AudioOutputConfigImpl(player);\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Creates an AudioConfig object representing a specified output audio file\n     * @member AudioConfig.fromAudioFileOutput\n     * @function\n     * @public\n     * @param {PathLike} filename - the filename of the output audio file\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\n    }\n\n    /**\n     * Creates an AudioConfig object representing a specified audio output stream\n     * @member AudioConfig.fromStreamOutput\n     * @function\n     * @public\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n     * stream.\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream));\n        }\n\n        if (audioStream instanceof PushAudioOutputStream) {\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\n        }\n\n        if (audioStream instanceof PullAudioOutputStream) {\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioConfig.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n    /**\n     * Sets an arbitrary property.\n     * @member SpeechConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to set.\n     * @param {string} value - The new value of the property.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Returns the current value of an arbitrary property.\n     * @member SpeechConfig.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to query.\n     * @param {string} def - The value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public abstract getProperty(name: string, def?: string): string;\n\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\n    private privSource: IAudioSource;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {IAudioSource} source - An audio source.\n     */\n    public constructor(source: IAudioSource) {\n        super();\n        this.privSource = source;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return this.privSource.format;\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, err?: (error: string) => void): void {\n        this.privSource.turnOff().then((): void => {\n            if (!!cb) {\n                cb();\n            }\n        }, (error: string): void => {\n            if (!!err) {\n                err(error);\n            }\n        });\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.id\n     * @function\n     * @public\n     */\n    public id(): string {\n        return this.privSource.id();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.turnOn\n     * @function\n     * @public\n     * @returns {Promise<void>} A promise.\n     */\n    public turnOn(): Promise<void> {\n        return this.privSource.turnOn();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.attach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     * @returns {Promise<IAudioStreamNode>} A promise.\n     */\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        return this.privSource.attach(audioNodeId);\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.detach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     */\n    public detach(audioNodeId: string): void {\n        return this.privSource.detach(audioNodeId);\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.turnOff\n     * @function\n     * @public\n     * @returns {Promise<void>} A promise.\n     */\n    public turnOff(): Promise<void> {\n        return this.privSource.turnOff();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.events\n     * @function\n     * @public\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n     */\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privSource.events;\n    }\n\n    public setProperty(name: string, value: string): void {\n        Contracts.throwIfNull(value, \"value\");\n\n        if (undefined !== this.privSource.setProperty) {\n            this.privSource.setProperty(name, value);\n        } else {\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\n        }\n\n    }\n\n    public getProperty(name: string, def?: string): string {\n        if (undefined !== this.privSource.getProperty) {\n            return this.privSource.getProperty(name, def);\n        } else {\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\n        }\n\n        return def;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return this.privSource.deviceInfo;\n    }\n}\n\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\n    private privDestination: IAudioDestination;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {IAudioDestination} destination - An audio destination.\n     */\n    public constructor(destination: IAudioDestination) {\n        super();\n        this.privDestination = destination;\n    }\n\n    public set format(format: AudioStreamFormat) {\n        this.privDestination.format = format;\n    }\n\n    public write(buffer: ArrayBuffer): void {\n        this.privDestination.write(buffer);\n    }\n\n    public close(): void {\n        this.privDestination.close();\n    }\n\n    public id(): string {\n        return this.privDestination.id();\n    }\n\n    public setProperty(): void {\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n\n    public getProperty(): string {\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n}\n"]}