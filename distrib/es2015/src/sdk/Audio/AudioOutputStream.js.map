{"version":3,"sources":["src/sdk/Audio/AudioOutputStream.ts"],"names":[],"mappings":"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","file":"AudioOutputStream.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n    createNoDashGuid,\n    IAudioDestination,\n    IStreamChunk,\n    Stream,\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioStreamFormat,\n    PushAudioOutputStreamCallback\n} from \"../Exports\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\n\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\nexport abstract class AudioOutputStream {\n\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() {\n        return;\n    }\n\n    /**\n     * Sets the format of the AudioOutputStream\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\n     * @member AudioOutputStream.prototype.format\n     */\n    public abstract set format(format: AudioStreamFormat);\n\n    /**\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\n     * @member AudioOutputStream.createPullStream\n     * @function\n     * @public\n     * @returns {PullAudioOutputStream} The audio output stream being created.\n     */\n    public static createPullStream(): PullAudioOutputStream {\n        return PullAudioOutputStream.create();\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioOutputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\n\n    /**\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\n     * @member PullAudioOutputStream.create\n     * @function\n     * @public\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\n     */\n    public static create(): PullAudioOutputStream {\n        return new PullAudioOutputStreamImpl();\n    }\n\n    /**\n     * Reads audio data from the internal buffer.\n     * @member PullAudioOutputStream.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n     * @returns {Promise<number>} Audio buffer length has been read.\n     */\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\n\n    /**\n     * Closes the stream.\n     * @member PullAudioOutputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\n    private privFormat: AudioOutputFormatImpl;\n    private privId: string;\n    private privStream: Stream<ArrayBuffer>;\n    private privLastChunkView: Int8Array;\n\n    /**\n     * Creates and initializes an instance with the given values.\n     * @constructor\n     */\n    public constructor() {\n        super();\n        this.privId = createNoDashGuid();\n        this.privStream = new Stream<ArrayBuffer>();\n    }\n\n    /**\n     * Sets the format information to the stream. For internal use only.\n     * @param {AudioStreamFormat} format - the format to be set.\n     */\n    public set format(format: AudioStreamFormat) {\n        if (format === undefined || format === null) {\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\n        }\n        this.privFormat = format as AudioOutputFormatImpl;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privFormat;\n    }\n\n    /**\n     * Checks if the stream is closed\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\n     * @property\n     * @public\n     */\n    public get isClosed(): boolean {\n        return this.privStream.isClosed;\n    }\n\n    /**\n     * Gets the id of the stream\n     * @member PullAudioOutputStreamImpl.prototype.id\n     * @property\n     * @public\n     */\n    public id(): string {\n        return this.privId;\n    }\n\n    /**\n     * Reads audio data from the internal buffer.\n     * @member PullAudioOutputStreamImpl.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n     * @returns {Promise<number>} - Audio buffer length has been read.\n     */\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\n        const intView: Int8Array = new Int8Array(dataBuffer);\n        let totalBytes: number = 0;\n\n        if (this.privLastChunkView !== undefined) {\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n                return Promise.resolve(dataBuffer.byteLength);\n            }\n            intView.set(this.privLastChunkView);\n            totalBytes = this.privLastChunkView.length;\n            this.privLastChunkView = undefined;\n        }\n\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\n            if (chunk !== undefined && !chunk.isEnd) {\n                let tmpBuffer: ArrayBuffer;\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n                } else {\n                    tmpBuffer = chunk.buffer;\n                }\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\n                totalBytes += tmpBuffer.byteLength;\n            } else {\n                this.privStream.readEnded();\n            }\n        }\n        return totalBytes;\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PullAudioOutputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public write(dataBuffer: ArrayBuffer): void {\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n        this.privStream.writeStreamChunk({\n            buffer: dataBuffer,\n            isEnd: false,\n            timeReceived: Date.now()\n        });\n    }\n\n    /**\n     * Closes the stream.\n     * @member PullAudioOutputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privStream.close();\n    }\n}\n\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\n    /**\n     * Creates and initializes and instance.\n     * @constructor\n     */\n    protected constructor() {\n        super();\n    }\n\n    /**\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n     * write() and close() methods.\n     * @member PushAudioOutputStream.create\n     * @function\n     * @public\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n     * derived from PushAudioOutputStreamCallback\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\n     */\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\n        return new PushAudioOutputStreamImpl(callback);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member PushAudioOutputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n}\n\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\n    private readonly privId: string;\n    private privCallback: PushAudioOutputStreamCallback;\n\n    /**\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n     * read() and close() methods.\n     * @constructor\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n     * derived from PushAudioOutputStreamCallback\n     */\n    public constructor(callback: PushAudioOutputStreamCallback) {\n        super();\n        this.privId = createNoDashGuid();\n        this.privCallback = callback;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    public set format(format: AudioStreamFormat) { }\n\n    public write(buffer: ArrayBuffer): void {\n        if (!!this.privCallback.write) {\n            this.privCallback.write(buffer);\n        }\n    }\n\n    public close(): void {\n        if (!!this.privCallback.close) {\n            this.privCallback.close();\n        }\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n}\n"]}