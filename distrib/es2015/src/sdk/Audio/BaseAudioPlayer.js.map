{"version":3,"sources":["src/sdk/Audio/BaseAudioPlayer.ts"],"names":[],"mappings":"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","file":"BaseAudioPlayer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"../../common/Error\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\n/**\n * Base audio player class\n * TODO: Plays only PCM for now.\n * @class\n */\nexport class BaseAudioPlayer {\n\n    private audioContext: AudioContext = null;\n    private gainNode: GainNode = null;\n    private audioFormat: AudioStreamFormatImpl;\n    private autoUpdateBufferTimer: any = 0;\n    private samples: Float32Array;\n    private startTime: number;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\n     */\n    public constructor(audioFormat?: AudioStreamFormat) {\n        if (audioFormat === undefined) {\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\n        }\n        this.init(audioFormat);\n    }\n\n    /**\n     * play Audio sample\n     * @param newAudioData audio data to be played.\n     */\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\n        try {\n            this.ensureInitializedContext();\n            const audioData = this.formatAudioData(newAudioData);\n            const newSamplesData = new Float32Array(this.samples.length + audioData.length);\n            newSamplesData.set(this.samples, 0);\n            newSamplesData.set(audioData, this.samples.length);\n            this.samples = newSamplesData;\n            if (!!cb) {\n                cb();\n            }\n        } catch (e) {\n            if (!!err) {\n                err(e as string);\n            }\n        }\n    }\n\n    /**\n     * stops audio and clears the buffers\n     */\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\n        if (this.audioContext !== null) {\n            this.samples = new Float32Array();\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            clearInterval(this.autoUpdateBufferTimer);\n            this.audioContext.close().then((): void => {\n                if (!!cb) {\n                    cb();\n                }\n            }, (error: string): void => {\n                if (!!err) {\n                    err(error);\n                }\n            });\n            this.audioContext = null;\n        }\n    }\n\n    private init(audioFormat: AudioStreamFormat): void {\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\n        this.samples = new Float32Array();\n    }\n\n    private ensureInitializedContext(): void {\n        if (this.audioContext === null) {\n            this.createAudioContext();\n            const timerPeriod = 200;\n            this.autoUpdateBufferTimer = setInterval((): void => {\n                this.updateAudioBuffer();\n            }, timerPeriod);\n        }\n    }\n\n    private createAudioContext(): void {\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\n\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\n        // to control the volume, not likely\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = 1;\n        this.gainNode.connect(this.audioContext.destination);\n        this.startTime = this.audioContext.currentTime;\n    }\n\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\n        switch (this.audioFormat.bitsPerSample) {\n            case 8:\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\n            case 16:\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\n            case 32:\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\n            default:\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\n        }\n    }\n\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\n        const float32Data = new Float32Array(audioData.length);\n        for (let i = 0; i < audioData.length; i++) {\n            float32Data[i] = audioData[i] / maxValue;\n        }\n        return float32Data;\n    }\n\n    private updateAudioBuffer(): void {\n        if (this.samples.length === 0) {\n            return;\n        }\n\n        const channelCount = this.audioFormat.channels;\n        const bufferSource = this.audioContext.createBufferSource();\n        const frameCount = this.samples.length / channelCount;\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\n\n        // TODO: Should we do the conversion in the pushAudioSample instead?\n        for (let channel = 0; channel < channelCount; channel++) {\n            // Fill in individual channel data\n            let channelOffset = channel;\n            const audioData = audioBuffer.getChannelData(channel);\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\n                audioData[i] = this.samples[channelOffset];\n            }\n        }\n\n        if (this.startTime < this.audioContext.currentTime) {\n            this.startTime = this.audioContext.currentTime;\n        }\n\n        bufferSource.buffer = audioBuffer;\n        bufferSource.connect(this.gainNode);\n        bufferSource.start(this.startTime);\n\n        // Make sure we play the next sample after the current one.\n        this.startTime += audioBuffer.duration;\n\n        // Clear the samples for the next pushed data.\n        this.samples = new Float32Array();\n    }\n\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\n        if (this.audioContext === null) {\n            this.createAudioContext();\n        }\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\n        const destination: AudioDestinationNode = this.audioContext.destination;\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\n            source.buffer = newBuffer;\n            source.connect(destination);\n            source.start(0);\n        });\n    }\n}\n"]}