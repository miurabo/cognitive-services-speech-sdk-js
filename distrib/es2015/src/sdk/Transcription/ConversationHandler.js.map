{"version":3,"sources":["src/sdk/Transcription/ConversationHandler.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,kDAAkD","file":"ConversationHandler.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { ConversationTranscriptionEventArgs, PropertyCollection, SessionEventArgs } from \"../Exports\";\nimport {\n  ConversationExpirationEventArgs,\n  ConversationParticipantsChangedEventArgs,\n  ConversationTranslationCanceledEventArgs,\n  ConversationTranslationEventArgs } from \"./Exports\";\nimport { Callback, IConversation } from \"./IConversation\";\n\nexport interface ConversationHandler {\n    /**\n     * Defines event handler for session started events.\n     */\n    sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for session stopped events.\n     */\n    sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Event that signals an error with the conversation transcription, or the end of the audio stream has been reached.\n     */\n    canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\n\n    /**\n     * Leave the current conversation. After this is called, you will no longer receive any events.\n     */\n    leaveConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /**\n     * Starts sending audio to the conversation service for speech recognition and translation. You\n     * should subscribe to the Transcribing, and Transcribed events to receive conversation\n     * translation results for yourself, and other participants in the conversation.\n     */\n    startTranscribingAsync(cb?: Callback, err?: Callback): void;\n\n    /**\n     * Stops sending audio to the conversation service. You will still receive Transcribing, and\n     * and Transcribed events for other participants in the conversation.\n     */\n    stopTranscribingAsync(cb?: Callback, err?: Callback): void;\n}\n\n/**\n * A conversation translator that enables a connected experience where participants can use their\n * own devices to see everyone else's recognitions and IMs in their own languages. Participants\n * can also speak and send IMs to others.\n */\nexport interface IConversationTranslator extends ConversationHandler {\n\n    /** Gets the collection of properties and their values defined for this instance. */\n    readonly properties: PropertyCollection;\n\n    /** Gets the language name that is used for recognition. */\n    readonly speechRecognitionLanguage: string;\n\n    /**\n     * Event that signals how many more minutes are left before the conversation expires.\n     */\n    conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\n\n    /**\n     * Event that signals participants in the conversation have changed (e.g. a new participant joined).\n     */\n    participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\n\n    /**\n     * Event that signals a translated text message from a conversation participant.\n     */\n    textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n\n     /**\n      * The event recognized signals that a final  conversation translation result is received.\n      */\n    transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n\n     /**\n      * The event recognizing signals that an intermediate conversation translation result is received.\n      */\n    transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n\n    /**\n     * Joins an existing conversation. You should use this method if you have created a conversation using\n     * from an IConversation.\n     * @param conversation The conversation to join.\n     * @param nickname The display name to use for the current participant.\n     */\n    /** Start a conversation. */\n    joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\n\n    /**\n     * Joins an existing conversation.\n     * @param conversationId The unique identifier for the conversation to join.\n     * @param nickname The display name to use for the current participant.\n     * @param lang The speech language to use for the current participant.\n     */\n    joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\n\n    /**\n     * Sends an instant message to all participants in the conversation. This instant message\n     * will be translated into each participant's text language.\n     * @param message\n     */\n    sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void;\n}\n\n/**\n * A conversation transcriber that enables a connected experience where conversations can\n * logged with each participant recognized.\n */\nexport interface ConversationTranscriptionHandler extends ConversationHandler {\n     /**\n      * The event recognized signals that a final conversation translation result is received.\n      */\n    transcribed: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\n\n     /**\n      * The event recognizing signals that an intermediate conversation translation result is received.\n      */\n    transcribing: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\n\n    /**\n     * Joins an existing conversation.\n     * @param conversation The conversation to join.\n     */\n    joinConversationAsync(conversation: IConversation, cb?: Callback, err?: Callback): void;\n}\n"]}