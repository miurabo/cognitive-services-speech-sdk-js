{"version":3,"sources":["src/sdk/Transcription/IMeeting.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","file":"IMeeting.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, SpeechTranslationConfig } from \"../Exports\";\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\n\nexport type Callback = (result?: any) => void;\n\n/**\n * Manages meetings.\n */\nexport interface IMeeting {\n\n    config: SpeechTranslationConfig;\n\n    /**\n     * Gets/sets authorization token used to communicate with the service.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * Otherwise, the recognizer will encounter errors during recognition.\n     */\n    authorizationToken: string;\n\n    /** Gets the unique identifier for the current meeting. */\n    readonly meetingId: string;\n\n    /** Gets the collection of properties and their values defined for this instance. */\n    readonly properties: PropertyCollection;\n\n    /** Gets the language name that is used for recognition. */\n    readonly speechRecognitionLanguage: string;\n\n    /** Start a meeting.\n     * The host must connect to the websocket within a minute for the meeting to remain open.\n     */\n    startMeetingAsync(cb?: () => void, err?: (e: string) => void): void;\n\n    /** Delete a meeting. After this no one will be able to join the meeting. */\n    deleteMeetingAsync(cb?: () => void, err?: (e: string) => void): void;\n\n    /** End a meeting. */\n    endMeetingAsync(cb?: () => void, err?: (e: string) => void): void;\n\n    /** Lock a meeting. This will prevent new participants from joining. */\n    lockMeetingAsync(cb?: () => void, err?: (e: string) => void): void;\n\n    /**\n     * Mute all other participants in the meeting. After this no other participants will\n     * have their speech recognitions broadcast, nor be able to send text messages.\n     */\n    muteAllParticipantsAsync(cb?: () => void, err?: (e: string) => void): void;\n\n    /**\n     * Mute a participant.\n     * @param userId A user identifier\n     */\n    muteParticipantAsync(userId: string, cb?: () => void, err?: (e: string) => void): void;\n\n    /**\n     * Remove a participant from a meeting using the user id, Participant or User object\n     * @param userId A user identifier\n     */\n    removeParticipantAsync(userId: string | IParticipant | IUser, cb?: () => void, err?: (e: string) => void): void;\n\n    /** Unlocks a meeting. */\n    unlockMeetingAsync(): void;\n\n    /** Unmute all other participants in the meeting. */\n    unmuteAllParticipantsAsync(cb?: () => void, err?: (e: string) => void): void;\n\n    /**\n     * Unmute a participant.\n     * @param userId A user identifier\n     */\n    unmuteParticipantAsync(userId: string, cb?: () => void, err?: (e: string) => void): void;\n\n}\n\nexport interface MeetingProperties {\n    [key: string]: any;\n    id?: string;\n    attendees?: TranscriptionParticipant[];\n    record?: string;\n}\n\nexport interface MeetingInfo {\n    id: string;\n    participants: TranscriptionParticipant[];\n    meetingProperties: MeetingProperties;\n}\n"]}