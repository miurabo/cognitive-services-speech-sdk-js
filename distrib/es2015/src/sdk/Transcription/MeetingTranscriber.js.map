{"version":3,"sources":["src/sdk/Transcription/MeetingTranscriber.ts"],"names":[],"mappings":"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","file":"MeetingTranscriber.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioConfig,\n    CancellationEventArgs,\n    Connection,\n    MeetingTranscriptionEventArgs,\n    PropertyCollection,\n    PropertyId,\n    SessionEventArgs\n} from \"../Exports\";\nimport {\n    MeetingHandler,\n    MeetingImpl,\n    MeetingTranscriptionHandler\n} from \"./Exports\";\nimport { Callback, IMeeting } from \"./IMeeting\";\n\nexport class MeetingTranscriber implements MeetingTranscriptionHandler {\n\n    /**\n     * The event canceled signals that an error occurred during the meeting.\n     * @member MeetingTranscriber.prototype.MeetingCanceled\n     * @function\n     * @public\n     */\n    public MeetingCanceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during transcription.\n     * @member MeetingTranscriber.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: MeetingHandler, event: CancellationEventArgs) => void;\n\n     /**\n      * The event recognized signals that a final meeting transcription result is received.\n      * @member MeetingTranscriber.prototype.transcribed\n      * @function\n      * @public\n      */\n    public transcribed: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\n\n     /**\n      * The event recognizing signals that an intermediate meeting transcription result is received.\n      * @member MeetingTranscriber.prototype.transcribing\n      * @function\n      * @public\n      */\n    public transcribing: (sender: MeetingTranscriptionHandler, event: MeetingTranscriptionEventArgs) => void;\n\n    /**\n     * Defines event handler for session started events.\n     * @member MeetingTranscriber.prototype.sessionStarted\n     * @function\n     * @public\n     */\n    public sessionStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for session stopped events.\n     * @member MeetingTranscriber.prototype.sessionStopped\n     * @function\n     * @public\n     */\n    public sessionStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for meeting started events.\n     * @member MeetingTranscriber.prototype.MeetingStarted\n     * @function\n     * @public\n     */\n    public MeetingStarted: (sender: MeetingHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for meeting stopped events.\n     * @member MeetingTranscriber.prototype.MeetingStopped\n     * @function\n     * @public\n     */\n    public meetingStopped: (sender: MeetingHandler, event: SessionEventArgs) => void;\n\n    protected privAudioConfig: AudioConfig;\n    private privDisposedRecognizer: boolean;\n    private privRecognizer: TranscriberRecognizer;\n    private privProperties: PropertyCollection;\n\n    /**\n     * MeetingTranscriber constructor.\n     * @constructor\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public constructor(audioConfig?: AudioConfig) {\n        this.privAudioConfig = audioConfig;\n        this.privProperties = new PropertyCollection();\n        this.privRecognizer = undefined;\n        this.privDisposedRecognizer = false;\n    }\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member MeetingTranscriber.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * The collection of properties and their values defined for this MeetingTranscriber.\n     * @member MeetingTranscriber.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this MeetingTranscriber.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * @Internal\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\n     * Do not use externally, object returned will change without warning or notice.\n     */\n    public get internalData(): object {\n        return this.privRecognizer.internalData;\n    }\n\n    /**\n     * @Deprecated\n     * @Obsolete\n     * Please use the Connection.fromRecognizer pattern to obtain a connection object\n     */\n    public get connection(): Connection {\n        return Connection.fromRecognizer(this.privRecognizer);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member MeetingTranscriber.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member MeetingTranscriber.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * @param {Meeting} meeting - meeting to be recognized\n     */\n    public joinMeetingAsync(meeting: IMeeting, cb?: Callback, err?: Callback): void {\n        /* eslint-disable no-console */\n        // console.log(\">> MeetingTranscriber::joinMeetingAsync\");\n        /* eslint-enable no-console */\n        const meetingImpl = meeting as MeetingImpl;\n        Contracts.throwIfNullOrUndefined(MeetingImpl, \"Meeting\");\n\n        // ref the meeting object\n        // create recognizer and subscribe to recognizer events\n        this.privRecognizer = new TranscriberRecognizer(meeting.config, this.privAudioConfig);\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\n        this.privRecognizer.connectMeetingCallbacks(this);\n\n        marshalPromiseToCallbacks(meetingImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\n    }\n\n    /**\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\n     * User must subscribe to events to receive transcription results.\n     * @member MeetingTranscriber.prototype.startTranscribingAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the transcription has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\n    }\n\n    /**\n     * Starts meeting transcription, until stopTranscribingAsync() is called.\n     * User must subscribe to events to receive transcription results.\n     * @member MeetingTranscriber.prototype.stopTranscribingAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the transcription has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\n    }\n\n    /**\n     * Leave the current meeting. After this is called, you will no longer receive any events.\n     */\n    public leaveMeetingAsync(cb?: Callback, err?: Callback): void {\n        this.privRecognizer.disconnectCallbacks();\n        // eslint-disable-next-line\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member MeetingTranscriber.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member MeetingTranscriber.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedRecognizer) {\n            return;\n        }\n        if (!!this.privRecognizer) {\n            await this.privRecognizer.close();\n            this.privRecognizer = undefined;\n        }\n        if (disposing) {\n            this.privDisposedRecognizer = true;\n        }\n    }\n}\n"]}