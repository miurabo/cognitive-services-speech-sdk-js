{"version":3,"sources":["src/sdk/Transcription/Conversation.ts"],"names":[],"mappings":"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","file":"Conversation.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n    ConversationConnectionConfig,\n    ConversationManager,\n    ConversationReceivedTranslationEventArgs,\n    ConversationRecognizer,\n    ConversationRecognizerFactory,\n    ConversationTranslatorCommandTypes,\n    ConversationTranslatorMessageTypes,\n    IInternalConversation,\n    IInternalParticipant,\n    InternalParticipants,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs,\n    TranscriberRecognizer\n} from \"../../common.speech/Exports\";\nimport {\n    IDisposable,\n    IErrorMessages,\n    marshalPromiseToCallbacks\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    ConnectionEventArgs,\n    ConversationExpirationEventArgs,\n    ConversationParticipantsChangedEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationEventArgs,\n    ConversationTranslator,\n    Participant,\n    ParticipantChangedReason,\n    ProfanityOption,\n    PropertyCollection,\n    PropertyId,\n    SpeechTranslationConfig,\n} from \"../Exports\";\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\nimport { Callback, ConversationInfo, ConversationProperties, IConversation } from \"./IConversation\";\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\n\nexport abstract class Conversation implements IConversation {\n\n    protected constructor() {\n        return;\n    }\n\n    public abstract get authorizationToken(): string;\n\n    public abstract get config(): SpeechTranslationConfig;\n\n    public abstract get conversationId(): string;\n    public abstract get conversationInfo(): ConversationInfo;\n    public abstract get properties(): PropertyCollection;\n    public abstract get speechRecognitionLanguage(): string;\n    public abstract get participants(): Participant[];\n    public abstract set authorizationToken(value: string);\n    public abstract get isConnected(): boolean;\n\n    /**\n     * Create a conversation\n     * @param speechConfig\n     * @param cb\n     * @param err\n     */\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\n        }\n        let conversationImpl: ConversationImpl;\n        let cb: Callback;\n        let err: Callback;\n        if (typeof arg2 === \"string\") {\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            marshalPromiseToCallbacks((async (): Promise<void> => {})(), arg3, arg4);\n        } else {\n            conversationImpl = new ConversationImpl(speechConfig);\n            cb = arg2;\n            err = arg3;\n            conversationImpl.createConversationAsync(\n                ((): void => {\n                    if (!!cb) {\n                        cb();\n                    }\n                }),\n                (error: any): void => {\n                    if (!!err) {\n                        err(error);\n                    }\n                });\n        }\n        return conversationImpl;\n\n    }\n\n    /** Start a conversation. */\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Delete a conversation. After this no one will be able to join the conversation. */\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** End a conversation. */\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Lock a conversation. This will prevent new participants from joining. */\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Add Participant to Conversation. */\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\n\n    /**\n     * Mute all other participants in the conversation. After this no other participants will\n     * have their speech recognitions broadcast, nor be able to send text messages.\n     */\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\n\n    /**\n     * Mute a participant.\n     * @param userId A user identifier\n     */\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\n\n    /**\n     * Remove a participant from a conversation using the user id, Participant or User object\n     * @param userId A user identifier\n     */\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\n\n    /** Unlocks a conversation. */\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Unmute all other participants in the conversation. */\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\n\n    /**\n     * Unmute a participant.\n     * @param userId A user identifier\n     */\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\n}\n\nexport class ConversationImpl extends Conversation implements IDisposable {\n\n    private privConfig: SpeechTranslationConfig;\n    private privProperties: PropertyCollection;\n    private privLanguage: string;\n    private privToken: string;\n    private privIsDisposed: boolean;\n    private privRoom: IInternalConversation;\n    private privManager: ConversationManager;\n    private privConversationRecognizer: ConversationRecognizer;\n    private privIsConnected: boolean;\n    private privParticipants: InternalParticipants;\n    private privIsReady: boolean;\n    private privConversationTranslator: ConversationTranslator;\n    private privTranscriberRecognizer: TranscriberRecognizer;\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\n    private privConversationId: string;\n    private readonly privTextMessageMaxLength: number;\n\n    /**\n     * Create a conversation impl\n     * @param speechConfig\n     * @param {string} id - optional conversationId\n     */\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\n        super();\n        this.privIsConnected = false;\n        this.privIsDisposed = false;\n        this.privConversationId = \"\";\n        this.privProperties = new PropertyCollection();\n        this.privManager = new ConversationManager();\n\n        // check the speech language\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n        if (!language) {\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\n        }\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n        if (!id) {\n            // check the target language(s)\n            if (speechConfig.targetLanguages.length === 0) {\n                speechConfig.addTargetLanguage(this.privLanguage);\n            }\n\n            // check the profanity setting: speech and conversationTranslator should be in sync\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\n            if (!profanity) {\n                speechConfig.setProfanity(ProfanityOption.Masked);\n            }\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\n            if (hostNickname === undefined || hostNickname === null) {\n                hostNickname = \"Host\";\n            }\n            Contracts.throwIfNullOrTooLong(hostNickname, \"nickname\", 50);\n            Contracts.throwIfNullOrTooShort(hostNickname, \"nickname\", 2);\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\n\n        } else {\n            this.privConversationId = id;\n        }\n\n        // save the speech config for future usage\n        this.privConfig = speechConfig;\n\n        // save the config properties\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\n        this.privProperties = configImpl.properties.clone();\n        this.privIsConnected = false;\n        this.privParticipants = new InternalParticipants();\n        this.privIsReady = false;\n        this.privTextMessageMaxLength = 1000;\n    }\n\n    // get the internal data about a conversation\n    public get room(): IInternalConversation {\n        return this.privRoom;\n    }\n\n    // get the wrapper for connecting to the websockets\n    public get connection(): ConversationRecognizer {\n        return this.privConversationRecognizer; // this.privConnection;\n    }\n\n    // get the config\n    public get config(): SpeechTranslationConfig {\n        return this.privConfig;\n    }\n\n    // get the conversation Id\n    public get conversationId(): string {\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\n    }\n\n    // get the properties\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    // get the speech language\n    public get speechRecognitionLanguage(): string {\n        return this.privLanguage;\n    }\n\n    public get isMutedByHost(): boolean {\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\n    }\n\n    public get isConnected(): boolean {\n        return this.privIsConnected && this.privIsReady;\n    }\n\n    public get participants(): Participant[] {\n        return this.toParticipants(true);\n    }\n\n    public get me(): Participant {\n        return this.toParticipant(this.privParticipants.me);\n    }\n\n    public get host(): Participant {\n        return this.toParticipant(this.privParticipants.host);\n    }\n\n    public get transcriberRecognizer(): TranscriberRecognizer {\n        return this.privTranscriberRecognizer;\n    }\n\n    public get conversationInfo(): ConversationInfo {\n        const convId: string = this.conversationId;\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant): TranscriptionParticipant => (\n            {\n                id: part.id,\n                preferredLanguage: part.preferredLanguage,\n                voice: part.voice\n            }\n        ));\n        const props: ConversationProperties = {};\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\n            const val: string = this.properties.getProperty(key, \"\");\n            if (val !== \"\") {\n                props[key] = val;\n            }\n        }\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\n        return info;\n    }\n\n    private get canSend(): boolean {\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\n    }\n\n    private get canSendAsHost(): boolean {\n        return this.privIsConnected && this.privParticipants.me?.isHost;\n    }\n\n    // get / set the speech auth token\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    public get authorizationToken(): string {\n        return this.privToken;\n    }\n\n    public set authorizationToken(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\n        this.privToken = value;\n    }\n\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\n        this.privConversationTranslator = conversationTranslator;\n    }\n\n\n    /**\n     * Create a new conversation as Host\n     * @param cb\n     * @param err\n     */\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            if (!!this.privConversationRecognizer) {\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n            }\n            this.privManager.createOrJoin(this.privProperties, undefined,\n                ((room: IInternalConversation): void => {\n                    if (!room) {\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\n                    }\n                    this.privRoom = room;\n                    this.handleCallback(cb, err);\n                }),\n                ((error: any): void => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Starts a new conversation as host.\n     * @param cb\n     * @param err\n     */\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            // check if there is already a recognizer\n            if (!!this.privConversationRecognizer) {\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n            }\n            // check if there is conversation data available\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\n            // connect to the conversation websocket\n            this.privParticipants.meId = this.privRoom.participantId;\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\n\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\n            // has to forward serviceRecognizer connection events that usually get passed automatically\n            this.privConversationRecognizer.connected = this.onConnected;\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\n            this.privConversationRecognizer.canceled = this.onCanceled;\n\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\n\n            this.privConversationRecognizer.connect(this.privRoom.token,\n                ((): void => {\n                    this.handleCallback(cb, err);\n                }),\n                ((error: any): void => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Join a conversation as a participant.\n     * @param { IParticipant } participant - participant to add\n     * @param cb\n     * @param err\n     */\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\n    }\n\n    /**\n     * Join a conversation as a participant.\n     * @param conversation\n     * @param nickname\n     * @param lang\n     * @param cb\n     * @param err\n     */\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\n        try {\n            // TODO\n            // if (!!this.privConversationRecognizer) {\n            //     throw new Error(this.privErrors.permissionDeniedStart);\n            // }\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\n            // join the conversation\n            this.privManager.createOrJoin(this.privProperties, conversationId,\n                ((room: IInternalConversation): void => {\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\n                    this.privRoom = room;\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\n                    // join callback\n                    if (!!cb) {\n                        cb(room.cognitiveSpeechAuthToken);\n                    }\n                }),\n                ((error: any): void => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Deletes a conversation\n     * @param cb\n     * @param err\n     */\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\n    }\n\n    public async deleteConversationImplAsync(): Promise<void> {\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\n\n            this.dispose();\n    }\n\n    /**\n     * Issues a request to close the client websockets\n     * @param cb\n     * @param err\n     */\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\n    }\n\n    public endConversationImplAsync(): Promise<void> {\n        return this.close(true);\n    }\n\n    /**\n     * Issues a request to lock the conversation\n     * @param cb\n     * @param err\n     */\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(true),\n                    ((): void => {\n                        this.handleCallback(cb, err);\n                    }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to mute the conversation\n     * @param cb\n     * @param err\n     */\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            // check the user's permissions\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(true),\n                    ((): void => {\n                        this.handleCallback(cb, err);\n                    }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to mute a participant in the conversation\n     * @param userId\n     * @param cb\n     * @param err\n     */\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            // check the connection is open (host + participant can perform the mute command)\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            // if not host, check the participant is not muting another participant\n            if (!this.me.isHost && this.me.id !== userId) {\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n            }\n            // check the user exists\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\n            if (exists === -1) {\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, true), ((): void => {\n                        this.handleCallback(cb, err);\n                    }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to remove a participant from the conversation\n     * @param userId\n     * @param cb\n     * @param err\n     */\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\n                // Assume this is a transcription participant\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\n            } else {\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n                if (!this.canSendAsHost) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\n                }\n                let participantId = \"\";\n                if (typeof userId === \"string\") {\n                    participantId = userId;\n                } else if (userId.hasOwnProperty(\"id\")) {\n                    const participant: IParticipant = userId as IParticipant;\n                    participantId = participant.id;\n                } else if (userId.hasOwnProperty(\"userId\")) {\n                    const user: IUser = userId as IUser;\n                    participantId = user.userId;\n                }\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n                // check the participant exists\n                const index: number = this.participants.findIndex((p: Participant): boolean => p.id === participantId);\n                if (index === -1) {\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n                }\n                if (!!this.privConversationRecognizer) {\n                    this.privConversationRecognizer.sendRequest(this.getEjectCommand(participantId), ((): void => {\n                        this.handleCallback(cb, err);\n                    }),\n                        ((error: any): void => {\n                            this.handleError(error, err);\n                        }));\n                }\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to unlock the conversation\n     * @param cb\n     * @param err\n     */\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getLockCommand(false), ((): void => {\n                    this.handleCallback(cb, err);\n                }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n                }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to unmute all participants in the conversation\n     * @param cb\n     * @param err\n     */\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getMuteAllCommand(false), ((): void => {\n                    this.handleCallback(cb, err);\n                }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to unmute a participant in the conversation\n     * @param userId\n     * @param cb\n     * @param err\n     */\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            // check the connection is open (host + participant can perform the mute command)\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            // if not host, check the participant is not muting another participant\n            if (!this.me.isHost && this.me.id !== userId) {\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n            }\n            // check the user exists\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\n            if (exists === -1) {\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getMuteCommand(userId, false), ((): void => {\n                    this.handleCallback(cb, err);\n                }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Send a text message\n     * @param message\n     * @param cb\n     * @param err\n     */\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            // TODO: is a max length check required?\n            if (message.length > this.privTextMessageMaxLength) {\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getMessageCommand(message), ((): void => {\n                    this.handleCallback(cb, err);\n                }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Set translated to languages\n     * @param {string[]} languages - languages to translate to\n     * @param cb\n     * @param err\n     */\n    public setTranslatedLanguagesAsync(languages: string[], cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfArrayEmptyOrWhitespace(languages, this.privErrors.invalidArgs.replace(\"{arg}\", \"languages\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getSetTranslateToLanguagesCommand(languages),\n                    ((): void => {\n                        this.handleCallback(cb, err);\n                    }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Change nickname\n     * @param {string} nickname - new nickname for the room\n     * @param cb\n     * @param err\n     */\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            if (!!this.privConversationRecognizer) {\n                this.privConversationRecognizer.sendRequest(this.getChangeNicknameCommand(nickname),\n                    ((): void => {\n                        this.handleCallback(cb, err);\n                    }),\n                    ((error: any): void => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public dispose(): void {\n        if (this.isDisposed) {\n            return;\n        }\n        this.privIsDisposed = true;\n        if (!!this.config) {\n            this.config.close();\n        }\n        this.privConfig = undefined;\n        this.privLanguage = undefined;\n        this.privProperties = undefined;\n        this.privRoom = undefined;\n        this.privToken = undefined;\n        this.privManager = undefined;\n        this.privIsConnected = false;\n        this.privIsReady = false;\n        this.privParticipants = undefined;\n    }\n\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\n        if (!!this.privTranscriberRecognizer) {\n            await this.privTranscriberRecognizer.close();\n        }\n        await recognizer.checkAudioConfiguration();\n        this.privTranscriberRecognizer = recognizer;\n        this.privTranscriberRecognizer.conversation = this;\n    }\n\n    public getKeepAlive(): string {\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\n        return JSON.stringify({\n            id: \"0\",\n            nickname,\n            participantId: this.privRoom.participantId,\n            roomId: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.keepAlive\n        });\n    }\n\n    /** websocket callbacks */\n    /* eslint-disable @typescript-eslint/typedef */\n    private onConnected = (e: ConnectionEventArgs): void => {\n        this.privIsConnected = true;\n        try {\n            if (!!this.privConversationTranslator?.sessionStarted) {\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onDisconnected = (e: ConnectionEventArgs): void => {\n        try {\n            if (!!this.privConversationTranslator?.sessionStopped) {\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        } finally {\n            void this.close(false);\n        }\n    };\n\n    private onCanceled = (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): void => {\n        try {\n            if (!!this.privConversationTranslator?.canceled) {\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\n        try {\n            const updatedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.id);\n            if (updatedParticipant !== undefined) {\n\n                switch (e.key) {\n                    case ConversationTranslatorCommandTypes.changeNickname:\n                        updatedParticipant.displayName = e.value as string;\n                        break;\n                    case ConversationTranslatorCommandTypes.setUseTTS:\n                        updatedParticipant.isUsingTts = e.value as boolean;\n                        break;\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\n                        updatedParticipant.profanity = e.value as boolean;\n                        break;\n                    case ConversationTranslatorCommandTypes.setMute:\n                        updatedParticipant.isMuted = e.value as boolean;\n                        break;\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\n                        updatedParticipant.translateToLanguages = e.value as string[];\n                        break;\n                }\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\n\n                if (!!this.privConversationTranslator) {\n                    this.privConversationTranslator.participantsChanged(\n                        this.privConversationTranslator,\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\n                }\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onLockRoomCommandReceived = (): void => {\n        // TODO\n    };\n\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\n        try {\n            this.privParticipants.participants.forEach((p: IInternalParticipant): boolean => p.isMuted = (p.isHost ? false : e.isMuted));\n            if (!!this.privConversationTranslator) {\n                this.privConversationTranslator.participantsChanged(\n                    this.privConversationTranslator,\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\n                        this.toParticipants(false), e.sessionId));\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\n        try {\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\n            if (newParticipant !== undefined) {\n                if (!!this.privConversationTranslator) {\n                    this.privConversationTranslator.participantsChanged(\n                        this.privConversationTranslator,\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\n                            [this.toParticipant(newParticipant)], e.sessionId));\n                }\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\n        try {\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\n            if (ejectedParticipant !== undefined) {\n                // remove the participant from the internal participants list\n                this.privParticipants.deleteParticipant(e.participant.id);\n                if (!!this.privConversationTranslator) {\n                    // notify subscribers that the participant has left the conversation\n                    this.privConversationTranslator.participantsChanged(\n                        this.privConversationTranslator,\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\n                }\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\n        try {\n            switch (e.command) {\n                case ConversationTranslatorMessageTypes.final:\n                    if (!!this.privConversationTranslator) {\n                        this.privConversationTranslator.transcribed(\n                            this.privConversationTranslator,\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n                    }\n                    break;\n                case ConversationTranslatorMessageTypes.partial:\n                    if (!!this.privConversationTranslator) {\n                        this.privConversationTranslator.transcribing(\n                            this.privConversationTranslator,\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n                    }\n                    break;\n                case ConversationTranslatorMessageTypes.instantMessage:\n                    if (!!this.privConversationTranslator) {\n                        this.privConversationTranslator.textMessageReceived(\n                            this.privConversationTranslator,\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n                    }\n                    break;\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\n        try {\n            // check if the session token needs to be updated\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\n                this.privRoom.token = e.sessionToken;\n            }\n            // save the participants\n            this.privParticipants.participants = [...e.participants];\n            // enable the conversation\n            if (this.privParticipants.me !== undefined) {\n                this.privIsReady = true;\n            }\n            if (!!this.privConversationTranslator) {\n                this.privConversationTranslator.participantsChanged(\n                    this.privConversationTranslator,\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\n            }\n            // if this is the host, update the nickname if needed\n            if (this.me.isHost) {\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\n                    // issue a change nickname request\n                    this.changeNicknameAsync(nickname);\n                }\n            }\n        } catch (e) {\n            //\n        }\n    };\n\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\n        try {\n            if (!!this.privConversationTranslator) {\n                this.privConversationTranslator.conversationExpiration(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        }\n    };\n    /* eslint-enable @typescript-eslint/typedef */\n\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\n        if (newParticipant !== undefined) {\n            if (!!this.privTranscriberRecognizer) {\n                const conversationInfo = this.conversationInfo;\n                conversationInfo.participants = [participant];\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\n            }\n        }\n    }\n\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\n        this.privParticipants.deleteParticipant(participant.id);\n        const conversationInfo = this.conversationInfo;\n        conversationInfo.participants = [participant];\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\n    }\n\n    private async close(dispose: boolean): Promise<void> {\n        try {\n            this.privIsConnected = false;\n            await this.privConversationRecognizer?.close();\n            this.privConversationRecognizer = undefined;\n            if (!!this.privConversationTranslator) {\n                this.privConversationTranslator.dispose();\n            }\n        } catch (e) {\n            // ignore error\n            throw e;\n        }\n        if (dispose) {\n            this.dispose();\n        }\n    }\n\n    /** Helpers */\n    private handleCallback(cb: () => void, err: (message: string) => void): void {\n        if (!!cb) {\n            try {\n                cb();\n            } catch (e) {\n                if (!!err) {\n                    err(e as string);\n                }\n            }\n            cb = undefined;\n        }\n    }\n\n    private handleError(error: any, err: (message: string) => void): void {\n        if (!!err) {\n            if (error instanceof Error) {\n                const typedError: Error = error;\n                err(typedError.name + \": \" + typedError.message);\n\n            } else {\n                err(error as string);\n            }\n        }\n    }\n\n    /** Participant Helpers */\n    private toParticipants(includeHost: boolean): Participant[] {\n\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant): Participant => ( this.toParticipant(p) ) );\n        if (!includeHost) {\n            return participants.filter((p: Participant): boolean => p.isHost === false);\n        } else {\n            return participants;\n        }\n    }\n\n    private toParticipant(p: IInternalParticipant): Participant {\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\n    }\n\n    private getMuteAllCommand(isMuted: boolean): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setMuteAll,\n            participantId: this.privRoom.participantId, // the id of the host\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: isMuted\n        });\n    }\n\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setMute,\n            // eslint-disable-next-line object-shorthand\n            participantId: participantId,\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: isMuted\n        });\n    }\n\n    private getLockCommand(isLocked: boolean): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setLockState,\n            participantId: this.privRoom.participantId,\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: isLocked\n        });\n    }\n\n    private getEjectCommand(participantId: string): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\n            // eslint-disable-next-line object-shorthand\n            participantId: participantId,\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n        });\n    }\n\n    private getSetTranslateToLanguagesCommand(languages: string[]): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setTranslateToLanguages,\n            participantId: this.privRoom.participantId, // the id of the host\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: languages\n        });\n    }\n\n    private getChangeNicknameCommand(nickname: string): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.changeNickname,\n            nickname,\n            participantId: this.privRoom.participantId, // the id of the host\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: nickname\n        });\n    }\n\n    private getMessageCommand(message: string): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\n\n        return JSON.stringify({\n            participantId: this.privRoom.participantId,\n            roomId: this.privRoom.roomId,\n            text: message,\n            type: ConversationTranslatorMessageTypes.instantMessage\n        });\n    }\n\n}\n"]}