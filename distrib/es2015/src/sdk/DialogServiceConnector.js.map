{"version":3,"sources":["src/sdk/DialogServiceConnector.ts"],"names":[],"mappings":"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","file":"DialogServiceConnector.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\nimport {\n    DialogServiceAdapter,\n    IAgentConfig,\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig\n} from \"../common.speech/Exports\";\nimport {\n    Deferred,\n    marshalPromiseToCallbacks\n} from \"../common/Exports\";\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport {\n    AudioConfig,\n    PropertyCollection,\n    Recognizer,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult\n} from \"./Exports\";\nimport { PropertyId } from \"./PropertyId\";\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\n\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\nexport class DialogServiceConnector extends Recognizer {\n    private privIsDisposed: boolean;\n    private isTurnComplete: boolean;\n\n    /**\n     * Initializes an instance of the DialogServiceConnector.\n     * @constructor\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n     */\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\n\n        this.isTurnComplete = true;\n        this.privIsDisposed = false;\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\n\n        const agentConfig = this.buildAgentConfig();\n        this.privReco.agentConfig.set(agentConfig);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member DialogServiceConnector.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member DialogServiceConfig.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member DialogServiceConnector.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\n\n    /**\n     * The event activityReceived signals that an activity has been received.\n     * @member DialogServiceConnector.prototype.activityReceived\n     * @function\n     * @public\n     */\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\n\n    /**\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\n     * or other problem.\n     * @member DialogServiceConnector.prototype.turnStatusReceived\n     * @function\n     * @public\n     */\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\n\n    /**\n     * Starts a connection to the service.\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n     *\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n     * be notified when the connection is established.\n     * @member DialogServiceConnector.prototype.connect\n     * @function\n     * @public\n     */\n    public connect(cb?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\n    }\n\n    /**\n     * Closes the connection the service.\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n     *\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n     */\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * The collection of properties and their values defined for this DialogServiceConnector.\n     * @member DialogServiceConnector.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /** Gets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be empty\n     */\n    public get speechActivityTemplate(): string {\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n    }\n\n    /** Sets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be null or empty.\n     * Note: it has to be a valid Json object.\n     */\n    public set speechActivityTemplate(speechActivityTemplate: string) {\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n    }\n\n    /**\n     * Starts recognition and stops after the first utterance is recognized.\n     * @member DialogServiceConnector.prototype.listenOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the reco has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\n        if (this.isTurnComplete) {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\n                await this.privReco.connect();\n                await this.implRecognizerStop();\n                this.isTurnComplete = false;\n\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\n\n                const e: SpeechRecognitionResult = await ret.promise;\n                await this.implRecognizerStop();\n\n                return e;\n            };\n\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\n\n            retPromise.catch((): void => {\n                // Destroy the recognizer.\n                // We've done all we can here.\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                this.dispose(true).catch((): void => { });\n            });\n\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\n                this.isTurnComplete = true;\n            }), cb, err);\n        }\n    }\n\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member DialogServiceConnector.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, err?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\n    }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privIsDisposed) {\n            return;\n        }\n\n        if (disposing) {\n            this.privIsDisposed = true;\n            await this.implRecognizerStop();\n            await super.dispose(disposing);\n        }\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\n\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n    }\n\n    private buildAgentConfig(): IAgentConfig {\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n\n        return {\n            botInfo: {\n                commType: communicationType,\n                commandsCulture: undefined,\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\n            },\n            version: 0.2\n        };\n    }\n}\n"]}