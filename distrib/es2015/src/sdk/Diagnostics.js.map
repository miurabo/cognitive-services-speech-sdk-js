{"version":3,"sources":["src/sdk/Diagnostics.ts"],"names":[],"mappings":"AAAA,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;AAEF,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AACnE,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAG3C;;;GAGG;AACH,MAAM,OAAO,WAAW;IAGb,MAAM,CAAC,eAAe,CAAC,QAAkB;QAC5C,IAAI,CAAC,YAAY,GAAG,IAAI,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QACzD,MAAM,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7D,CAAC;IAEM,MAAM,CAAC,kBAAkB;QAC5B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,mBAAmB,GAAG,IAAI,CAAC;SAChD;IACL,CAAC;IAEM,MAAM,CAAC,iBAAiB;QAC3B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,mBAAmB,GAAG,KAAK,CAAC;SACjD;IACL,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,IAAY;QACvC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;gBACrB,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;aACpC;SACJ;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;SACpE;IACL,CAAC;;AA3Bc,wBAAY,GAA2B,SAAS,CAAC","file":"Diagnostics.js","sourcesContent":["//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nimport { ConsoleLoggingListener } from \"../common.browser/Exports\";\nimport { Events } from \"../common/Exports\";\nimport { LogLevel } from \"./LogLevel\";\n\n/**\n * Defines diagnostics API for managing console output\n * Added in version 1.21.0\n */\nexport class Diagnostics {\n    private static privListener: ConsoleLoggingListener = undefined;\n\n    public static SetLoggingLevel(logLevel: LogLevel): void {\n        this.privListener = new ConsoleLoggingListener(logLevel);\n        Events.instance.attachConsoleListener(this.privListener);\n    }\n\n    public static StartConsoleOutput(): void {\n        if (!!this.privListener) {\n            this.privListener.enableConsoleOutput = true;\n        }\n    }\n\n    public static StopConsoleOutput(): void {\n        if (!!this.privListener) {\n            this.privListener.enableConsoleOutput = false;\n        }\n    }\n\n    public static SetLogOutputPath(path: string): void {\n        if (typeof window === \"undefined\") {\n            if (!!this.privListener) {\n                this.privListener.logPath = path;\n            }\n        } else {\n            throw new Error(\"File system logging not available in browser.\");\n        }\n    }\n\n}\n"]}