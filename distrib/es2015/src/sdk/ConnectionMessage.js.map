{"version":3,"sources":["src/sdk/ConnectionMessage.ts"],"names":[],"mappings":"AAAA,EAAE;AACF,gDAAgD;AAChD,wGAAwG;AACxG,EAAE;AAEF,gDAAgD;AAChD,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAEH,WAAW,EACd,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EACH,kBAAkB,EACrB,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C;;;;;;;GAOG;AACH,MAAM,OAAgB,iBAAiB;CAwCtC;AAED,MAAM,OAAO,qBAAqB;IAK9B,YAAmB,OAA6B;QAC5C,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,IAAI,kBAAkB,EAAE,CAAC;QAC/C,IAAI,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;YAChE,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;SAC9H;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAc,EAAQ,EAAE;YAC7E,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,IAAW,IAAI;QACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAW,EAAW,EAAE,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAC1K,CAAC;IAED;;;OAGG;IACH,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,CAAC;IACvE,CAAC;IAED;;;OAGG;IACH,IAAW,eAAe;QACtB,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,KAAK,WAAW,CAAC,MAAM,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,IAAW,WAAW;QAClB,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;IACjD,CAAC;IAED;;;OAGG;IACH,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,QAAQ;QACX,OAAO,EAAE,CAAC;IACd,CAAC;CACJ","file":"ConnectionMessage.js","sourcesContent":["//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\n// eslint-disable-next-line max-classes-per-file\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\nimport {\n    ConnectionMessage as IntConnectionMessage,\n    MessageType\n} from \"../common/Exports\";\nimport {\n    PropertyCollection\n} from \"./PropertyCollection\";\nimport { PropertyId } from \"./PropertyId\";\n\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\nexport abstract class ConnectionMessage {\n    /**\n     * The message path.\n     */\n    public abstract get path(): string;\n\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n    public abstract get isTextMessage(): boolean;\n\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n    public abstract get isBinaryMessage(): boolean;\n\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n    public abstract get TextMessage(): string;\n\n    /**\n     * Gets the binary message payload.\n     */\n    public abstract get binaryMessage(): ArrayBuffer;\n\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n    public abstract get properties(): PropertyCollection;\n\n    /**\n     * Returns a string that represents the connection message.\n     */\n    public abstract toString(): string;\n}\n\nexport class ConnectionMessageImpl {\n\n    private privConnectionMessage: IntConnectionMessage;\n    private privProperties: PropertyCollection;\n\n    public constructor(message: IntConnectionMessage) {\n        this.privConnectionMessage = message;\n        this.privProperties = new PropertyCollection();\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\n        }\n\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string): void => {\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\n        });\n    }\n\n    /**\n     * The message path.\n     */\n    public get path(): string {\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string): boolean => key.toLowerCase() === \"path\".toLowerCase())];\n    }\n\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n    public get isTextMessage(): boolean {\n        return this.privConnectionMessage.messageType === MessageType.Text;\n    }\n\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n    public get isBinaryMessage(): boolean {\n        return this.privConnectionMessage.messageType === MessageType.Binary;\n    }\n\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n    public get TextMessage(): string {\n        return this.privConnectionMessage.textBody;\n    }\n\n    /**\n     * Gets the binary message payload.\n     */\n    public get binaryMessage(): ArrayBuffer {\n        return this.privConnectionMessage.binaryBody;\n    }\n\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Returns a string that represents the connection message.\n     */\n    public toString(): string {\n        return \"\";\n    }\n}\n"]}