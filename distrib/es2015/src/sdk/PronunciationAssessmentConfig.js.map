{"version":3,"sources":["src/sdk/PronunciationAssessmentConfig.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAGlC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EACH,oCAAoC,EACpC,kCAAkC,EAClC,kBAAkB,EAClB,UAAU,EAEb,MAAM,WAAW,CAAC;AAYnB;;;;GAIG;AACH,MAAM,OAAO,6BAA6B;IAKtC;;;;;;;OAOG;IACH,YAAmB,aAAqB,EACrB,gBAAsD,oCAAoC,CAAC,SAAS,EACpG,cAAkD,kCAAkC,CAAC,OAAO,EAC5F,eAAwB,KAAK;QAC5C,SAAS,CAAC,sBAAsB,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;QACjE,IAAI,CAAC,cAAc,GAAG,IAAI,kBAAkB,EAAE,CAAC;QAC/C,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,qCAAqC,EAAE,aAAa,CAAC,CAAC;QACjG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,qCAAqC,EAAE,oCAAoC,CAAC,aAAa,CAAC,CAAC,CAAC;QACvI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,mCAAmC,EAAE,kCAAkC,CAAC,WAAW,CAAC,CAAC,CAAC;QACjI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,oCAAoC,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;IAC3G,CAAC;IAED;;;;;;;;;OASG;IACI,MAAM,CAAC,QAAQ,CAAC,IAAY;QAC/B,SAAS,CAAC,sBAAsB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,MAAM,GAAG,IAAI,6BAA6B,CAAC,EAAE,CAAC,CAAC;QACrD,MAAM,CAAC,cAAc,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACjD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;QAC7E,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,MAAM;QACT,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;IACtF,CAAC;IAEM,OAAO,CAAC,UAAsB;QACjC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,MAAM,QAAQ,GAAG,UAAU,CAAC,YAAqC,CAAC;QAClE,QAAQ,CAAC,aAAa,CAAC,gCAAgC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,8BAA8B,CAAC,EAAE,QAAQ,CAAC,2BAA2B,CAAC,CAAC;IAC1K,CAAC;IAED;;;;;;OAMG;IACH,IAAW,aAAa;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;IACzF,CAAC;IAED;;;;;;OAMG;IACH,IAAW,aAAa,CAAC,aAAqB;QAC1C,SAAS,CAAC,uBAAuB,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;QAClE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,qCAAqC,EAAE,aAAa,CAAC,CAAC;IACjG,CAAC;IAED;;;;;;;;OAQG;IACH,IAAW,eAAe,CAAC,eAAuB;QAC9C,SAAS,CAAC,uBAAuB,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;QACtE,IAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;IAC/C,CAAC;IAED;;;;;;;OAOG;IACH,IAAW,YAAY,CAAC,YAAqB;QACzC,MAAM,kBAAkB,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAC3D,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,oCAAoC,EAAE,kBAAkB,CAAC,CAAC;IACrG,CAAC;IAED;;;;;;;OAOG;IACH,IAAW,YAAY;QACnB,MAAM,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,oCAAoC,EAAE,OAAO,CAAC,CAAC;QACjH,OAAO,CAAC,kBAAkB,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;OAOG;IACH,IAAW,iBAAiB,CAAC,iBAAyB;QAClD,IAAI,CAAC,qBAAqB,GAAG,iBAAiB,CAAC;IACnD,CAAC;IAED;;;;;;OAMG;IACH,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEO,UAAU;QACd,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;QAClG,MAAM,UAAU,GAAgC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAgC,CAAC;QAEtG,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;QACxG,IAAI,aAAa,EAAE;YACf,UAAU,CAAC,aAAa,GAAG,aAAa,CAAC;SAC5C;QAED,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,qCAAqC,CAAC,CAAC;QACxG,IAAI,aAAa,EAAE;YACf,UAAU,CAAC,aAAa,GAAG,aAAa,CAAC;SAC5C;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,mCAAmC,CAAC,CAAC;QACpG,IAAI,WAAW,EAAE;YACb,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC;SACxC;QAED,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,UAAU,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;SACzD;QAED,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC5B,UAAU,CAAC,iBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC;SAC7D;QAED,wCAAwC;QACxC,UAAU,CAAC,SAAS,GAAG,eAAe,CAAC;QAEvC,MAAM,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,oCAAoC,CAAC,CAAC;QAC5G,IAAI,kBAAkB,EAAE;YACpB,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;SAC/C;QAED,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,UAAU,CAAC,8BAA8B,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3G,CAAC;CAEJ","file":"PronunciationAssessmentConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    PronunciationAssessmentGradingSystem,\n    PronunciationAssessmentGranularity,\n    PropertyCollection,\n    PropertyId,\n    Recognizer\n} from \"./Exports\";\n\ninterface PronunciationAssessmentJSON {\n    referenceText: string;\n    gradingSystem: string;\n    granularity: string;\n    phonemeAlphabet: string;\n    nbestPhonemeCount: number;\n    dimension: string;\n    enableMiscue: boolean;\n}\n\n/**\n * Pronunciation assessment configuration.\n * @class PronunciationAssessmentConfig\n * Added in version 1.15.0.\n */\nexport class PronunciationAssessmentConfig {\n    private privProperties: PropertyCollection;\n    private privPhonemeAlphabet: string;\n    private privNBestPhonemeCount: number;\n\n    /**\n     * PronunciationAssessmentConfig constructor.\n     * @constructor\n     * @param {string} referenceText\n     * @param gradingSystem\n     * @param granularity\n     * @param enableMiscue\n     */\n    public constructor(referenceText: string,\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\n                       enableMiscue: boolean = false) {\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\n        this.privProperties = new PropertyCollection();\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\n    }\n\n    /**\n     * @member PronunciationAssessmentConfig.fromJSON\n     * @function\n     * @public\n     * @param {string} json The json string containing the pronunciation assessment parameters.\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\n     * This method is designed to support the pronunciation assessment parameters still in preview.\n     * Under normal circumstances, use the constructor instead.\n     */\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\n        Contracts.throwIfNullOrUndefined(json, \"json\");\n        const config = new PronunciationAssessmentConfig(\"\");\n        config.privProperties = new PropertyCollection();\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\n        return config;\n    }\n\n    public toJSON(): string {\n        this.updateJson();\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\n    }\n\n    public applyTo(recognizer: Recognizer): void {\n        this.updateJson();\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\n        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params), recoBase.isSpeakerDiarizationEnabled);\n    }\n\n    /**\n     * Gets the reference text.\n     * @member PronunciationAssessmentConfig.prototype.referenceText\n     * @function\n     * @public\n     * @returns {string} Reference text.\n     */\n    public get referenceText(): string {\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n    }\n\n    /**\n     * Gets/Sets the reference text.\n     * @member PronunciationAssessmentConfig.prototype.referenceText\n     * @function\n     * @public\n     * @param {string} referenceText - Reference text.\n     */\n    public set referenceText(referenceText: string) {\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n    }\n\n    /**\n     * Sets the phoneme alphabet.\n     * The valid values are \"SAPI\" (default) and \"IPA\".\n     * Added in version 1.20.0\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\n     * @function\n     * @public\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\n     */\n    public set phonemeAlphabet(phonemeAlphabet: string) {\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\n        this.privPhonemeAlphabet = phonemeAlphabet;\n    }\n\n    /**\n     * Sets the boolean enableMiscue property.\n     * Added in version 1.26.0\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\n     * @function\n     * @public\n     * @param {boolean} enableMiscue - enable miscue.\n     */\n    public set enableMiscue(enableMiscue: boolean) {\n        const enableMiscueString = enableMiscue ? \"true\" : \"false\";\n        this.properties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, enableMiscueString);\n    }\n\n    /**\n     * Gets the boolean enableMiscue property.\n     * Added in version 1.26.0\n     * @member PronunciationAssessmentConfig.prototype.enableMiscue\n     * @function\n     * @public\n     * @return {boolean} enableMiscue - enable miscue.\n     */\n    public get enableMiscue(): boolean {\n        const enableMiscueString = this.properties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue, \"false\");\n        return (enableMiscueString.toLowerCase() === \"true\");\n    }\n\n    /**\n     * Sets the nbest phoneme count\n     * Added in version 1.20.0\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\n     * @function\n     * @public\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\n     */\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\n        this.privNBestPhonemeCount = nbestPhonemeCount;\n    }\n\n    /**\n     * @member PronunciationAssessmentConfig.prototype.properties\n     * @function\n     * @public\n     * @return {PropertyCollection} Properties of the config.\n     * @summary Gets a pronunciation assessment config properties\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    private updateJson(): void {\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\n        const paramsJson: PronunciationAssessmentJSON = JSON.parse(jsonString) as PronunciationAssessmentJSON;\n\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n        if (referenceText) {\n            paramsJson.referenceText = referenceText;\n        }\n\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\n        if (gradingSystem) {\n            paramsJson.gradingSystem = gradingSystem;\n        }\n\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\n        if (granularity) {\n            paramsJson.granularity = granularity;\n        }\n\n        if (this.privPhonemeAlphabet) {\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\n        }\n\n        if (this.privNBestPhonemeCount) {\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\n        }\n\n        // always set dimension to Comprehensive\n        paramsJson.dimension = \"Comprehensive\";\n\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\n        if (enableMiscueString) {\n            paramsJson.enableMiscue = this.enableMiscue;\n        }\n\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\n    }\n\n}\n"]}