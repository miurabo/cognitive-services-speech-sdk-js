{"version":3,"sources":["src/sdk/TranslationRecognizer.ts"],"names":[],"mappings":"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","file":"TranslationRecognizer.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n    TranslationConnectionFactory,\n    TranslationServiceRecognizer\n} from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Connection } from \"./Connection\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    AutoDetectSourceLanguageConfig,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationSynthesisEventArgs\n} from \"./Exports\";\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\n\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\nexport class TranslationRecognizer extends Recognizer {\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member TranslationRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member TranslationRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member TranslationRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\n\n    /**\n     * The event synthesizing signals that a translation synthesis result is received.\n     * @member TranslationRecognizer.prototype.synthesizing\n     * @function\n     * @public\n     */\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\n\n    private privDisposedTranslationRecognizer: boolean;\n\n    /**\n     * Initializes an instance of the TranslationRecognizer.\n     * @constructor\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n     * @param {IConnectionFactory} connectionFactory - An optional connection factory to use to generate the endpoint URIs, headers to set, etc...\n     */\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, connectionFactory?: IConnectionFactory) {\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\n\n        super(audioConfig, configImpl.properties, connectionFactory || new TranslationConnectionFactory());\n\n        this.privDisposedTranslationRecognizer = false;\n\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            Contracts.throwIfNullOrWhitespace(\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n        }\n\n        Contracts.throwIfNullOrWhitespace(\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\n            PropertyId.SpeechServiceConnection_RecoLanguage),\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n    }\n\n    /**\n     * TranslationRecognizer constructor.\n     * @constructor\n     * @param {SpeechTranslationConfig} speechTranslationConfig - an set of initial properties for this recognizer\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public static FromConfig(speechTranslationConfig: SpeechTranslationConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): TranslationRecognizer {\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechTranslationConfigImpl.properties);\n        return new TranslationRecognizer(speechTranslationConfig, audioConfig);\n    }\n\n    /**\n     * Gets the language name that was set when the recognizer was created.\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} Gets the language name that was set when the recognizer was created.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets target languages for translation that were set when the recognizer was created.\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n     * @member TranslationRecognizer.prototype.targetLanguages\n     * @function\n     * @public\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n     */\n    public get targetLanguages(): string[] {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    }\n\n    /**\n     * Gets the name of output voice.\n     * @member TranslationRecognizer.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} the name of output voice.\n     */\n    public get voiceName(): string {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    }\n\n    /**\n     * The collection of properties and their values defined for this TranslationRecognizer.\n     * @member TranslationRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    public set authorizationToken(value: string) {\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * Starts recognition and translation, and stops after the first utterance is recognized.\n     * The task returns the translation text as result.\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitable only\n     * for single shot recognition like command or query. For long-running recognition,\n     * use startContinuousRecognitionAsync() instead.\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the translation has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    /**\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive translation results.\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    /**\n     * Stops continuous recognition and translation.\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n\n    /**\n     * dynamically remove a language from list of target language\n     * (can be used while recognition is ongoing)\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\n     * @function\n     * @param lang - language to be removed\n     * @public\n     */\n    public removeTargetLanguage(lang: string): void {\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n            const index: number = languages.indexOf(lang);\n            if (index > -1) {\n                languages.splice(index, 1);\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n                this.updateLanguages(languages);\n            }\n        }\n    }\n\n    /**\n     * dynamically add a language to list of target language\n     * (can be used while recognition is ongoing)\n     * @member TranslationRecognizer.prototype.addTargetLanguage\n     * @function\n     * @param lang - language to be added\n     * @public\n     */\n    public addTargetLanguage(lang: string): void {\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\n        let languages: string[] = [];\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n            if (!languages.includes(lang)) {\n                languages.push(lang);\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n            }\n        } else {\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\n            languages = [lang];\n        }\n        this.updateLanguages(languages);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member TranslationRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    /**\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\n     * @member TranslationRecognizer.prototype.onConnection\n     * @function\n     * @public\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    public onConnection(): void { }\n\n    /**\n     * handles disconnection events for conversation translation scenarios.\n     * @member TranslationRecognizer.prototype.onDisconnection\n     * @function\n     * @public\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    public async onDisconnection(): Promise<void> { }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedTranslationRecognizer) {\n            return;\n        }\n\n        this.privDisposedTranslationRecognizer = true;\n\n        if (disposing) {\n            await this.implRecognizerStop();\n            await super.dispose(disposing);\n        }\n    }\n\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n\n    private updateLanguages(languages: string[]): void {\n        const conn: Connection = Connection.fromRecognizer(this);\n        if (!!conn) {\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\n            conn.sendMessageAsync(\"event\", JSON.stringify({\n                id: \"translation\",\n                name: \"updateLanguage\",\n                to: languages\n                }));\n        }\n    }\n\n}\n"]}